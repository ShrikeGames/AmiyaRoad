import * as THREE from 'three';
import { Vector3 } from 'three';
import { ConvexGeometry } from '../jsm/geometries/ConvexGeometry.js';
let mapData = {};
mapData["1"] = {};
mapData["2"] = {};
mapData["3"] = {};

mapData["1"]["1"] = "1~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,100,0,0,0,1,1,1|Tile2,0,0,10,200,0,0,0,1,1,1|Tile3,1,0,10,375,0,0,0,1,1,1|Tile4,0,0,10,475,0,0,0,1,1,1|Tile5,1,0,10,575,0,0,0,1,1,1|Tile6,0,0,10,825,0,0,0,1,1,1|Tile7,1,0,10,925,0,0,0,1,1,1|Tile8,0,0,10,1025,0,0,0,1,1,1|Tile9,1,0,10,1325,0,0,0,1,1,1|AmiyaBar,2,0,10,1400,0,0,0,1,1,1|AmiyaBar,2,0,10,1450,0,0,0,1,1,1|AmiyaBar,2,0,10,1500,0,0,0,1,1,1|Tile14,1,0,10,1575,0,0,0,1,1,1|Tile15,0,-30,10,1675,0,0,0,1,1,1|Tile16,1,-60,10,1775,0,0,0,1,1,1|Tile17,0,-60,10,1875,0,0,0,1,1,1|Tile18,1,-110,25,1875,0,0,-0.30000000000000004,1,1,1|Tile19,0,-110,25,1775,0,0,-0.30000000000000004,1,1,1|Tile20,1,-40,10,1975,0,0,0,1,1,1|Tile21,0,-20,10,2075,0,0,0,1,1,1|Tile22,1,50,10,2275,0,0,0,1,1,1|Tile23,0,50,10,2375,0,0,0,1,1,1|Tile24,1,50,10,2475,0,0,0,1,1,1|Tile25,0,0,10,2675,0,0,0,1,1,1|Tile26,1,0,10,2775,0,0,0,1,1,1|Tile27,0,0,30,2950,0,0,0,1,1,1|Tile28,1,0,30,3050,0,0,0,1,1,1|Tile29,0,0,20,3150,0.1,0,0,1,1,1|Tile30,1,0,10,3250,0,0,0,1,1,1|Tile31,0,0,10,3350,0,0,0,1,1,1|Player,2,-4,91,4908,0,0,0,1,1,1|Tile32,1,0,10,3450,0,0,0,1,1,1|Tile33,0,0,10,3600,0,0,0,2,1,2|Tile34,1,0,10,3800,0,0,0,2,1,2|Tile35,0,30,30,3775,0,0,0,1,1,1|Tile36,1,-20,30,3600,0,0,0,1,1,1|Tile37,0,30,35,4025,0,0,0,1,1,1|Tile38,1,-30,10,4025,0,0,0,1,1,1|Tile39,0,-30,10,4125,0,0,0,1,1,1|AmiyaBar40,1,30,35,4100,0,0,0,1,1,1|Tile41,0,30,35,4175,0,0,0,1,1,1|Tile42,1,-30,10,4225,0,0,0,1,1,1|Tile43,0,0,10,4325,0,0,0,1,1,1|Tile44,1,0,10,4425,0,0,0,1,1,1|Tile45,0,0,10,4525,0,0,0,1,1,1|Tile46,1,0,10,4625,0,0,0,1,1,1|Tile47,0,0,10,4825,0,0,0,1,1,1|Goal,1,0,70,4900,0,0,0,1,1,1"
mapData["1"]["2"] = "1~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,100,0,0,0,1,1,1|Tile2,0,0,10,200,0,0,0,1,1,1|Tile3,1,30,30,300,-0.2,0,0,1,1,1|Tile4,0,30,50,400,0,0,0,1,1,1|Tile5,1,30,50,500,0,0,0,1,1,1|Tile6,0,30,65,600,0,0,0,1,1,1|Tile7,1,30,80,750,0,0,0,1,1,1|Tile8,0,30,80,850,0,0,0,1,1,1|Tile9,1,30,80,950,0,0,0,1,1,1|Tile10,0,30,100,1150,0,0,0,1,1,1|Tile11,1,30,100,1250,0,0,0,1,1,1|Tile12,0,-30,100,1475,0,0,0,1,1,1|Tile13,1,40,100,1675,0,0,0,1,1,1|AmiyaBar,2,40,100,1750,0,0,0,1,1,1|AmiyaBar,2,40,100,1800,0,0,0,1,1,1|Tile16,0,40,100,1875,0,0,0,1,1,1|Tile17,1,-30,10,300,0,0,0,1,1,1|Tile18,0,-30,10,400,0,0,0,1,1,1|Tile19,1,-30,10,575,0,0,0,1,1,1|Tile20,0,-30,10,675,0,0,0,1,1,1|Tile21,1,-80,20,775,0,0,-0.2,1,1,1|Tile22,0,-80,20,875,0,0,-0.2,1,1,1|Tile23,1,-80,20,975,0,0,-0.2,1,1,1|Tile24,0,-80,20,1150,0,0,-0.2,1,1,1|Tile25,1,-70,40,1250,0,0,-0.2,1,1,1|Tile26,0,-60,60,1350,0,0,-0.2,1,1,1|Tile28,1,-10,25,1450,0,0,0,1,1,1|Tile29,0,-10,25,1550,0,0,0,1,1,1|Tile30,1,-10,25,1650,0,0,0,1,1,1|AmiyaBar,2,-10,25,1725,0,0,0,1,1,1|AmiyaBar,2,-10,25,1775,0,0,0,1,1,1|Tile33,0,-10,25,1850,0,0,0,1,1,1|Tile34,1,30,30,2100,0,0,0.1,2,1,2|Tile35,0,30,30,2300,0,0,0.1,2,1,2|Tile36,1,-40,30,2500,0,0,-0.30000000000000004,1.5,1,1.5|Tile37,0,-40,30,2725,0,0,-0.30000000000000004,1.5,1,1.5|Tile38,1,50,30,2975,0,0,0.2,1.5,1,1.5|Tile39,0,50,30,3125,0,0,0.2,1.5,1,1.5|Tile40,1,-30,20,3325,0,0,-0.30000000000000004,1,1,1|Tile41,0,-50,35,3425,0,0,-0.30000000000000004,1,1,1|Tile42,1,-70,50,3525,0,0,-0.30000000000000004,1,1,1|Tile43,0,-70,50,3625,0,0,-0.30000000000000004,1,1,1|Tile44,1,-40,30,3725,0,0,-0.30000000000000004,1,1,1|Tile45,0,-10,15,3825,0,0,-0.1,1,1,1|Tile46,1,10,15,3925,0,0,0,1,1,1|Tile47,0,10,15,4025,0,0,0,1,1,1|Player,2,0,112,6375,0,0,0,1,1,1|AmiyaBar48,1,10,15,4100,0,0,0,1,1,1|AmiyaBar49,0,10,15,4150,0,0,0,1,1,1|Tile50,1,10,15,4225,0,0,0,1,1,1|Tile51,0,10,25,4325,-0.1,0,0,1,1,1|Tile52,1,10,25,4425,0.1,0,0,1,1,1|Tile53,0,10,25,4525,-0.1,0,0,1,1,1|Tile54,1,10,25,4625,0.1,0,0,1,1,1|Tile55,0,10,25,4725,-0.1,0,0,1,1,1|Tile56,1,10,35,4825,0,0,0,1,1,1|Tile57,0,10,35,4925,0,0,0,1,1,1|Tile58,1,10,35,5125,0,0,0,1.75,1,1.75|Tile59,0,10,55,5300,0,0,0,1.75,1,1.75|Tile60,1,0,75,5475,0,0,-0.30000000000000004,1.75,1,1.75|Tile61,0,0,75,5700,0,0,0,1.75,1,1.75|Tile62,1,0,75,5950,0,0,0.30000000000000004,1.75,1,1.75|Tile63,0,0,75,6225,0,0,0,1.75,1,1.75|Goal,1,0,90,6375,0,0,0,1,1,1"
mapData["1"]["3"] = "1~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,125,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,2,1,2|Tile3,1,100,50,300,0,0,0.1,2,1,2|Tile4,0,-100,50,300,0,0,-0.1,2,1,2|Tile5,1,-100,50,500,0,0,-0.1,2,1,2|Tile6,0,100,50,500,0,0,0.1,2,1,2|Tile7,1,0,30,500,-0.1,0,0,2,1,2|Ball8,0,106,74,250,-0.054739780724048615,-0.04013173282146454,0.40925562381744385,2,2,2|Ball9,1,106,74,275,-0.054745543748140335,-0.0401325598359108,0.40925437211990356,2,2,2|Ball10,0,106,74,300,-0.05474013835191727,-0.040131352841854095,0.4092544913291931,2,2,2|Ball11,1,106,74,325,-0.05473880469799042,-0.04013102501630783,0.4092543423175812,2,2,2|Ball12,0,106,74,350,-0.05473979562520981,-0.04013115167617798,0.40925413370132446,2,2,2|Ball13,1,106,74,375,-0.054740551859140396,-0.04013202711939812,0.40925535559654236,2,2,2|Ball14,0,106,74,399,-0.06581246107816696,-0.04020026698708534,0.4143519699573517,2,2,2|Ball15,1,106,74,425,-0.05473834276199341,-0.04013090953230858,0.4092554748058319,2,2,2|Ball16,0,106,74,450,-0.05474001169204712,-0.04013172909617424,0.4092555046081543,2,2,2|Ball17,1,106,74,475,-0.054745543748140335,-0.0401325598359108,0.40925437211990356,2,2,2|Ball18,0,106,74,500,-0.05474013835191727,-0.040131352841854095,0.4092544913291931,2,2,2|Ball19,1,106,74,525,-0.05473914369940758,-0.04013112187385559,0.4092548191547394,2,2,2|Ball20,0,106,74,550,-0.05473979562520981,-0.04013115167617798,0.40925413370132446,2,2,2|Ball21,1,106,74,575,-0.054740600287914276,-0.040131986141204834,0.40925535559654236,2,2,2|Ball22,0,30,106,544,-0.4285458028316498,1.558113069677347e-7,-0.0000018307022173758014,2,2,2|Ball23,1,-30,106,544,-0.42854562401771545,7.251338018932074e-8,2.4633547468511097e-7,2,2,2|Ball24,0,-106,74,575,-0.054740600287914276,0.040131986141204834,-0.40925535559654236,2,2,2|Ball25,1,-106,74,550,-0.05473979562520981,0.04013115167617798,-0.40925413370132446,2,2,2|Ball26,0,-106,74,525,-0.05473914369940758,0.04013112187385559,-0.4092548191547394,2,2,2|Ball27,1,-106,74,500,-0.05474013835191727,0.040131352841854095,-0.4092544913291931,2,2,2|Ball28,0,-106,74,475,-0.054745543748140335,0.0401325598359108,-0.40925437211990356,2,2,2|Ball29,1,-106,74,450,-0.05474001169204712,0.04013172909617424,-0.4092555046081543,2,2,2|Ball30,0,-106,74,425,-0.05473834276199341,0.04013090953230858,-0.4092554748058319,2,2,2|Ball31,1,-106,74,399,-0.06602411717176437,0.03982996568083763,-0.4135934114456177,2,2,2|Ball32,0,-106,74,375,-0.054740551859140396,0.04013202711939812,-0.40925535559654236,2,2,2|Ball33,1,-106,74,350,-0.05473979562520981,0.04013115167617798,-0.40925413370132446,2,2,2|Ball34,0,-106,74,325,-0.05473880469799042,0.04013102501630783,-0.4092543423175812,2,2,2|Ball35,1,-106,74,300,-0.05474013835191727,0.040131352841854095,-0.4092544913291931,2,2,2|Ball36,0,-106,74,275,-0.054745543748140335,0.0401325598359108,-0.40925437211990356,2,2,2|Ball37,1,-106,74,250,-0.054739780724048615,0.04013173282146454,-0.40925562381744385,2,2,2|Tile38,0,0,30,725,0,0,0,1,1,1|Tile39,1,0,20,875,0,0,0,1,1,1|Tile40,0,0,5,1025,0,0,0,1,1,1|Tile41,1,0,5,1125,0,0,0,1,1,1|Tile42,0,0,5,1275,0,0,0,2,1,2|Tile43,1,-100,15,1275,0,0,-0.1,2,1,2|Tile44,0,0,5,1475,0,0,0,2,1,2|Tile45,1,-100,15,1475,0,0,-0.1,2,1,2|Tile46,0,0,25,1675,0,0,0,2,1,2|Tile47,1,100,25,1475,0,0,0.2,2,1,2|Tile48,0,0,45,1875,-0.1,0,0,2,1,2|Tile49,1,100,25,1275,0,0,0.2,2,1,2|Ball50,0,40,21,1225,0,0,-4.257489916170698e-9,1,1,1|Ball51,1,20,21,1225,0.0000010902772373810876,2.019097996436292e-12,-0.0000019517276541591855,1,1,1|Ball52,0,0,21,1225,0.0000075941738941764925,6.243201485303662e-13,2.012280759799978e-7,1,1,1|Ball53,1,-20,21,1225,-0.00000670759754939354,1.3594072428065734e-14,-4.447008983277101e-9,1,1,1|Ball54,0,-40,21,1225,-0.000002272605343023315,7.37179987010359e-17,3.3584444253387247e-11,1,1,1|Ball55,1,-40,21,1250,8.103223763100686e-7,4.535797905075734e-16,-1.1297338620153141e-9,1,1,1|Ball56,0,-20,21,1250,-0.000004526142220129259,5.648086165432886e-13,-0.000004295767666917527,1,1,1|Ball57,1,0,21,1250,0,0,0,1,1,1|Ball58,0,20,21,1250,-0.00000481210918223951,-1.9544879603650145e-11,-0.000003986857791460352,1,1,1|Ball59,1,40,21,1250,-0.000004766693109559128,-8.78776218460331e-12,-0.0000031994859455153346,1,1,1|Ball60,0,40,21,1275,0,0,0,1,1,1|Ball61,1,20,21,1275,-0.0000025912415821949253,-1.0947322909293788e-11,-0.00000522623076903983,1,1,1|Ball62,0,0,21,1275,0.0000148066392284818,-3.022504468930265e-10,0.00006073272743378766,1,1,1|Ball63,1,-20,21,1275,-0.000007517168342019431,-1.8792196965211616e-11,-0.0000024742864752624882,1,1,1|Ball64,0,-40,21,1275,-0.00000685420491208788,6.158198950778626e-13,0.0000037613567656080704,1,1,1|Ball65,1,-40,21,1300,-0.000007619022198923631,-1.6502404098176632e-14,-8.035632603764498e-9,1,1,1|Ball66,0,-20,21,1300,-2.227527033937804e-7,-2.2486620204764662e-11,-0.000003431738832659903,1,1,1|Ball67,1,0,21,1300,-3.8088666087787715e-7,1.3262981858608303e-11,-0.00000126832321711845,1,1,1|Ball68,0,20,21,1300,-0.000009635781680117361,2.458971394558862e-12,-0.000001055264533533773,1,1,1|Ball69,1,40,21,1300,0.000006630168627452804,-7.776567475907548e-14,1.2897948487022859e-8,1,1,1|Ball70,0,40,21,1325,-0.000008690411050338298,-3.7917938103607107e-16,1.2835880802697375e-8,1,1,1|Ball71,1,20,21,1325,-0.0000031198389933706494,7.310353711265094e-12,-0.0000036762844501936343,1,1,1|Ball72,0,0,21,1325,0.0000018469925180397695,2.1874509148478438e-11,-0.000004021455424663145,1,1,1|Ball73,1,-20,21,1325,-0.000007973632818902843,7.454642805826417e-12,-0.0000017295778889092617,1,1,1|Ball74,0,-40,21,1325,-0.00000522227037436096,8.315910460243714e-12,0.000006637596015934832,1,1,1|Ball75,1,-40,21,1350,-0.00000778171124693472,-4.771546656054393e-15,-2.810964261357185e-8,1,1,1|Ball76,0,-20,21,1350,-2.5576312623343256e-7,-1.6967592261774023e-11,-0.000005419600256573176,1,1,1|Ball77,1,0,21,1350,0.0000027135010896017775,-1.1753987540219502e-12,-0.0000010867453283935902,1,1,1|Ball78,0,20,21,1350,0.000008949681614467409,-9.853838231488332e-12,0.0000011372284234312247,1,1,1|Ball79,1,40,21,1350,0.000005765185505879344,1.8478427121770835e-11,0.000006481118361989502,1,1,1|Ball80,0,40,21,1374,-0.10011490434408188,-0.00000907939738681307,0.00003075483982684091,1,1,1|Ball81,1,20,21,1374,-0.10012030601501465,0.000006154800303193042,-0.00002764266355370637,1,1,1|Ball82,0,0,21,1374,-0.10011491179466248,1.0754349943908892e-7,-0.0000012544037417683285,1,1,1|Ball83,1,-20,21,1376,0.10018140822649002,0.000006660941380687291,0.00004131221430725418,1,1,1|Ball84,0,-40,21,1376,0.1001824215054512,2.7092906407233386e-7,0.000002547691565268906,1,1,1|Ball85,1,-40,21,1400,-0.000007395035936497152,2.898912013216126e-12,-0.000001103469003282953,1,1,1|Ball86,0,-20,21,1400,0.000004696270480053499,2.1304950859057925e-11,-0.000004640676706912927,1,1,1|Ball87,1,0,21,1400,0.0000034273577966814628,-3.4492981387801436e-12,0.000002625974047987256,1,1,1|Ball88,0,20,21,1400,0.000006908239811309613,-1.7655755329970546e-11,-0.000003327566446387209,1,1,1|Ball89,1,40,21,1400,0.000007288658252946334,-5.629189822609071e-12,-0.0000021158218714845134,1,1,1|Ball90,0,40,21,1425,0,0,-4.257489916170698e-9,1,1,1|Ball91,1,20,21,1425,0.0000010902772373810876,2.019097996436292e-12,-0.0000019517276541591855,1,1,1|Ball92,0,0,21,1425,0.0000075941738941764925,6.243201485303662e-13,2.012280759799978e-7,1,1,1|Ball93,1,-20,21,1425,-0.00000670759754939354,1.3594072428065734e-14,-4.447008983277101e-9,1,1,1|Ball94,0,-40,21,1425,-0.000002272605343023315,7.37179987010359e-17,3.3584444253387247e-11,1,1,1|Ball95,1,-40,21,1450,8.103223763100686e-7,4.535797905075734e-16,-1.1297338620153141e-9,1,1,1|Ball96,0,-20,21,1450,-0.000004526142220129259,5.648086165432886e-13,-0.000004295767666917527,1,1,1|Ball97,1,0,21,1450,0,0,0,1,1,1|Ball98,0,20,21,1450,-0.00000481210918223951,-1.9544879603650145e-11,-0.000003986857791460352,1,1,1|Ball99,1,40,21,1450,-0.000004766693109559128,-8.78776218460331e-12,-0.0000031994859455153346,1,1,1|Ball100,0,40,21,1475,0,0,0,1,1,1|Ball101,1,20,21,1475,-0.0000025912415821949253,-1.0947322909293788e-11,-0.00000522623076903983,1,1,1|Ball102,0,0,21,1475,0.0000148066392284818,-3.022504468930265e-10,0.00006073272743378766,1,1,1|Ball103,1,-20,21,1475,-0.000007517168342019431,-1.8792196965211616e-11,-0.0000024742864752624882,1,1,1|Ball104,0,-40,21,1475,-0.00000685420491208788,6.158198950778626e-13,0.0000037613567656080704,1,1,1|Ball105,1,-40,21,1500,-0.000007619022198923631,-1.6502404098176632e-14,-8.035632603764498e-9,1,1,1|Ball106,0,-20,21,1500,-2.227527033937804e-7,-2.2486620204764662e-11,-0.000003431738832659903,1,1,1|Ball107,1,0,21,1500,-3.8088666087787715e-7,1.3262981858608303e-11,-0.00000126832321711845,1,1,1|Ball108,0,20,21,1500,-0.000009635781680117361,2.458971394558862e-12,-0.000001055264533533773,1,1,1|Ball109,1,40,21,1500,0.000006630168627452804,-7.776567475907548e-14,1.2897948487022859e-8,1,1,1|Ball110,0,40,21,1525,-0.000008690411050338298,-3.7917938103607107e-16,1.2835880802697375e-8,1,1,1|Ball111,1,20,21,1525,-0.0000031198389933706494,7.310353711265094e-12,-0.0000036762844501936343,1,1,1|Ball112,0,0,21,1525,0.0000018469925180397695,2.1874509148478438e-11,-0.000004021455424663145,1,1,1|Ball113,1,-20,21,1525,-0.000007973632818902843,7.454642805826417e-12,-0.0000017295778889092617,1,1,1|Ball114,0,-40,21,1525,-0.00000522227037436096,8.315910460243714e-12,0.000006637596015934832,1,1,1|Ball115,1,-40,21,1550,-0.00000778171124693472,-4.771546656054393e-15,-2.810964261357185e-8,1,1,1|Ball116,0,-20,21,1550,-2.5576312623343256e-7,-1.6967592261774023e-11,-0.000005419600256573176,1,1,1|Ball117,1,0,21,1550,0.0000027135010896017775,-1.1753987540219502e-12,-0.0000010867453283935902,1,1,1|Ball118,0,20,21,1550,0.000008949681614467409,-9.853838231488332e-12,0.0000011372284234312247,1,1,1|Ball119,1,40,21,1550,0.000005765185505879344,1.8478427121770835e-11,0.000006481118361989502,1,1,1|Ball120,0,0,79,1931,-0.37400975823402405,1.585103959200751e-8,-1.0775659120554337e-7,2,2,2|Ball121,1,-105,56,1300,0.0000012415392802722636,-0.0000010225413689113338,-0.402375727891922,2,2,2|Ball122,0,-105,56,1475,-0.0000015002833606558852,-1.6557176252263162e-7,-0.40237507224082947,2,2,2|Ball123,1,78,40,1250,6.037095658939506e-7,5.863777801096148e-7,0.40952810645103455,2,2,2|Ball124,0,78,40,1400,2.522348268030328e-7,1.0385170412519074e-7,0.40952640771865845,2,2,2|Tile125,1,0,35,2225,0,0,0,1,1,1|Tile126,0,0,25,2325,0.1,0,0,1,1,1|Tile127,1,0,25,2425,-0.1,0,0,1,1,1|Ball128,0,-10,44,2373,0.019451003521680832,-0.00002330748066015076,-0.0011814795434474945,1,1,1|Ball129,1,10,44,2373,-0.019432343542575836,-0.000024439967091893777,0.0012602292699739337,1,1,1|Tile130,0,0,35,2525,0,0,0,1,1,1|Tile131,1,0,50,2625,-0.2,0,0,1,1,1|Tile132,0,0,35,2750,0,0,0,2,1,2|Tile133,1,0,35,2950,0,0,0,2,1,2|Ball134,0,40,70,2700,0,0,0,2,2,2|Ball135,1,-40,70,2700,0,0,0,2,2,2|Ball136,0,40,70,2750,0,0,0,2,2,2|Ball137,1,-40,70,2750,0,0,0,2,2,2|Ball138,0,40,70,2800,0,0,0,2,2,2|Ball139,1,-40,70,2800,0,0,0,2,2,2|Ball140,0,40,70,2850,0,0,0,2,2,2|Ball141,1,-40,70,2850,0,0,0,2,2,2|Ball142,0,40,70,2900,0,0,0,2,2,2|Ball143,1,-40,70,2900,0,0,0,2,2,2|Ball144,0,40,70,2950,0,0,0,2,2,2|Ball145,1,-40,70,2950,0,0,0,2,2,2|Ball146,0,40,70,3000,0,0,0,2,2,2|Ball147,1,-40,70,3000,0,0,0,2,2,2|Player,2,-7,83,3225,0,0,0,1,1,1|AmiyaBar149,0,0,65,2700,0,0,0,1,1,1|AmiyaBar150,1,0,35,3075,0,0,0,1,1,1|Ball151,0,10,55,3000,0,0,0,1,1,1|Ball152,1,-10,55,3000,0,0,0,1,1,1|Ball153,0,-10,55,2975,0,0,0,1,1,1|Ball154,1,10,55,2975,0,0,0,1,1,1|Ball155,0,10,55,2950,0,0,0,1,1,1|Ball156,1,-10,55,2950,0,0,0,1,1,1|Ball157,0,-10,55,2900,0,0,0,1,1,1|Ball158,1,10,55,2900,0,0,0,1,1,1|Ball159,0,10,55,2875,0,0,0,1,1,1|Ball160,1,-10,55,2875,0,0,0,1,1,1|Ball161,0,-10,55,2825,0,0,0,1,1,1|Ball162,1,10,55,2825,0,0,0,1,1,1|Ball163,0,10,55,2800,0,0,0,1,1,1|Ball164,1,-10,55,2800,0,0,0,1,1,1|Tile165,0,0,35,3150,0,0,0,1,1,1|Tile166,1,0,35,3250,0,0,0,1,1,1|Tile167,0,0,55,3350,0,0,0,1,1,1|Tile168,1,0,75,3450,0,0,0,1,1,1|Tile169,0,0,95,3550,0,0,0,1,1,1|Tile170,1,0,95,3650,0,0,0,1,1,1|Tile171,0,0,95,3750,0,0,0,1,1,1|Goal,1,0,110,3825,0,0,0,1,1,1|Ball173,0,-10,120,3775,0,0,0,1,1,1|Ball174,1,10,120,3775,0,0,0,1,1,1|Ball175,0,10,120,3725,0,0,0,1,1,1|Ball176,1,-10,120,3725,0,0,0,1,1,1|Ball177,0,-10,120,3675,0,0,0,1,1,1|Ball178,1,10,120,3675,0,0,0,1,1,1|Ball179,0,10,120,3625,0,0,0,1,1,1|Ball180,1,-10,120,3625,0,0,0,1,1,1|Ball181,0,-10,120,3575,0,0,0,1,1,1|Ball182,1,10,120,3575,0,0,0,1,1,1|Ball183,0,10,120,3525,0,0,0,1,1,1|Ball184,1,-10,120,3525,0,0,0,1,1,1|Ball185,0,-10,95,3475,0,0,0,1,1,1|Ball186,1,10,95,3475,0,0,0,1,1,1|Ball187,0,10,95,3425,0,0,0,1,1,1|Ball188,1,-10,95,3425,0,0,0,1,1,1|Ball189,0,-10,75,3375,0,0,0,1,1,1|Ball190,1,10,75,3375,0,0,0,1,1,1|Ball191,0,10,75,3325,0,0,0,1,1,1|Ball192,1,-10,75,3325,0,0,0,1,1,1|Ball193,0,-10,65,3275,0,0,0,1,1,1|Ball194,1,10,65,3275,0,0,0,1,1,1|Ball195,0,10,65,3225,0,0,0,1,1,1|Ball196,1,-10,65,3225,0,0,0,1,1,1"
mapData["1"]["4"] = "1~Tile0,0,0,10,0,0,0,0,2,1,2|Tile1,1,0,10,200,0,0,0,2,1,2|Tile2,0,0,10,425,0,0,0,2,1,2|Tile3,1,0,10,650,0,0,0,1.5,1,1.5|Tile4,0,0,10,800,0,0,0,1.5,1,1.5|Tile5,1,0,10,1025,0,0,0,1,1,1|Tile6,0,0,10,1125,0,0,0,1,1,1|Tile7,1,0,10,1375,0,0,0,1,1,1|Tile8,0,0,10,1475,0,0,0,1,1,1|Tile9,1,-30,10,1625,0,0,0,1,1,1|Tile10,0,-30,10,1775,0,0,0,1,1,1|Tile11,1,20,10,1925,0,0,0,1,1,1|Tile12,0,20,10,2125,0,0,0,1,1,1|Tile13,1,20,10,2225,0,0,0,1,1,1|Tile14,0,-30,10,2375,0,0,0,1,1,1|Tile15,1,70,10,2375,0,0,0,1,1,1|Tile16,0,70,10,2475,0,0,0,1,1,1|Tile17,1,-30,10,2575,0,0,0,1,1,1|Tile18,0,70,10,2675,0,0,0,1,1,1|Tile19,1,70,10,2775,0,0,0,1,1,1|Tile20,0,-50,10,2775,0,0,0,1,1,1|Tile21,1,-50,10,2875,0,0,0,1,1,1|Tile22,0,-50,10,2975,0,0,0,1,1,1|Tile23,1,0,10,2975,0,0,0,1,1,1|Tile24,0,0,10,3075,0,0,0,1,1,1|Tile25,1,0,10,3275,0,0,0,1,1,1|AmiyaBar,2,0,10,3350,0,0,0,1,1,1|Tile27,1,0,10,3425,0,0,0,1,1,1|Tile28,0,0,10,3525,0,0,0,1,1,1|Tile29,1,0,10,3675,0,0,0,1,1,1|Tile30,0,0,10,3925,0,0,0,1,1,1|Tile31,1,0,10,4175,0,0,0,1,1,1|Tile32,0,0,30,4275,0,0,0,1,1,1|Tile33,1,0,30,4375,0,0,0,1,1,1|Tile34,0,0,25,4550,0,0,0,1,1,1|Tile35,1,0,25,4650,0,0,0,1,1,1|Tile36,0,0,25,4750,0,0,0,1,1,1|Goal,2,0,85,4825,0,0,0,1,1,1|Player,2,-79,30,2522,0,0,0,1,1,1|Tile39,0,40,50,1600,0,0,0,1,1,1|AmiyaBar40,1,40,50,1675,0,0,0,1,1,1|Tile41,0,40,50,1750,0,0,0,1,1,1|AmiyaBar42,1,-80,10,2600,0,0,0,1,1,1|Tile43,0,-80,10,2525,0,0,0,1,1,1"
mapData["1"]["5"] = "1~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,100,0,0,0,1,1,1|Tile2,0,30,10,200,0,0,0.1,1,1,1|Tile3,1,40,10,300,0,0,0.2,1,1,1|Tile4,0,50,15,400,0,0,0.30000000000000004,1,1,1|Tile5,1,-30,15,525,0,0,-0.2,1,1,1|Tile6,0,-30,15,625,0,0,-0.2,1,1,1|Tile7,1,-30,15,725,0,0,-0.2,1,1,1|Tile8,0,50,15,825,0,0,0.2,1,1,1|Tile9,1,50,15,925,0,0,0.2,1,1,1|Tile10,0,50,15,1025,0,0,0.2,1,1,1|Tile11,1,-30,30,1075,0,0,-0.1,1,1,1|Tile12,0,-30,30,1175,0,0,-0.1,1,1,1|Tile13,1,50,10,1275,0,0,0.2,1,1,1|Tile14,0,50,10,1375,0,0,0.2,1,1,1|Tile15,1,-40,10,1475,0,0,-0.2,1,1,1|Tile16,0,-40,10,1575,0,0,-0.2,1,1,1|Tile17,1,-40,10,1750,0,0,-0.2,1,1,1|Tile18,0,-40,10,1850,0,0,-0.2,1,1,1|Tile19,1,-40,10,2100,0,0,-0.2,1,1,1|Tile20,0,-40,10,2200,0,0,-0.2,1,1,1|Tile21,1,30,10,2325,0,0,0.1,1,1,1|Tile22,0,30,10,2425,0,0,0.1,1,1,1|Player,2,-36,63,4367,0,0,0,1,1,1|Tile24,1,30,0,2600,0,0,0,2,1,2|Tile25,0,-70,0,2600,0,0,0,2,1,2|AmiyaBar26,1,-70,0,2750,0,0,0,2,1,2|AmiyaBar27,0,30,0,2750,0,0,0,2,1,2|Tile28,1,-20,0,2900,0,0,0,2,1,2|Tile29,0,-20,0,3050,0,0,0,1,1,1|Tile30,1,0,0,3225,0,0,0.1,1,1,1|Tile31,0,-50,0,3450,0,0,-0.1,1,1,1|Tile32,1,-50,0,3675,0,0,-0.30000000000000004,1,1,1|Tile33,0,-70,0,3875,0,0,-0.5,1,1,1|Tile34,1,0,5,4000,0,0,0.5,1,1,1|Tile35,0,-40,-5,4175,0,0,0,1,1,1|Tile36,1,-40,-5,4275,0,0,0,1,1,1|Goal,0,-40,45,4375,0,0,0,1,1,1"
mapData["1"]["6"] = "1~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,125,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,2,1,2|Tile3,1,100,50,300,0,0,0.1,2,1,2|Tile4,0,-100,50,300,0,0,-0.1,2,1,2|Tile5,1,-100,50,500,0,0,-0.1,2,1,2|Tile6,0,100,50,500,0,0,0.1,2,1,2|Tile7,1,0,30,500,-0.1,0,0,2,1,2|Ball8,0,130,125,250,-0.09805848449468613,0,0,2,2,2|Ball9,1,130,125,275,-0.09805848449468613,0,0,2,2,2|Ball10,0,130,125,300,-0.09805848449468613,0,0,2,2,2|Ball11,1,130,125,325,-0.09805848449468613,0,0,2,2,2|Ball12,0,130,125,350,-0.09805848449468613,0,0,2,2,2|Ball13,1,130,125,375,-0.09805848449468613,0,0,2,2,2|Ball14,0,130,125,400,-0.09805848449468613,0,0,2,2,2|Ball15,1,130,125,425,-0.09805848449468613,0,0,2,2,2|Ball16,0,130,125,450,-0.09805848449468613,0,0,2,2,2|Ball17,1,130,125,475,-0.09805848449468613,0,0,2,2,2|Ball18,0,130,125,500,-0.09805848449468613,0,0,2,2,2|Ball19,1,130,125,525,-0.09805848449468613,0,0,2,2,2|Ball20,0,130,125,550,-0.09805848449468613,0,0,2,2,2|Ball21,1,130,125,575,-0.09805848449468613,0,0,2,2,2|Ball22,0,30,125,575,-0.09805848449468613,0,0,2,2,2|Ball23,1,-30,125,575,-0.09805848449468613,0,0,2,2,2|Ball24,0,-130,125,575,-0.09805848449468613,0,0,2,2,2|Ball25,1,-130,125,550,-0.09805848449468613,0,0,2,2,2|Ball26,0,-130,125,525,-0.09805848449468613,0,0,2,2,2|Ball27,1,-130,125,500,-0.09805848449468613,0,0,2,2,2|Ball28,0,-130,125,475,-0.09805848449468613,0,0,2,2,2|Ball29,1,-130,125,450,-0.09805848449468613,0,0,2,2,2|Ball30,0,-130,125,425,-0.09805848449468613,0,0,2,2,2|Ball31,1,-130,125,400,-0.09805848449468613,0,0,2,2,2|Ball32,0,-130,125,375,-0.09805848449468613,0,0,2,2,2|Ball33,1,-130,125,350,-0.09805848449468613,0,0,2,2,2|Ball34,0,-130,125,325,-0.09805848449468613,0,0,2,2,2|Ball35,1,-130,125,300,-0.09805848449468613,0,0,2,2,2|Ball36,0,-130,125,275,-0.09805848449468613,0,0,2,2,2|Ball37,1,-130,125,250,-0.09805848449468613,0,0,2,2,2|Tile38,0,0,30,725,0,0,0,1,1,1|Tile39,1,0,20,875,0,0,0,1,1,1|Tile40,0,0,5,1025,0,0,0,1,1,1|Tile41,1,0,5,1125,0,0,0,1,1,1|Tile42,0,0,5,1275,0,0,0,2,1,2|Tile43,1,-100,15,1275,0,0,-0.1,2,1,2|Tile44,0,0,5,1475,0,0,0,2,1,2|Tile45,1,-100,15,1475,0,0,-0.1,2,1,2|Tile46,0,0,25,1675,0,0,0,2,1,2|Tile47,1,100,25,1475,0,0,0.2,2,1,2|Tile48,0,0,45,1875,-0.1,0,0,2,1,2|Tile49,1,100,25,1275,0,0,0.2,2,1,2|Ball50,0,40,25,1225,0,0,0,1,1,1|Ball51,1,20,25,1225,0,0,0,1,1,1|Ball52,0,0,25,1225,0,0,0,1,1,1|Ball53,1,-20,25,1225,0,0,0,1,1,1|Ball54,0,-40,25,1225,0,0,0,1,1,1|Ball55,1,-40,25,1250,0,0,0,1,1,1|Ball56,0,-20,25,1250,0,0,0,1,1,1|Ball57,1,0,25,1250,0,0,0,1,1,1|Ball58,0,20,25,1250,0,0,0,1,1,1|Ball59,1,40,25,1250,0,0,0,1,1,1|Ball60,0,40,25,1275,0,0,0,1,1,1|Ball61,1,20,25,1275,0,0,0,1,1,1|Ball62,0,0,25,1275,0,0,0,1,1,1|Ball63,1,-20,25,1275,0,0,0,1,1,1|Ball64,0,-40,25,1275,0,0,0,1,1,1|Ball65,1,-40,25,1300,0,0,0,1,1,1|Ball66,0,-20,25,1300,0,0,0,1,1,1|Ball67,1,0,25,1300,0,0,0,1,1,1|Ball68,0,20,25,1300,0,0,0,1,1,1|Ball69,1,40,25,1300,0,0,0,1,1,1|Ball70,0,40,25,1325,0,0,0,1,1,1|Ball71,1,20,25,1325,0,0,0,1,1,1|Ball72,0,0,25,1325,0,0,0,1,1,1|Ball73,1,-20,25,1325,0,0,0,1,1,1|Ball74,0,-40,25,1325,0,0,0,1,1,1|Ball75,1,-40,25,1350,0,0,0,1,1,1|Ball76,0,-20,25,1350,0,0,0,1,1,1|Ball77,1,0,25,1350,0,0,0,1,1,1|Ball78,0,20,25,1350,0,0,0,1,1,1|Ball79,1,40,25,1350,0,0,0,1,1,1|Ball80,0,40,25,1375,0,0,0,1,1,1|Ball81,1,20,25,1375,0,0,0,1,1,1|Ball82,0,0,25,1375,0,0,0,1,1,1|Ball83,1,-20,25,1375,0,0,0,1,1,1|Ball84,0,-40,25,1375,0,0,0,1,1,1|Ball85,1,-40,25,1400,0,0,0,1,1,1|Ball86,0,-20,25,1400,0,0,0,1,1,1|Ball87,1,0,25,1400,0,0,0,1,1,1|Ball88,0,20,25,1400,0,0,0,1,1,1|Ball89,1,40,25,1400,0,0,0,1,1,1|Ball90,0,40,25,1425,0,0,0,1,1,1|Ball91,1,20,25,1425,0,0,0,1,1,1|Ball92,0,0,25,1425,0,0,0,1,1,1|Ball93,1,-20,25,1425,0,0,0,1,1,1|Ball94,0,-40,25,1425,0,0,0,1,1,1|Ball95,1,-40,25,1450,0,0,0,1,1,1|Ball96,0,-20,25,1450,0,0,0,1,1,1|Ball97,1,0,25,1450,0,0,0,1,1,1|Ball98,0,20,25,1450,0,0,0,1,1,1|Ball99,1,40,25,1450,0,0,0,1,1,1|Ball100,0,40,25,1475,0,0,0,1,1,1|Ball101,1,20,25,1475,0,0,0,1,1,1|Ball102,0,0,25,1475,0,0,0,1,1,1|Ball103,1,-20,25,1475,0,0,0,1,1,1|Ball104,0,-40,25,1475,0,0,0,1,1,1|Ball105,1,-40,25,1500,0,0,0,1,1,1|Ball106,0,-20,25,1500,0,0,0,1,1,1|Ball107,1,0,25,1500,0,0,0,1,1,1|Ball108,0,20,25,1500,0,0,0,1,1,1|Ball109,1,40,25,1500,0,0,0,1,1,1|Ball110,0,40,25,1525,0,0,0,1,1,1|Ball111,1,20,25,1525,0,0,0,1,1,1|Ball112,0,0,25,1525,0,0,0,1,1,1|Ball113,1,-20,25,1525,0,0,0,1,1,1|Ball114,0,-40,25,1525,0,0,0,1,1,1|Ball115,1,-40,25,1550,0,0,0,1,1,1|Ball116,0,-20,25,1550,0,0,0,1,1,1|Ball117,1,0,25,1550,0,0,0,1,1,1|Ball118,0,20,25,1550,0,0,0,1,1,1|Ball119,1,40,25,1550,0,0,0,1,1,1|Ball120,0,0,160,1950,0,0,0,2,2,2|Ball122,1,-130,100,1300,0,0,0,2,2,2|Ball123,0,-130,100,1475,0,0,0,2,2,2|Ball124,1,130,100,1250,0,0,0,2,2,2|Ball125,0,130,100,1400,0,0,0,2,2,2|Player,2,-3,57,2729,0,0,0,1,1,1|Tile126,1,0,35,2225,0,0,0,1,1,1|Tile127,0,0,25,2325,0.1,0,0,1,1,1|Tile128,1,0,25,2425,-0.1,0,0,1,1,1|Ball129,0,-10,35,2375,0,0,0,1,1,1|Ball130,1,10,35,2375,0,0,0,1,1,1|Goal,0,0,35,2725,0,0,0,1,1,1"
mapData["1"]["7"] = "1~Boost0,0,0,10,0,0,0,0,1,1,1|Boost1,1,0,10,100,0,0,0,1,1,1|Boost2,0,0,10,200,0,0,0,1,1,1|Boost3,1,0,20,300,-0.1,0,0,1,1,1|Tile4,0,0,30,625,0,0,0,1,1,1|Tile5,1,0,30,725,0,0,0,1,1,1|Tile6,0,0,30,825,0,0,0,1,1,1|Tile7,1,0,20,925,0.1,0,0,1,1,1|Tile8,0,0,10,1025,0,0,0,1,1,1|AmiyaBar,2,0,10,1100,0,0,0,1,1,1|Tile11,0,0,10,1175,0,0,0,1,1,1|Death12,1,0,-20,1250,0,0,0,1,1,1|Tile13,0,0,10,1300,0,0,0,1,1,1|Tile14,1,0,10,1400,0,0,0,1,1,1|Boost15,0,0,10,1500,0,0,0,1,1,1|Tile16,1,0,10,1600,0,0,0,1,1,1|Death17,0,0,-10,1650,0,0,0,1,1,1|Tile18,1,0,10,1725,0,0,0,1,1,1|Tile19,0,0,10,1825,0,0,0,1,1,1|Boost20,1,0,10,1925,0,0,0,1,1,1|Boost21,0,0,10,2050,0,0,0,1,1,1|Boost22,1,0,10,2175,0,0,0,1,1,1|Death23,0,0,-15,2000,0,0,0,1,1,1|Death24,1,0,-10,2125,0,0,0,1,1,1|Player,2,-4,52,2305,0,0,0,1,1,1|Goal,0,0,30,2300,0,0,0,1,1,1"
mapData["1"]["8"] = "1~Player,2,-45,34,593,0,0,0,1,1,1|Tile1,0,0,10,0,0,0,0,1,1,1|Tile2,1,0,10,100,0,0,0.1,1,1,1|Tile3,0,0,10,200,0,0,0.2,1,1,1|Tile4,1,0,10,300,0,0,0.30000000000000004,1,1,1|Tile5,0,0,10,400,0,0,0.4,1,1,1|Tile6,1,0,15,500,0,0,0.5,1,1,1|Tile7,0,0,15,600,0,0,0.7000000000000001,1,1,1|Tile8,1,-50,10,0,0,0,0,1,1,1|Tile9,0,-50,10,100,0,0,-0.1,1,1,1|Tile10,1,-50,10,200,0,0,-0.2,1,1,1|Tile11,0,-50,10,300,0,0,-0.30000000000000004,1,1,1|Tile12,1,-50,10,400,0,0,-0.4,1,1,1|Tile13,0,-50,10,500,0,0,-0.5,1,1,1|Tile14,1,-50,15,600,0,0,-0.7000000000000001,1,1,1"

mapData["2"]["1"] = "2~Player,2,5,85,2347,0,0,0,1,1,1|Tile1,0,0,10,0,0,0,0,2,1,2|Tile2,1,0,10,200,0,0,0,2,1,2|Tile3,0,-30,10,400,0,0,0,2,1,2|Tile4,1,-70,10,600,0,0,0,2,1,2|Tile5,0,-70,10,800,0,0,0,2,1,2|Tile6,1,-30,10,975,0,0,0,1.5,1,1.5|Tile7,0,10,10,1125,0,0,0,1.5,1,1.5|Tile8,1,50,10,1275,0,0,0,1.5,1,1.5|Tile9,0,50,10,1425,0,0,0,1.5,1,1.5|Tile10,1,50,10,1550,0,0,0,1,1,1|Tile11,0,50,10,1650,0,0,0,1,1,1|Tile12,1,30,10,1750,0,0,0,1,1,1|Tile13,0,0,10,1850,0,0,0,1,1,1|Tile14,1,-20,10,1950,0,0,0,1,1,1|Tile15,0,-20,10,2050,0,0,0,1,1,1|Tile16,1,10,10,2200,0,0,0,2,1,2|Goal,0,10,65,2350,0,0,0,1,1,1"
mapData["2"]["2"] = "2~Tile0,0,0,10,0,0,0,0,2,1,2|Tile1,1,0,10,175,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,1,1,1|Tile3,1,0,10,400,0,0,0,1,1,1|Tile4,0,0,10,550,0,0,0,1,1,1|Tile5,1,0,10,650,0,0,0,1,1,1|Tile6,0,0,10,800,0,0,0,1,1,1|Tile7,1,0,10,900,0,0,0,1,1,1|Tile8,0,0,10,1075,0,0,0,1,1,1|Tile9,1,0,10,1175,0,0,0,1,1,1|Tile10,0,0,10,1350,0,0,0,1,1,1|Tile11,1,-50,10,1500,0,0,0,1,1,1|Tile12,0,-50,10,1600,0,0,0,1,1,1|Tile13,1,-50,10,1700,0,0,0,1,1,1|Tile14,0,0,10,1875,0,0,0,1,1,1|Tile15,1,0,10,1975,0,0,0,1,1,1|Tile16,0,0,30,2075,0,0,0,1,1,1|Tile17,1,0,30,2175,0,0,0,1,1,1|Tile18,0,0,15,2375,0,0,0,1,1,1|Tile19,1,0,15,2475,0,0,0,1,1,1|Tile20,0,-40,15,2625,0,0,0,1,1,1|Tile21,1,10,15,2775,0,0,0,1,1,1|Tile22,0,50,15,2925,0,0,0,1,1,1|Tile23,1,-10,15,3075,0,0,0,1,1,1|Goal,2,-10,70,3175,0,0,0,1,1,1|Player,2,78,35,2682,0,0,0,1,1,1|AmiyaBar26,1,0,10,1425,0,0,0,1,1,1|AmiyaBar27,0,0,10,1275,0,0,0,1,1,1|AmiyaBar28,1,80,15,2600,0,0,0,1,1,1|Tile29,0,80,15,2675,0,0,0,1,1,1"
mapData["2"]["3"] = "2~Player,2,4,85,2131,0,0,0,1,1,1|Tile1,0,0,10,0,0.1,0,0,1.75,1,1.75|Tile2,1,0,-10,175,0,0,0,1.75,1,1.75|Tile3,0,0,0,325,-0.1,0,0,1.25,1,1.25|Tile4,1,0,10,450,0,0,0,1.25,1,1.25|Tile5,0,0,10,625,0,0,0,1,1,1|Tile6,1,0,10,725,0,0,0,1,1,1|Tile7,0,20,10,825,0,0,0.1,1,1,1|Tile8,1,20,10,925,0,0,0.1,1,1,1|Tile9,0,20,10,1025,0,0,0.1,1,1,1|Tile10,1,20,10,1125,0,0,0.1,1,1,1|Tile11,0,20,10,1225,0,0,0.1,1,1,1|Tile12,1,-10,5,1350,0,0,0,1.25,1,1.25|Tile13,0,-30,5,1500,0,0,-0.30000000000000004,1.75,1,1.75|Tile14,1,-30,5,1675,0,0,-0.30000000000000004,1.75,1,1.75|Tile15,0,-30,5,1850,0,0,-0.30000000000000004,1.75,1,1.75|Tile16,1,0,-5,2025,0,0,0,1.75,1,1.75|Goal,0,0,65,2125,0,0,0,1,1,1"
mapData["2"]["4"] = "2~Tile0,0,0,10,0,0,0,0,2,1,2|Tile1,1,0,10,200,0,0,0,2,1,2|Tile2,0,0,10,425,0,0,0,2,1,2|Tile3,1,0,10,650,0,0,0,1.5,1,1.5|Tile4,0,0,10,800,0,0,0,1.5,1,1.5|Tile5,1,0,10,1025,0,0,0,1,1,1|Tile6,0,0,10,1125,0,0,0,1,1,1|Tile7,1,0,10,1375,0,0,0,1,1,1|Tile8,0,0,10,1475,0,0,0,1,1,1|Tile9,1,-30,10,1625,0,0,0,1,1,1|Tile10,0,-30,10,1775,0,0,0,1,1,1|Tile11,1,20,10,1925,0,0,0,1,1,1|Tile12,0,20,10,2125,0,0,0,1,1,1|Tile13,1,20,10,2225,0,0,0,1,1,1|Tile14,0,-30,10,2375,0,0,0,1,1,1|Tile15,1,70,10,2375,0,0,0,1,1,1|Tile16,0,70,10,2475,0,0,0,1,1,1|Tile17,1,-30,10,2575,0,0,0,1,1,1|Tile18,0,70,10,2675,0,0,0,1,1,1|Tile19,1,70,10,2775,0,0,0,1,1,1|Tile20,0,-50,10,2775,0,0,0,1,1,1|Tile21,1,-50,10,2875,0,0,0,1,1,1|Tile22,0,-50,10,2975,0,0,0,1,1,1|Tile23,1,0,10,2975,0,0,0,1,1,1|Tile24,0,0,10,3075,0,0,0,1,1,1|Tile25,1,0,10,3275,0,0,0,1,1,1|AmiyaBar,2,0,10,3350,0,0,0,1,1,1|Tile27,1,0,10,3425,0,0,0,1,1,1|Tile28,0,0,10,3525,0,0,0,1,1,1|Tile29,1,0,10,3675,0,0,0,1,1,1|Tile30,0,0,10,3925,0,0,0,1,1,1|Tile31,1,0,10,4175,0,0,0,1,1,1|Tile32,0,0,30,4275,0,0,0,1,1,1|Tile33,1,0,30,4375,0,0,0,1,1,1|Tile34,0,0,25,4550,0,0,0,1,1,1|Tile35,1,0,25,4650,0,0,0,1,1,1|Tile36,0,0,25,4750,0,0,0,1,1,1|Goal,2,0,85,4825,0,0,0,1,1,1|Player,2,-79,30,2522,0,0,0,1,1,1|Tile39,0,40,50,1600,0,0,0,1,1,1|AmiyaBar40,1,40,50,1675,0,0,0,1,1,1|Tile41,0,40,50,1750,0,0,0,1,1,1|AmiyaBar42,1,-80,10,2600,0,0,0,1,1,1|Tile43,0,-80,10,2525,0,0,0,1,1,1"
mapData["2"]["5"] = "2~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,100,0,0,0,1,1,1|Tile2,0,30,10,200,0,0,0.1,1,1,1|Tile3,1,40,10,300,0,0,0.2,1,1,1|Tile4,0,50,15,400,0,0,0.30000000000000004,1,1,1|Tile5,1,-30,15,525,0,0,-0.2,1,1,1|Tile6,0,-30,15,625,0,0,-0.2,1,1,1|Tile7,1,-30,15,725,0,0,-0.2,1,1,1|Tile8,0,50,15,825,0,0,0.2,1,1,1|Tile9,1,50,15,925,0,0,0.2,1,1,1|Tile10,0,50,15,1025,0,0,0.2,1,1,1|Tile11,1,-30,30,1075,0,0,-0.1,1,1,1|Tile12,0,-30,30,1175,0,0,-0.1,1,1,1|Tile13,1,50,10,1275,0,0,0.2,1,1,1|Tile14,0,50,10,1375,0,0,0.2,1,1,1|Tile15,1,-40,10,1475,0,0,-0.2,1,1,1|Tile16,0,-40,10,1575,0,0,-0.2,1,1,1|Tile17,1,-40,10,1750,0,0,-0.2,1,1,1|Tile18,0,-40,10,1850,0,0,-0.2,1,1,1|Tile19,1,-40,10,2100,0,0,-0.2,1,1,1|Tile20,0,-40,10,2200,0,0,-0.2,1,1,1|Tile21,1,30,10,2325,0,0,0.1,1,1,1|Tile22,0,30,10,2425,0,0,0.1,1,1,1|Player,2,-36,63,4367,0,0,0,1,1,1|Tile24,1,30,0,2600,0,0,0,2,1,2|Tile25,0,-70,0,2600,0,0,0,2,1,2|AmiyaBar26,1,-70,0,2750,0,0,0,2,1,2|AmiyaBar27,0,30,0,2750,0,0,0,2,1,2|Tile28,1,-20,0,2900,0,0,0,2,1,2|Tile29,0,-20,0,3050,0,0,0,1,1,1|Tile30,1,0,0,3225,0,0,0.1,1,1,1|Tile31,0,-50,0,3450,0,0,-0.1,1,1,1|Tile32,1,-50,0,3675,0,0,-0.30000000000000004,1,1,1|Tile33,0,-70,0,3875,0,0,-0.5,1,1,1|Tile34,1,0,5,4000,0,0,0.5,1,1,1|Tile35,0,-40,-5,4175,0,0,0,1,1,1|Tile36,1,-40,-5,4275,0,0,0,1,1,1|Goal,0,-40,45,4375,0,0,0,1,1,1"
mapData["2"]["6"] = "2~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,125,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,2,1,2|Tile3,1,100,50,300,0,0,0.1,2,1,2|Tile4,0,-100,50,300,0,0,-0.1,2,1,2|Tile5,1,-100,50,500,0,0,-0.1,2,1,2|Tile6,0,100,50,500,0,0,0.1,2,1,2|Tile7,1,0,30,500,-0.1,0,0,2,1,2|Ball8,0,130,125,250,-0.09805848449468613,0,0,2,2,2|Ball9,1,130,125,275,-0.09805848449468613,0,0,2,2,2|Ball10,0,130,125,300,-0.09805848449468613,0,0,2,2,2|Ball11,1,130,125,325,-0.09805848449468613,0,0,2,2,2|Ball12,0,130,125,350,-0.09805848449468613,0,0,2,2,2|Ball13,1,130,125,375,-0.09805848449468613,0,0,2,2,2|Ball14,0,130,125,400,-0.09805848449468613,0,0,2,2,2|Ball15,1,130,125,425,-0.09805848449468613,0,0,2,2,2|Ball16,0,130,125,450,-0.09805848449468613,0,0,2,2,2|Ball17,1,130,125,475,-0.09805848449468613,0,0,2,2,2|Ball18,0,130,125,500,-0.09805848449468613,0,0,2,2,2|Ball19,1,130,125,525,-0.09805848449468613,0,0,2,2,2|Ball20,0,130,125,550,-0.09805848449468613,0,0,2,2,2|Ball21,1,130,125,575,-0.09805848449468613,0,0,2,2,2|Ball22,0,30,125,575,-0.09805848449468613,0,0,2,2,2|Ball23,1,-30,125,575,-0.09805848449468613,0,0,2,2,2|Ball24,0,-130,125,575,-0.09805848449468613,0,0,2,2,2|Ball25,1,-130,125,550,-0.09805848449468613,0,0,2,2,2|Ball26,0,-130,125,525,-0.09805848449468613,0,0,2,2,2|Ball27,1,-130,125,500,-0.09805848449468613,0,0,2,2,2|Ball28,0,-130,125,475,-0.09805848449468613,0,0,2,2,2|Ball29,1,-130,125,450,-0.09805848449468613,0,0,2,2,2|Ball30,0,-130,125,425,-0.09805848449468613,0,0,2,2,2|Ball31,1,-130,125,400,-0.09805848449468613,0,0,2,2,2|Ball32,0,-130,125,375,-0.09805848449468613,0,0,2,2,2|Ball33,1,-130,125,350,-0.09805848449468613,0,0,2,2,2|Ball34,0,-130,125,325,-0.09805848449468613,0,0,2,2,2|Ball35,1,-130,125,300,-0.09805848449468613,0,0,2,2,2|Ball36,0,-130,125,275,-0.09805848449468613,0,0,2,2,2|Ball37,1,-130,125,250,-0.09805848449468613,0,0,2,2,2|Tile38,0,0,30,725,0,0,0,1,1,1|Tile39,1,0,20,875,0,0,0,1,1,1|Tile40,0,0,5,1025,0,0,0,1,1,1|Tile41,1,0,5,1125,0,0,0,1,1,1|Tile42,0,0,5,1275,0,0,0,2,1,2|Tile43,1,-100,15,1275,0,0,-0.1,2,1,2|Tile44,0,0,5,1475,0,0,0,2,1,2|Tile45,1,-100,15,1475,0,0,-0.1,2,1,2|Tile46,0,0,25,1675,0,0,0,2,1,2|Tile47,1,100,25,1475,0,0,0.2,2,1,2|Tile48,0,0,45,1875,-0.1,0,0,2,1,2|Tile49,1,100,25,1275,0,0,0.2,2,1,2|Ball50,0,40,25,1225,0,0,0,1,1,1|Ball51,1,20,25,1225,0,0,0,1,1,1|Ball52,0,0,25,1225,0,0,0,1,1,1|Ball53,1,-20,25,1225,0,0,0,1,1,1|Ball54,0,-40,25,1225,0,0,0,1,1,1|Ball55,1,-40,25,1250,0,0,0,1,1,1|Ball56,0,-20,25,1250,0,0,0,1,1,1|Ball57,1,0,25,1250,0,0,0,1,1,1|Ball58,0,20,25,1250,0,0,0,1,1,1|Ball59,1,40,25,1250,0,0,0,1,1,1|Ball60,0,40,25,1275,0,0,0,1,1,1|Ball61,1,20,25,1275,0,0,0,1,1,1|Ball62,0,0,25,1275,0,0,0,1,1,1|Ball63,1,-20,25,1275,0,0,0,1,1,1|Ball64,0,-40,25,1275,0,0,0,1,1,1|Ball65,1,-40,25,1300,0,0,0,1,1,1|Ball66,0,-20,25,1300,0,0,0,1,1,1|Ball67,1,0,25,1300,0,0,0,1,1,1|Ball68,0,20,25,1300,0,0,0,1,1,1|Ball69,1,40,25,1300,0,0,0,1,1,1|Ball70,0,40,25,1325,0,0,0,1,1,1|Ball71,1,20,25,1325,0,0,0,1,1,1|Ball72,0,0,25,1325,0,0,0,1,1,1|Ball73,1,-20,25,1325,0,0,0,1,1,1|Ball74,0,-40,25,1325,0,0,0,1,1,1|Ball75,1,-40,25,1350,0,0,0,1,1,1|Ball76,0,-20,25,1350,0,0,0,1,1,1|Ball77,1,0,25,1350,0,0,0,1,1,1|Ball78,0,20,25,1350,0,0,0,1,1,1|Ball79,1,40,25,1350,0,0,0,1,1,1|Ball80,0,40,25,1375,0,0,0,1,1,1|Ball81,1,20,25,1375,0,0,0,1,1,1|Ball82,0,0,25,1375,0,0,0,1,1,1|Ball83,1,-20,25,1375,0,0,0,1,1,1|Ball84,0,-40,25,1375,0,0,0,1,1,1|Ball85,1,-40,25,1400,0,0,0,1,1,1|Ball86,0,-20,25,1400,0,0,0,1,1,1|Ball87,1,0,25,1400,0,0,0,1,1,1|Ball88,0,20,25,1400,0,0,0,1,1,1|Ball89,1,40,25,1400,0,0,0,1,1,1|Ball90,0,40,25,1425,0,0,0,1,1,1|Ball91,1,20,25,1425,0,0,0,1,1,1|Ball92,0,0,25,1425,0,0,0,1,1,1|Ball93,1,-20,25,1425,0,0,0,1,1,1|Ball94,0,-40,25,1425,0,0,0,1,1,1|Ball95,1,-40,25,1450,0,0,0,1,1,1|Ball96,0,-20,25,1450,0,0,0,1,1,1|Ball97,1,0,25,1450,0,0,0,1,1,1|Ball98,0,20,25,1450,0,0,0,1,1,1|Ball99,1,40,25,1450,0,0,0,1,1,1|Ball100,0,40,25,1475,0,0,0,1,1,1|Ball101,1,20,25,1475,0,0,0,1,1,1|Ball102,0,0,25,1475,0,0,0,1,1,1|Ball103,1,-20,25,1475,0,0,0,1,1,1|Ball104,0,-40,25,1475,0,0,0,1,1,1|Ball105,1,-40,25,1500,0,0,0,1,1,1|Ball106,0,-20,25,1500,0,0,0,1,1,1|Ball107,1,0,25,1500,0,0,0,1,1,1|Ball108,0,20,25,1500,0,0,0,1,1,1|Ball109,1,40,25,1500,0,0,0,1,1,1|Ball110,0,40,25,1525,0,0,0,1,1,1|Ball111,1,20,25,1525,0,0,0,1,1,1|Ball112,0,0,25,1525,0,0,0,1,1,1|Ball113,1,-20,25,1525,0,0,0,1,1,1|Ball114,0,-40,25,1525,0,0,0,1,1,1|Ball115,1,-40,25,1550,0,0,0,1,1,1|Ball116,0,-20,25,1550,0,0,0,1,1,1|Ball117,1,0,25,1550,0,0,0,1,1,1|Ball118,0,20,25,1550,0,0,0,1,1,1|Ball119,1,40,25,1550,0,0,0,1,1,1|Ball120,0,0,160,1950,0,0,0,2,2,2|Ball122,1,-130,100,1300,0,0,0,2,2,2|Ball123,0,-130,100,1475,0,0,0,2,2,2|Ball124,1,130,100,1250,0,0,0,2,2,2|Ball125,0,130,100,1400,0,0,0,2,2,2|Player,2,-3,57,2729,0,0,0,1,1,1|Tile126,1,0,35,2225,0,0,0,1,1,1|Tile127,0,0,25,2325,0.1,0,0,1,1,1|Tile128,1,0,25,2425,-0.1,0,0,1,1,1|Ball129,0,-10,35,2375,0,0,0,1,1,1|Ball130,1,10,35,2375,0,0,0,1,1,1|Goal,0,0,35,2725,0,0,0,1,1,1"
mapData["2"]["7"] = "2~Boost0,0,0,10,0,0,0,0,1,1,1|Boost1,1,0,10,100,0,0,0,1,1,1|Boost2,0,0,10,200,0,0,0,1,1,1|Boost3,1,0,20,300,-0.1,0,0,1,1,1|Tile4,0,0,30,625,0,0,0,1,1,1|Tile5,1,0,30,725,0,0,0,1,1,1|Tile6,0,0,30,825,0,0,0,1,1,1|Tile7,1,0,20,925,0.1,0,0,1,1,1|Tile8,0,0,10,1025,0,0,0,1,1,1|AmiyaBar,2,0,10,1100,0,0,0,1,1,1|Tile11,0,0,10,1175,0,0,0,1,1,1|Death12,1,0,-20,1250,0,0,0,1,1,1|Tile13,0,0,10,1300,0,0,0,1,1,1|Tile14,1,0,10,1400,0,0,0,1,1,1|Boost15,0,0,10,1500,0,0,0,1,1,1|Tile16,1,0,10,1600,0,0,0,1,1,1|Death17,0,0,-10,1650,0,0,0,1,1,1|Tile18,1,0,10,1725,0,0,0,1,1,1|Tile19,0,0,10,1825,0,0,0,1,1,1|Boost20,1,0,10,1925,0,0,0,1,1,1|Boost21,0,0,10,2050,0,0,0,1,1,1|Boost22,1,0,10,2175,0,0,0,1,1,1|Death23,0,0,-15,2000,0,0,0,1,1,1|Death24,1,0,-10,2125,0,0,0,1,1,1|Player,2,-4,52,2305,0,0,0,1,1,1|Goal,0,0,30,2300,0,0,0,1,1,1"

mapData["3"]["1"] = "3~Player,2,5,85,2347,0,0,0,1,1,1|Tile1,0,0,10,0,0,0,0,2,1,2|Tile2,1,0,10,200,0,0,0,2,1,2|Tile3,0,-30,10,400,0,0,0,2,1,2|Tile4,1,-70,10,600,0,0,0,2,1,2|Tile5,0,-70,10,800,0,0,0,2,1,2|Tile6,1,-30,10,975,0,0,0,1.5,1,1.5|Tile7,0,10,10,1125,0,0,0,1.5,1,1.5|Tile8,1,50,10,1275,0,0,0,1.5,1,1.5|Tile9,0,50,10,1425,0,0,0,1.5,1,1.5|Tile10,1,50,10,1550,0,0,0,1,1,1|Tile11,0,50,10,1650,0,0,0,1,1,1|Tile12,1,30,10,1750,0,0,0,1,1,1|Tile13,0,0,10,1850,0,0,0,1,1,1|Tile14,1,-20,10,1950,0,0,0,1,1,1|Tile15,0,-20,10,2050,0,0,0,1,1,1|Tile16,1,10,10,2200,0,0,0,2,1,2|Goal,0,10,65,2350,0,0,0,1,1,1"
mapData["3"]["2"] = "3~Tile0,0,0,10,0,0,0,0,2,1,2|Tile1,1,0,10,175,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,1,1,1|Tile3,1,0,10,400,0,0,0,1,1,1|Tile4,0,0,10,550,0,0,0,1,1,1|Tile5,1,0,10,650,0,0,0,1,1,1|Tile6,0,0,10,800,0,0,0,1,1,1|Tile7,1,0,10,900,0,0,0,1,1,1|Tile8,0,0,10,1075,0,0,0,1,1,1|Tile9,1,0,10,1175,0,0,0,1,1,1|Tile10,0,0,10,1350,0,0,0,1,1,1|Tile11,1,-50,10,1500,0,0,0,1,1,1|Tile12,0,-50,10,1600,0,0,0,1,1,1|Tile13,1,-50,10,1700,0,0,0,1,1,1|Tile14,0,0,10,1875,0,0,0,1,1,1|Tile15,1,0,10,1975,0,0,0,1,1,1|Tile16,0,0,30,2075,0,0,0,1,1,1|Tile17,1,0,30,2175,0,0,0,1,1,1|Tile18,0,0,15,2375,0,0,0,1,1,1|Tile19,1,0,15,2475,0,0,0,1,1,1|Tile20,0,-40,15,2625,0,0,0,1,1,1|Tile21,1,10,15,2775,0,0,0,1,1,1|Tile22,0,50,15,2925,0,0,0,1,1,1|Tile23,1,-10,15,3075,0,0,0,1,1,1|Goal,2,-10,70,3175,0,0,0,1,1,1|Player,2,78,35,2682,0,0,0,1,1,1|AmiyaBar26,1,0,10,1425,0,0,0,1,1,1|AmiyaBar27,0,0,10,1275,0,0,0,1,1,1|AmiyaBar28,1,80,15,2600,0,0,0,1,1,1|Tile29,0,80,15,2675,0,0,0,1,1,1"
mapData["3"]["3"] = "3~Player,2,4,85,2131,0,0,0,1,1,1|Tile1,0,0,10,0,0.1,0,0,1.75,1,1.75|Tile2,1,0,-10,175,0,0,0,1.75,1,1.75|Tile3,0,0,0,325,-0.1,0,0,1.25,1,1.25|Tile4,1,0,10,450,0,0,0,1.25,1,1.25|Tile5,0,0,10,625,0,0,0,1,1,1|Tile6,1,0,10,725,0,0,0,1,1,1|Tile7,0,20,10,825,0,0,0.1,1,1,1|Tile8,1,20,10,925,0,0,0.1,1,1,1|Tile9,0,20,10,1025,0,0,0.1,1,1,1|Tile10,1,20,10,1125,0,0,0.1,1,1,1|Tile11,0,20,10,1225,0,0,0.1,1,1,1|Tile12,1,-10,5,1350,0,0,0,1.25,1,1.25|Tile13,0,-30,5,1500,0,0,-0.30000000000000004,1.75,1,1.75|Tile14,1,-30,5,1675,0,0,-0.30000000000000004,1.75,1,1.75|Tile15,0,-30,5,1850,0,0,-0.30000000000000004,1.75,1,1.75|Tile16,1,0,-5,2025,0,0,0,1.75,1,1.75|Goal,0,0,65,2125,0,0,0,1,1,1"
mapData["3"]["4"] = "3~Tile0,0,0,10,0,0,0,0,2,1,2|Tile1,1,0,10,200,0,0,0,2,1,2|Tile2,0,0,10,425,0,0,0,2,1,2|Tile3,1,0,10,650,0,0,0,1.5,1,1.5|Tile4,0,0,10,800,0,0,0,1.5,1,1.5|Tile5,1,0,10,1025,0,0,0,1,1,1|Tile6,0,0,10,1125,0,0,0,1,1,1|Tile7,1,0,10,1375,0,0,0,1,1,1|Tile8,0,0,10,1475,0,0,0,1,1,1|Tile9,1,-30,10,1625,0,0,0,1,1,1|Tile10,0,-30,10,1775,0,0,0,1,1,1|Tile11,1,20,10,1925,0,0,0,1,1,1|Tile12,0,20,10,2125,0,0,0,1,1,1|Tile13,1,20,10,2225,0,0,0,1,1,1|Tile14,0,-30,10,2375,0,0,0,1,1,1|Tile15,1,70,10,2375,0,0,0,1,1,1|Tile16,0,70,10,2475,0,0,0,1,1,1|Tile17,1,-30,10,2575,0,0,0,1,1,1|Tile18,0,70,10,2675,0,0,0,1,1,1|Tile19,1,70,10,2775,0,0,0,1,1,1|Tile20,0,-50,10,2775,0,0,0,1,1,1|Tile21,1,-50,10,2875,0,0,0,1,1,1|Tile22,0,-50,10,2975,0,0,0,1,1,1|Tile23,1,0,10,2975,0,0,0,1,1,1|Tile24,0,0,10,3075,0,0,0,1,1,1|Tile25,1,0,10,3275,0,0,0,1,1,1|AmiyaBar,2,0,10,3350,0,0,0,1,1,1|Tile27,1,0,10,3425,0,0,0,1,1,1|Tile28,0,0,10,3525,0,0,0,1,1,1|Tile29,1,0,10,3675,0,0,0,1,1,1|Tile30,0,0,10,3925,0,0,0,1,1,1|Tile31,1,0,10,4175,0,0,0,1,1,1|Tile32,0,0,30,4275,0,0,0,1,1,1|Tile33,1,0,30,4375,0,0,0,1,1,1|Tile34,0,0,25,4550,0,0,0,1,1,1|Tile35,1,0,25,4650,0,0,0,1,1,1|Tile36,0,0,25,4750,0,0,0,1,1,1|Goal,2,0,85,4825,0,0,0,1,1,1|Player,2,-79,30,2522,0,0,0,1,1,1|Tile39,0,40,50,1600,0,0,0,1,1,1|AmiyaBar40,1,40,50,1675,0,0,0,1,1,1|Tile41,0,40,50,1750,0,0,0,1,1,1|AmiyaBar42,1,-80,10,2600,0,0,0,1,1,1|Tile43,0,-80,10,2525,0,0,0,1,1,1"
mapData["3"]["5"] = "3~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,100,0,0,0,1,1,1|Tile2,0,30,10,200,0,0,0.1,1,1,1|Tile3,1,40,10,300,0,0,0.2,1,1,1|Tile4,0,50,15,400,0,0,0.30000000000000004,1,1,1|Tile5,1,-30,15,525,0,0,-0.2,1,1,1|Tile6,0,-30,15,625,0,0,-0.2,1,1,1|Tile7,1,-30,15,725,0,0,-0.2,1,1,1|Tile8,0,50,15,825,0,0,0.2,1,1,1|Tile9,1,50,15,925,0,0,0.2,1,1,1|Tile10,0,50,15,1025,0,0,0.2,1,1,1|Tile11,1,-30,30,1075,0,0,-0.1,1,1,1|Tile12,0,-30,30,1175,0,0,-0.1,1,1,1|Tile13,1,50,10,1275,0,0,0.2,1,1,1|Tile14,0,50,10,1375,0,0,0.2,1,1,1|Tile15,1,-40,10,1475,0,0,-0.2,1,1,1|Tile16,0,-40,10,1575,0,0,-0.2,1,1,1|Tile17,1,-40,10,1750,0,0,-0.2,1,1,1|Tile18,0,-40,10,1850,0,0,-0.2,1,1,1|Tile19,1,-40,10,2100,0,0,-0.2,1,1,1|Tile20,0,-40,10,2200,0,0,-0.2,1,1,1|Tile21,1,30,10,2325,0,0,0.1,1,1,1|Tile22,0,30,10,2425,0,0,0.1,1,1,1|Player,2,-36,63,4367,0,0,0,1,1,1|Tile24,1,30,0,2600,0,0,0,2,1,2|Tile25,0,-70,0,2600,0,0,0,2,1,2|AmiyaBar26,1,-70,0,2750,0,0,0,2,1,2|AmiyaBar27,0,30,0,2750,0,0,0,2,1,2|Tile28,1,-20,0,2900,0,0,0,2,1,2|Tile29,0,-20,0,3050,0,0,0,1,1,1|Tile30,1,0,0,3225,0,0,0.1,1,1,1|Tile31,0,-50,0,3450,0,0,-0.1,1,1,1|Tile32,1,-50,0,3675,0,0,-0.30000000000000004,1,1,1|Tile33,0,-70,0,3875,0,0,-0.5,1,1,1|Tile34,1,0,5,4000,0,0,0.5,1,1,1|Tile35,0,-40,-5,4175,0,0,0,1,1,1|Tile36,1,-40,-5,4275,0,0,0,1,1,1|Goal,0,-40,45,4375,0,0,0,1,1,1"
mapData["3"]["6"] = "3~Tile0,0,0,10,0,0,0,0,1,1,1|Tile1,1,0,10,125,0,0,0,1.5,1,1.5|Tile2,0,0,10,300,0,0,0,2,1,2|Tile3,1,100,50,300,0,0,0.1,2,1,2|Tile4,0,-100,50,300,0,0,-0.1,2,1,2|Tile5,1,-100,50,500,0,0,-0.1,2,1,2|Tile6,0,100,50,500,0,0,0.1,2,1,2|Tile7,1,0,30,500,-0.1,0,0,2,1,2|Ball8,0,130,125,250,-0.09805848449468613,0,0,2,2,2|Ball9,1,130,125,275,-0.09805848449468613,0,0,2,2,2|Ball10,0,130,125,300,-0.09805848449468613,0,0,2,2,2|Ball11,1,130,125,325,-0.09805848449468613,0,0,2,2,2|Ball12,0,130,125,350,-0.09805848449468613,0,0,2,2,2|Ball13,1,130,125,375,-0.09805848449468613,0,0,2,2,2|Ball14,0,130,125,400,-0.09805848449468613,0,0,2,2,2|Ball15,1,130,125,425,-0.09805848449468613,0,0,2,2,2|Ball16,0,130,125,450,-0.09805848449468613,0,0,2,2,2|Ball17,1,130,125,475,-0.09805848449468613,0,0,2,2,2|Ball18,0,130,125,500,-0.09805848449468613,0,0,2,2,2|Ball19,1,130,125,525,-0.09805848449468613,0,0,2,2,2|Ball20,0,130,125,550,-0.09805848449468613,0,0,2,2,2|Ball21,1,130,125,575,-0.09805848449468613,0,0,2,2,2|Ball22,0,30,125,575,-0.09805848449468613,0,0,2,2,2|Ball23,1,-30,125,575,-0.09805848449468613,0,0,2,2,2|Ball24,0,-130,125,575,-0.09805848449468613,0,0,2,2,2|Ball25,1,-130,125,550,-0.09805848449468613,0,0,2,2,2|Ball26,0,-130,125,525,-0.09805848449468613,0,0,2,2,2|Ball27,1,-130,125,500,-0.09805848449468613,0,0,2,2,2|Ball28,0,-130,125,475,-0.09805848449468613,0,0,2,2,2|Ball29,1,-130,125,450,-0.09805848449468613,0,0,2,2,2|Ball30,0,-130,125,425,-0.09805848449468613,0,0,2,2,2|Ball31,1,-130,125,400,-0.09805848449468613,0,0,2,2,2|Ball32,0,-130,125,375,-0.09805848449468613,0,0,2,2,2|Ball33,1,-130,125,350,-0.09805848449468613,0,0,2,2,2|Ball34,0,-130,125,325,-0.09805848449468613,0,0,2,2,2|Ball35,1,-130,125,300,-0.09805848449468613,0,0,2,2,2|Ball36,0,-130,125,275,-0.09805848449468613,0,0,2,2,2|Ball37,1,-130,125,250,-0.09805848449468613,0,0,2,2,2|Tile38,0,0,30,725,0,0,0,1,1,1|Tile39,1,0,20,875,0,0,0,1,1,1|Tile40,0,0,5,1025,0,0,0,1,1,1|Tile41,1,0,5,1125,0,0,0,1,1,1|Tile42,0,0,5,1275,0,0,0,2,1,2|Tile43,1,-100,15,1275,0,0,-0.1,2,1,2|Tile44,0,0,5,1475,0,0,0,2,1,2|Tile45,1,-100,15,1475,0,0,-0.1,2,1,2|Tile46,0,0,25,1675,0,0,0,2,1,2|Tile47,1,100,25,1475,0,0,0.2,2,1,2|Tile48,0,0,45,1875,-0.1,0,0,2,1,2|Tile49,1,100,25,1275,0,0,0.2,2,1,2|Ball50,0,40,25,1225,0,0,0,1,1,1|Ball51,1,20,25,1225,0,0,0,1,1,1|Ball52,0,0,25,1225,0,0,0,1,1,1|Ball53,1,-20,25,1225,0,0,0,1,1,1|Ball54,0,-40,25,1225,0,0,0,1,1,1|Ball55,1,-40,25,1250,0,0,0,1,1,1|Ball56,0,-20,25,1250,0,0,0,1,1,1|Ball57,1,0,25,1250,0,0,0,1,1,1|Ball58,0,20,25,1250,0,0,0,1,1,1|Ball59,1,40,25,1250,0,0,0,1,1,1|Ball60,0,40,25,1275,0,0,0,1,1,1|Ball61,1,20,25,1275,0,0,0,1,1,1|Ball62,0,0,25,1275,0,0,0,1,1,1|Ball63,1,-20,25,1275,0,0,0,1,1,1|Ball64,0,-40,25,1275,0,0,0,1,1,1|Ball65,1,-40,25,1300,0,0,0,1,1,1|Ball66,0,-20,25,1300,0,0,0,1,1,1|Ball67,1,0,25,1300,0,0,0,1,1,1|Ball68,0,20,25,1300,0,0,0,1,1,1|Ball69,1,40,25,1300,0,0,0,1,1,1|Ball70,0,40,25,1325,0,0,0,1,1,1|Ball71,1,20,25,1325,0,0,0,1,1,1|Ball72,0,0,25,1325,0,0,0,1,1,1|Ball73,1,-20,25,1325,0,0,0,1,1,1|Ball74,0,-40,25,1325,0,0,0,1,1,1|Ball75,1,-40,25,1350,0,0,0,1,1,1|Ball76,0,-20,25,1350,0,0,0,1,1,1|Ball77,1,0,25,1350,0,0,0,1,1,1|Ball78,0,20,25,1350,0,0,0,1,1,1|Ball79,1,40,25,1350,0,0,0,1,1,1|Ball80,0,40,25,1375,0,0,0,1,1,1|Ball81,1,20,25,1375,0,0,0,1,1,1|Ball82,0,0,25,1375,0,0,0,1,1,1|Ball83,1,-20,25,1375,0,0,0,1,1,1|Ball84,0,-40,25,1375,0,0,0,1,1,1|Ball85,1,-40,25,1400,0,0,0,1,1,1|Ball86,0,-20,25,1400,0,0,0,1,1,1|Ball87,1,0,25,1400,0,0,0,1,1,1|Ball88,0,20,25,1400,0,0,0,1,1,1|Ball89,1,40,25,1400,0,0,0,1,1,1|Ball90,0,40,25,1425,0,0,0,1,1,1|Ball91,1,20,25,1425,0,0,0,1,1,1|Ball92,0,0,25,1425,0,0,0,1,1,1|Ball93,1,-20,25,1425,0,0,0,1,1,1|Ball94,0,-40,25,1425,0,0,0,1,1,1|Ball95,1,-40,25,1450,0,0,0,1,1,1|Ball96,0,-20,25,1450,0,0,0,1,1,1|Ball97,1,0,25,1450,0,0,0,1,1,1|Ball98,0,20,25,1450,0,0,0,1,1,1|Ball99,1,40,25,1450,0,0,0,1,1,1|Ball100,0,40,25,1475,0,0,0,1,1,1|Ball101,1,20,25,1475,0,0,0,1,1,1|Ball102,0,0,25,1475,0,0,0,1,1,1|Ball103,1,-20,25,1475,0,0,0,1,1,1|Ball104,0,-40,25,1475,0,0,0,1,1,1|Ball105,1,-40,25,1500,0,0,0,1,1,1|Ball106,0,-20,25,1500,0,0,0,1,1,1|Ball107,1,0,25,1500,0,0,0,1,1,1|Ball108,0,20,25,1500,0,0,0,1,1,1|Ball109,1,40,25,1500,0,0,0,1,1,1|Ball110,0,40,25,1525,0,0,0,1,1,1|Ball111,1,20,25,1525,0,0,0,1,1,1|Ball112,0,0,25,1525,0,0,0,1,1,1|Ball113,1,-20,25,1525,0,0,0,1,1,1|Ball114,0,-40,25,1525,0,0,0,1,1,1|Ball115,1,-40,25,1550,0,0,0,1,1,1|Ball116,0,-20,25,1550,0,0,0,1,1,1|Ball117,1,0,25,1550,0,0,0,1,1,1|Ball118,0,20,25,1550,0,0,0,1,1,1|Ball119,1,40,25,1550,0,0,0,1,1,1|Ball120,0,0,160,1950,0,0,0,2,2,2|Ball122,1,-130,100,1300,0,0,0,2,2,2|Ball123,0,-130,100,1475,0,0,0,2,2,2|Ball124,1,130,100,1250,0,0,0,2,2,2|Ball125,0,130,100,1400,0,0,0,2,2,2|Player,2,-3,57,2729,0,0,0,1,1,1|Tile126,1,0,35,2225,0,0,0,1,1,1|Tile127,0,0,25,2325,0.1,0,0,1,1,1|Tile128,1,0,25,2425,-0.1,0,0,1,1,1|Ball129,0,-10,35,2375,0,0,0,1,1,1|Ball130,1,10,35,2375,0,0,0,1,1,1|Goal,0,0,35,2725,0,0,0,1,1,1"
mapData["3"]["7"] = "3~Boost0,0,0,10,0,0,0,0,1,1,1|Boost1,1,0,10,100,0,0,0,1,1,1|Boost2,0,0,10,200,0,0,0,1,1,1|Boost3,1,0,20,300,-0.1,0,0,1,1,1|Tile4,0,0,30,625,0,0,0,1,1,1|Tile5,1,0,30,725,0,0,0,1,1,1|Tile6,0,0,30,825,0,0,0,1,1,1|Tile7,1,0,20,925,0.1,0,0,1,1,1|Tile8,0,0,10,1025,0,0,0,1,1,1|AmiyaBar,2,0,10,1100,0,0,0,1,1,1|Tile11,0,0,10,1175,0,0,0,1,1,1|Death12,1,0,-20,1250,0,0,0,1,1,1|Tile13,0,0,10,1300,0,0,0,1,1,1|Tile14,1,0,10,1400,0,0,0,1,1,1|Boost15,0,0,10,1500,0,0,0,1,1,1|Tile16,1,0,10,1600,0,0,0,1,1,1|Death17,0,0,-10,1650,0,0,0,1,1,1|Tile18,1,0,10,1725,0,0,0,1,1,1|Tile19,0,0,10,1825,0,0,0,1,1,1|Boost20,1,0,10,1925,0,0,0,1,1,1|Boost21,0,0,10,2050,0,0,0,1,1,1|Boost22,1,0,10,2175,0,0,0,1,1,1|Death23,0,0,-15,2000,0,0,0,1,1,1|Death24,1,0,-10,2125,0,0,0,1,1,1|Player,2,-4,52,2305,0,0,0,1,1,1|Goal,0,0,30,2300,0,0,0,1,1,1"

const COLOUR_BLANK = new THREE.Color(0xffffff);

const COLOUR_MAIN = new THREE.Color(0xc0bdf2);
const COLOUR_SECONDARY = new THREE.Color(0xffbef4);
const COLOUR_MAIN_WORLD2 = new THREE.Color(0xa2daff);
const COLOUR_SECONDARY_WORLD2 = new THREE.Color(0x8dbede);
const COLOUR_MAIN_WORLD3 = new THREE.Color(0xffffff);
const COLOUR_SECONDARY_WORLD3 = new THREE.Color(0xe6f5ff);

const TEXTURE_TILE_MAIN = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile1.png');
TEXTURE_TILE_MAIN.wrapS = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.wrapT = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.repeat.set(2, 2);
const TEXTURE_GHOST_TILE = new THREE.TextureLoader().load('../images/amiyaroad/tiles/GhostTile.png');
TEXTURE_GHOST_TILE.wrapS = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.wrapT = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.repeat.set(2, 2);
const TEXTURE_AMIYABAR = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile2.png');
const TEXTURE_GOAL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile3.png');
const TEXTURE_BOOST = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile4.png');
const TEXTURE_DEATH = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile5.png');
const TEXTURE_BALL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile6.png');

const TEXTURE_CHOT = new THREE.TextureLoader().load('../images/amiyaroad/tiles/ChotTile.png');
TEXTURE_CHOT.wrapS = THREE.RepeatWrapping;
TEXTURE_CHOT.wrapT = THREE.RepeatWrapping;
TEXTURE_CHOT.repeat.set(500, 500);

let currentWorld;
let currentLevel;
let inEditor;
let inPlaytest;

let editorLastPos = new THREE.Vector3(0, 30, 0);

const colourMap = {
    "1": [COLOUR_MAIN, COLOUR_SECONDARY, COLOUR_BLANK],
    "2": [COLOUR_MAIN_WORLD2, COLOUR_SECONDARY_WORLD2, COLOUR_BLANK],
    "3": [COLOUR_MAIN_WORLD3, COLOUR_SECONDARY_WORLD3, COLOUR_BLANK]
};
const tileTypes = ["Tile", "AmiyaBar", "Goal", "Boost", "Death", "Ball", "Player"];

let pos;
let quad;
let scale;
let scene;
let physicsWorld;
let rigidBodies;
let allObjects;
const margin = 0.05;
var TEXTURE_PLAYER = new THREE.TextureLoader().load('../images/amiyaroad/Amiya.png');

TEXTURE_PLAYER.wrapS = THREE.RepeatWrapping;
TEXTURE_PLAYER.wrapT = THREE.RepeatWrapping;
TEXTURE_PLAYER.repeat.set(1, 1);

const TILE_WIDTH = 50;
const TILE_HEIGHT = 20;
const TILE_DEPTH = 100;
const AMIYABAR_WIDTH = 50;
const AMIYABAR_HEIGHT = 20;
const AMIYABAR_DEPTH = 50;

const DEATH_WIDTH = 100;
const DEATH_HEIGHT = 100;
const DEATH_DEPTH = 20;
const GOAL_WIDTH = 120;
const GOAL_HEIGHT = 120;
const GOAL_DEPTH = 40;
const playerRadius = 8;
const BALL_RADIUS = 6;
const BALL_MASS = 2;

const DEATH_MARGIN = 0.5;
let seed;
let xFriction = 0.25;
let physicsFriction = 0.2;
let rollingFriciton = 0;
let ghostTile;

let lastTileSelection = 0;

let cheat1 = false;
let cheat2 = false;

class MapGenerator {
    constructor(scene, physicsWorld) {
        this.scene = scene;
        this.physicsWorld = physicsWorld;
        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.rigidBodies = [];
        this.allObjects = [];
        this.levelString = "";
    }

    initMap(currentWorld, currentLevel, inEditor, inPlayTest, seed, levelString = "", loadedFromImage = false) {
        this.seed = seed;
        this.lastTileSelection = 0;
        console.log(seed);
        console.log("levelString", levelString);
        Math.seedrandom(seed);
        if (inEditor) {
            console.log("In editor");
            if (levelString.indexOf("~") >= 0) {

                let parts = levelString.split("~");
                this.currentWorld = parts[0];
            } else {
                this.currentWorld = $('.hud--worldSelect').val();
            }

        } else {
            this.currentWorld = currentWorld;
        }
        this.currentLevel = currentLevel;
        this.inEditor = inEditor;
        this.inPlayTest = inPlayTest;

        console.log("World", this.currentWorld);
        console.log("Level", this.currentLevel);

        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.scale = new THREE.Vector3(1, 1, 1);
        this.rigidBodies = [];
        this.allObjects = [];
        if (this.editorLastPos == undefined) {
            this.editorLastPos = new THREE.Vector3(0, 30, 0);
        }

        if (inEditor) {
            this.xFriction = 0;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "1") {
            this.xFriction = 0.15;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "2") {
            this.xFriction = 0.4;
            this.physicsFriction = 0.4;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "3") {
            this.xFriction = 0.05;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
        } else {
            this.xFriction = 0.15;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;

        }

        if (inEditor) {
            console.log(">Editor");
            this.levelString = levelString;
            this.createMapBuilder();
        } else if (inPlayTest) {
            console.log(">Playtest");
            if (levelString != "") {
                this.loadMapFromLevelString(levelString);
            } else {
                this.loadMapFromLevelString(this.levelString);
            }

        } else if (this.currentLevel == "?") {
            console.log(">Random Map");
            this.levelString = "";
            this.createMapRandomChaos();
        } else {
            console.log(">Level");
            this.levelString = mapData[this.currentWorld][this.currentLevel];
            if (loadedFromImage) {
                this.levelString = levelString;
            }
            this.loadMapFromLevelString(this.levelString);
        }

        return this.rigidBodies;

    }

    getColourIndex(colourSelection, hexCode) {
        if (colourSelection && colourSelection.length > 0) {
            for (let i = 0; i < colourSelection.length; i++) {
                if (colourSelection[i].getHexString() == hexCode) {
                    return i;
                }
            }
        }
        return 0;
    }
    generateLevelString(world) {
        if (world) {
            let newLevelString = world + "~";
            let colourSelection = colourMap[world];


            for (let i = 0; i < this.allObjects.length; i++) {
                let object = this.allObjects[i];
                let materialInfo = this.getColourIndex(colourSelection, object.material.color.getHexString());
                let pos = object.position;
                let rotation = object.quaternion;

                let scale = object.scale;
                if (object.name.indexOf("Player") >= 0) {
                    rotation.set(0, 0, 0, 1);
                }
                if (object.name.indexOf("GhostTile") < 0) {
                    newLevelString += object.name + "," + materialInfo + "," + Math.round(pos.x) + "," + Math.round(pos.y) + "," + Math.round(pos.z) + "," + rotation.x + "," + rotation.y + "," + rotation.z + "," + scale.x + "," + scale.y + "," + scale.z + "|";
                }


            }

            this.levelString = newLevelString.slice(0, -1);
            $('#levelSelect').val(this.levelString);
        }
        return this.levelString;
    }

    loadMapFromLevelString(levelString = "") {
        this.rigidBodies = [];
        this.allObjects = [];
        console.log("loadMapFromLevelString", levelString);
        if (levelString.indexOf("~") < 0) {
            return;
        }
        let parts = levelString.split("~");

        let mapTiles = parts[1].split("|");
        if (!this.inEditor) {
            this.currentWorld = parts[0];
        }
        let colourSelection = colourMap[this.currentWorld];
        console.log("mapTiles.length", mapTiles.length);
        for (let i = 0; i < mapTiles.length; i++) {
            const tile = mapTiles[i].split(",");
            let tileType = tile[0];
            let colourIndex = parseInt(tile[1]);
            let materialHex = colourSelection[colourIndex];
            this.pos.set(parseFloat(tile[2]), parseFloat(tile[3]), parseFloat(tile[4]));
            this.quat.set(parseFloat(tile[5]), parseFloat(tile[6]), parseFloat(tile[7]), 1);

            if (tile.length > 10) {
                this.scale = new THREE.Vector3(parseFloat(tile[8]), parseFloat(tile[9]), parseFloat(tile[10]));
            } else {
                this.scale = new THREE.Vector3(1, 1, 1);
            }
            if (tileType.indexOf("GhostTile") >= 0) {
                continue;
            }
            let newTile;
            if (tileType.indexOf("Tile") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Tile" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("AmiyaBar") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_AMIYABAR });
                newTile = this.createAmiyaBarWithPhysics("AmiyaBar", AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Goal") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_GOAL });
                newTile = this.createGoalWithPhysics("Goal", GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Boost") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Boost" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Death") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Death" + i, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Ball") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
                newTile = this.createBallWithPhysics("Ball" + i, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
            }
            if (newTile) {
                newTile.scale.x = this.scale.x;
                newTile.scale.y = this.scale.y;
                newTile.scale.z = this.scale.z;
            }

        }
        if (cheat1) {
            this.createCheatBarrier();
        }
    }


    v3(x, y, z) {
        return new THREE.Vector3(x, y, z);
    }

    createPlayer() {
        this.pos.set(0, 30, 0);
        this.scale.set(1, 1, 1);
        this.quat.setFromEuler(new THREE.Euler(0, 0, 0, 'XYZ'));
        const playerMaterial = new THREE.MeshPhongMaterial({ map: TEXTURE_PLAYER, name: "Player", shininess: 30, specular: 0xd4aae7 });
        if (this.inEditor) {
            this.pos.set(this.editorLastPos.x, this.editorLastPos.y, this.editorLastPos.z);
        }
        let body = this.createPlayerWithPhysics(playerRadius, 4, this.pos, this.quat, this.scale, playerMaterial);

        return body;

    }
    createPlayerWithPhysics(radius, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.SphereGeometry(radius, 32, 32), material);
        //use x scaling for all directions for ball, never be squished
        object.scale.set(scale.x, scale.x, scale.x);
        const shape = new Ammo.btSphereShape(radius);
        shape.setMargin(margin);
        object.name = "Player";
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createBallWithPhysics(name, radius, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.SphereGeometry(radius, 32, 32), material);
        //use x scaling for all directions for ball, never be squished
        object.scale.set(scale.x, scale.x, scale.x);
        const shape = new Ammo.btSphereShape(radius * scale.x);
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass * scale.x, pos, quat, scale);

        return object;

    }
    createTileWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createDeathWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createAmiyaBarWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createGoalWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = false;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;
    }

    createRigidBody(object, physicsShape, mass, pos, quat, scale) {

        if (pos) {

            object.position.copy(pos);

        } else {

            pos = object.position;

        }

        if (quat) {

            object.quaternion.copy(quat);

        } else {

            quat = object.quaternion;

        }

        const transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        const motionState = new Ammo.btDefaultMotionState(transform);

        const localInertia = new Ammo.btVector3(0, 0, 0);
        physicsShape.calculateLocalInertia(mass, localInertia);

        const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);
        const body = new Ammo.btRigidBody(rbInfo);

        body.setFriction(this.physicsFriction);
        body.setRollingFriction(this.rollingFriction);

        //body.setDamping(50);
        // if (vel) {

        //     body.setLinearVelocity(new Ammo.btVector3(vel.x, vel.y, vel.z));

        // }

        // if (angVel) {

        //     body.setAngularVelocity(new Ammo.btVector3(angVel.x, angVel.y, angVel.z));

        // }

        object.userData.physicsBody = body;
        object.userData.collided = false;

        this.scene.add(object);


        if (mass > 0) {
            if (object.name.indexOf("GhostTile") < 0) {
                this.rigidBodies.push(object);
            }

            // Disable deactivation
            body.setActivationState(4);

        }
        body.name = object.name;
        body.scale = new Vector3(scale.x, scale.y, scale.z);
        if (object.name.indexOf("GhostTile") < 0) {
            this.allObjects.push(object);
            this.physicsWorld.addRigidBody(body);
        }

        return body;

    }


    createColour(i) {
        if (i % 2 == 0) {

            return colourMap[this.currentWorld][0];
        }
        return colourMap[this.currentWorld][1];

    }
    clear() {
        console.log("clear");
        for (let i = 0; i < this.rigidBodies.length; i++) {
            this.physicsWorld.removeRigidBody(this.rigidBodies[i]);
        }
        for (let i = 0; i < this.allObjects.length; i++) {
            this.physicsWorld.removeRigidBody(this.allObjects[i].body);
        }
        this.allObjects = [];
        this.rigidBodies = [];

    }

    createMapRandomChaos() {

        const length = 80 + Math.round(Math.random() * 100);
        let x = 0;
        let y = 0;
        let z = -TILE_DEPTH;
        let zTilt = 0;
        let xTilt = 0;
        let tileType = 1;
        let xAlgo;
        let yAlgo;
        let zTiltAlgo;
        let xTiltAlgo;
        let randomSwitchupRate = 5 + Math.round(Math.random() * 10);
        let verticalRangeRate;
        let randomSkipRate;
        let randomBoostRate;
        let randomAmiyaBarRate;

        let randomTiltRate;
        let tiltRangeRate;

        let buckoRate;

        let tileScale = 1;
        for (let i = 0; i < length; i++) {
            tileType = 1;
            x = 0;
            y = 0;
            zTilt = 0;
            xTilt = 0;
            if (i == 0 || (i % randomSwitchupRate == 0)) {
                xAlgo = Math.round(Math.random() * 10);
                yAlgo = Math.round(Math.random() * 10);
                verticalRangeRate = Math.random() * 0.5;
                randomSkipRate = 2 + Math.round(Math.random() * 6);
                randomBoostRate = 1 + Math.round(Math.random() * 20);
                randomAmiyaBarRate = 5 + Math.round(Math.random() * 15);
                randomTiltRate = 1 + Math.round(Math.random() * 10);
                xTiltAlgo = Math.round(Math.random() * 6);
                zTiltAlgo = Math.round(Math.random() * 6);
                tiltRangeRate = Math.random() * 0.1;
                buckoRate = Math.round(Math.random() * 20);
            }
            if (i > 2) {

                switch (xAlgo) {
                    case 0:
                        x = Math.sin(i);
                        break;
                    case 1:
                        x = Math.cos(i);
                        break;
                    case 2:
                        x = Math.sin(i) + Math.cos(i);
                        break;
                    case 3:
                        x = Math.sin(i) * 2.0;
                        break;
                    case 4:
                        x = Math.cos(i) * 2.0;
                        break;
                    case 5:
                        x = (Math.sin(i) + Math.cos(i)) * 2.0;
                        break;
                    case 6:
                        x = 3.5;
                        break;
                    case 7:
                        x = -3.5;
                        break;
                    case 8:
                        x = 1.5;
                        break;
                    case 9:
                        x = -1.5;
                        break;
                    case 10:
                        x = 0;
                        break;
                }
                switch (yAlgo) {
                    case 0:
                        y = Math.sin(i) * verticalRangeRate;
                        break;
                    case 1:
                        y = Math.cos(i) * verticalRangeRate;
                        break;
                    case 2:
                        y = (Math.sin(i) + Math.cos(i)) * verticalRangeRate;
                        break;
                    case 3:
                        y = Math.sin(i) * 2.0 * verticalRangeRate;
                        break;
                    case 4:
                        y = Math.cos(i) * 2.0 * verticalRangeRate;
                        break;
                    case 5:
                        y = (Math.sin(i) + Math.cos(i)) * 2.0 * verticalRangeRate;
                        break;
                    case 6:
                        y = 2.5;
                        break;
                    case 7:
                        y = 0;
                        break;
                    case 8:
                        y = 1.5;
                        break;
                    case 9:
                        y = -1.5;
                        break;
                }
                if (i % randomTiltRate == 0) {
                    switch (zTiltAlgo) {
                        case 0:
                            zTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            zTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            zTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            zTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            zTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            zTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                    switch (xTiltAlgo) {
                        case 0:
                            xTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            xTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            xTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            xTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            xTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            xTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                }
            }


            if (i == length - 1) {
                //goal
                tileType = 3;
            } else if (i > 0 && i % randomAmiyaBarRate == 0) {
                tileType = 2;
                z -= (AMIYABAR_DEPTH * 0.5);
            } else if (i > 0 && i % randomBoostRate == 0) {
                tileType = 4;
            }

            let tilePos = new THREE.Vector3(x, y * 10, z);
            let tileQuat = new THREE.Quaternion(xTilt, 0, zTilt, 1);
            if ((i % randomSkipRate != 0) || tileType == 2) {
                this.addTile(tileScale, tileType, tilePos, tileQuat, false);
            }
            if (i % buckoRate == 0) {
                tilePos = new THREE.Vector3(x, y + BALL_RADIUS, z);
                this.addTile(tileScale, 6, tilePos, tileQuat, false);
            }

            if (tileType == 1) {
                z += (TILE_DEPTH);
            } else if (tileType == 2) {
                z += (AMIYABAR_DEPTH * 1.5);
            } else if (tileType == 3) {
                z += (GOAL_DEPTH);
            } else if (tileType == 4) {
                z += (TILE_DEPTH);
            } else if (tileType == 5) {
                z += (DEATH_DEPTH);
            }

        }


    }
    removeObject3D(object) {
        if (!(object instanceof THREE.Object3D)) return false;
        // for better memory management and performance
        if (object.geometry) {
            object.geometry.dispose();
        }
        if (object.material) {
            if (object.material instanceof Array) {
                // for better memory management and performance
                object.material.forEach(material => material.dispose());
            } else {
                // for better memory management and performance
                object.material.dispose();
            }
        }
        if (object.parent) {
            object.parent.remove(object);
        }
        for (var i = 0; i <  this.allObjects.length - 1; i++) {
            let tile = this.allObjects[i];
            if (tile.name == object.name || tile.name == object.body.name) {
                this.allObjects.splice(i, 1);
                console.log(this.allObjects);
                break;
            }
        }
        for (var i = this.rigidBodies.length - 1; i >= 0; i--) {
            let tile = this.rigidBodies[i].body;
            if (tile.name == object.name || tile.name == object.body.name) {
                this.rigidBodies.splice(i, 1);
                break;
            }
        }
        // the parent might be the scene or another Object3D, but it is sure to be removed this way
        return true;
    }
    createCheatBarrier() {
        if (cheat1) {
            this.pos.set(0, -45, 24000);
            this.quat.set(0, 0, 0, 1);
            this.scale = new THREE.Vector3(1, 1, 1);
            let material = new THREE.MeshPhongMaterial({ map: TEXTURE_CHOT, shininess: 30, specular: 0xd4aae7 });
            let newTile = this.createTileWithPhysics("AmiyaBarChot", 50000, 50, 50000, 0, this.pos, this.quat, this.scale, material);
        } else {
            let cheat1Object = this.scene.getObjectByName("AmiyaBarChot");
            this.removeObject3D(cheat1Object);
            this.physicsWorld.removeRigidBody(cheat1Object.body);
        }

    }
    activateCheat1() {
        //toggle
        cheat1 = !cheat1;
        this.createCheatBarrier();
    }
    activateCheat2() {
        //toggle
        cheat2 = !cheat2;
        if (cheat2) {
            TEXTURE_PLAYER = new THREE.TextureLoader().load('../images/amiyaroad/Plok.png');
        } else {
            TEXTURE_PLAYER = new THREE.TextureLoader().load('../images/amiyaroad/Amiya.png');
        }
    }
    createMapBuilder() {
        console.log("Map builder");
        this.pos.set(0, 0, 0);
        this.quat.set(0, 0, 0, 1);
        if (this.levelString != "") {
            this.loadMapFromLevelString(this.levelString);
        }

        // grid
        const gridTileCount = 500;
        const gridSize = TILE_WIDTH * gridTileCount;
        const gridHelper = new THREE.GridHelper(gridSize, gridTileCount);
        gridHelper.position.x = -TILE_WIDTH / 2;
        gridHelper.position.z = -TILE_WIDTH / 2;
        gridHelper.receiveShadow = true;
        gridHelper.castShadow = false;
        this.scene.add(gridHelper);

    }
    moveGhostTile(player, direction, tileScale, tileSelection, tileSnapDistanceX, tileSnapDistanceY, tileSnapDistanceZ) {
        let playerPos = player.position;
        let rotation = player.quaternion;
        let rotationSnap = 0.1;

        this.pos.set(Math.round(playerPos.x / tileSnapDistanceX) * tileSnapDistanceX, Math.round((playerPos.y - TILE_HEIGHT) / tileSnapDistanceY) * tileSnapDistanceY, Math.round(playerPos.z / tileSnapDistanceZ) * tileSnapDistanceZ);

        this.quat.set(Math.round(rotation.x / rotationSnap) * rotationSnap, 0, Math.round(rotation.z / rotationSnap) * rotationSnap, 1);

        if (this.lastTileSelection != tileSelection) {
            this.scene.remove(this.ghostTile);
            this.ghostTile = null;
        }

        if (tileSelection > 0) {
            if (this.ghostTile != null) {
                this.ghostTile.position.x = this.pos.x;
                this.ghostTile.position.y = this.pos.y;
                this.ghostTile.position.z = this.pos.z;
                this.ghostTile.quaternion.x = this.quat.x;
                this.ghostTile.quaternion.y = this.quat.y;
                this.ghostTile.quaternion.z = this.quat.z;
                this.ghostTile.scale.x = tileScale;
                if (tileSelection == 6) {
                    this.ghostTile.scale.y = tileScale;
                } else {
                    this.ghostTile.scale.y = 1;
                }
                this.ghostTile.scale.z = tileScale;
                this.scale.set(this.ghostTile.scale.x, this.ghostTile.scale.y, this.ghostTile.scale.z);

            } else {

                let materialHex = this.createColour(this.allObjects.length);
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GHOST_TILE, transparent: true, opacity: 0.75 });

                this.ghostTile = this.getTileFromSelection(tileSelection, "GhostTile", material);
                this.ghostTile.scale.x = tileScale;
                if (tileSelection == 6) {
                    this.ghostTile.scale.y = tileScale;
                } else {
                    this.ghostTile.scale.y = 1;
                }
                this.ghostTile.scale.z = tileScale;
                this.scale.set(this.ghostTile.scale.x, this.ghostTile.scale.y, this.ghostTile.scale.z);
                $('.hud--tile_selection img').attr("src", "./images/amiyaroad/tiles/Tile" + tileSelection + ".png");
            }

        }

        this.lastTileSelection = tileSelection;


    }
    getOrDefault(value, defaultValue) {
        if (value && value != "") {
            return value;
        }
        return defaultValue;
    }

    getTileNameFromIndex(tileIndex, i) {
        return tileTypes[tileIndex] + i;
    }
    getTileIndexFromName(tileName) {
        for (var i = 0; i < tileTypes.length; i++) {
            if (tileTypes[i].indexOf(tileName) >= 0) {
                return i;
            }
        }
        //default to regular tile
        return 0;
    }
    getTileFromSelection(tileSelection, tileName, tileMaterial = null) {
        //+1 for ghost tile
        let materialHex = this.createColour(this.allObjects.length + 1);

        if (tileSelection == 1) {
            //console.log("Add tile");
            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });

            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Tile" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 2) {
            //console.log("Add amiyabar");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_AMIYABAR });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "AmiyaBar" + this.allObjects.length);
            return this.createAmiyaBarWithPhysics(actualTileName, AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 3) {
            //console.log("Add goal");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GOAL });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Goal");
            return this.createGoalWithPhysics(actualTileName, GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quart, this.scale, material);
        } else if (tileSelection == 4) {
            //console.log("Add boost");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Boost" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 5) {
            //console.log("Add death");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Death" + this.allObjects.length);
            return this.createDeathWithPhysics(actualTileName, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 6) {
            //console.log("Add ball");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Ball" + this.allObjects.length);
            if (this.inEditor) {
                return this.createBallWithPhysics(actualTileName, BALL_RADIUS, 0, this.pos, this.quat, this.scale, material);
            }
            return this.createBallWithPhysics(actualTileName, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
        }
        return null;
    }
    addTile(scale, tileSelection, tilePos = null, tileQuat = null, genLevelString) {
        this.scale = new Vector3(scale, 1, scale);
        this.editorLastPos.set(this.pos.x, this.pos.y + 20, this.pos.z);
        if (tilePos != null) {
            this.pos.x = tilePos.x;
            this.pos.y = tilePos.y;
            this.pos.z = tilePos.z;
        }
        if (tileQuat != null) {
            this.quat.x = tileQuat.x;
            this.quat.y = tileQuat.y;
            this.quat.z = tileQuat.z;
        }


        let newTile = this.getTileFromSelection(tileSelection);
        if (genLevelString) {
            this.generateLevelString(this.currentWorld);
        }

        return newTile;
    }
    undoLastTile() {
        console.log("Undo");
        let index = this.allObjects.length - 1;
        let lastObject = this.allObjects[index];

        if (lastObject) {
            let lastTile = lastObject.body;
            while (lastTile.name.indexOf("GhostTile") >= 0 || lastTile.name.indexOf("Player") >= 0) {
                index--;
                if (index < 0) {
                    return;
                }
                lastObject = this.allObjects[index];
                lastTile = lastObject.body;

            }
            if (index < 0) {
                return;
            }

            this.physicsWorld.removeRigidBody(lastTile);
            this.scene.remove(lastObject);

            this.allObjects.splice(index, 1);

        }
        this.generateLevelString(this.currentWorld);
    }


}

export { MapGenerator };
