import * as THREE from 'three';
import { Vector3 } from 'three';
import { ConvexGeometry } from '../jsm/geometries/ConvexGeometry.js';
let mapData = {};
mapData["1"] = {};
mapData["2"] = {};
mapData["3"] = {};

mapData["1"]["1"] = "1~Player,2,0,3,700,0,0,0,1,1,1|Tile1,0,0,-20,0,0,0,0,1,1,1|Tile2,1,0,-20,100,0,0,0,1,1,1|Tile3,0,0,-20,200,0,0,0,1,1,1|Tile4,1,0,-20,300,0,0,0,1,1,1|Tile5,0,0,-20,400,0,0,0,1,1,1|Tile6,1,0,-20,500,0,0,0,1,1,1|Tile7,0,0,-20,600,0,0,0,1,1,1|Goal,1,0,-20,700,0,0,0,1,1,1"
mapData["1"]["2"] = "1~Tile0,0,0,15,0,0,0,0,1,1,1|Tile1,1,0,15,-120,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile2,0,0,15,-240,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile3,1,0,15,-445,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile4,0,0,15,-565,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile5,1,0,15,-805,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile6,0,0,15,-925,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile7,1,0,15,-1225,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile8,0,0,15,-1345,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile9,1,60,15,-1520,-0.0000011446302323750194,-2.6994361412081293e-13,4.7166955141621584e-7,1,1,1|Tile10,0,-60,15,-1520,-0.000001144605903391747,-2.6993842953865834e-13,4.716705177543365e-7,1,1,1|Tile11,1,60,15,-1640,-0.000001144605903391747,-2.6993842953865834e-13,4.716705177543365e-7,1,1,1|Tile12,0,-60,15,-1640,-0.000001144605903391747,-2.6993842953865834e-13,4.716705177543365e-7,1,1,1|Tile13,1,60,30,-1760,-0.000001144605903391747,-2.6993842953865834e-13,4.716705177543365e-7,1,1,1|Tile14,0,-75,15,-1820,0.000009038056305267002,-0.000001499382492788512,-0.3376721937412079,1,1,1|Tile15,1,30,45,-1880,9.78767360493293e-8,-6.160301771980097e-16,-1.2587877407099793e-8,1,1,1|Tile16,0,-10,45,-2000,1.2777569224908877e-7,-6.779980345697631e-16,-1.061231635901552e-8,1,1,1|AmiyaBar,2,-10,45,-2090,0.000004870919383412172,1.6480958484060844e-13,6.76708324931497e-8,1,1,1|Tile18,0,-10,45,-2200,0.000004870649718233093,1.6480215640136749e-13,6.767152882503088e-8,1,1,1|Tile19,1,45,45,-2380,0.000004781184998155393,9.107934002178788e-7,0.38978676508310084,1,1,1|Tile20,0,45,45,-2500,0.000004426766736301849,8.432783774912281e-7,0.38978676508310073,1,1,1|Tile21,1,45,45,-2620,0.000004426344276012871,8.431979007802859e-7,0.38978676508310084,1,1,1|Tile22,0,45,45,-2740,0.000004426344276012871,8.431979007802859e-7,0.38978676508310084,1,1,1|Tile23,1,-15,30,-2865,1.7351625558603772e-7,7.20985175861636e-15,8.310289700830264e-8,1,1,1|Tile24,0,-15,30,-2985,-0.0000032763591661991523,-1.5662139990867795e-13,9.560697833421742e-8,1,1,1|Tile25,1,-80,35,-3160,1.2028701590338653e-8,-3.745742290774902e-9,-0.6578393005921698,1,1,1|Tile26,0,-15,35,-3155,0.01324274255735157,0.0033494834622648786,0.5256580907152424,1,1,1|Tile27,1,-55,10,-3295,0.09587603581718875,-0.0023363095155257557,-0.04882960352811204,1,1,1|Tile28,0,30,15,-3475,0.01813360565298653,0.000001166433484509763,0.00012865586940301449,1,1,1|Goal,2,30,65,-3555,0,0,0,1,1,1|Player,2,0,40,0,0,0,0,1,1,1";
mapData["1"]["3"] = "1~Tile0,0,0,0,0,0,0,0,1,1,1|Tile1,1,-17,0,-120,0,0,0,1,1,1|Tile2,0,-18,0,-240,0,0,0,1,1,1|Tile3,1,-3,0,-360,0,0,0,1,1,1|Tile4,0,6,0,-720,0,0,0,1,1,1|Tile5,1,-13,0,-840,0,0,0,1,1,1|Tile6,0,-20,0,-960,0,0,0,1,1,1|Tile7,1,-17,0,-2520,0,0,0.04,1,1,1|Tile8,0,0,0,-2640,0,0,0.04,1,1,1|Tile9,1,17,0,-2760,0,0,0.04,1,1,1|Tile10,0,-15,0,-2980,0,0,0.04,1,1,1|Tile11,1,-19,0,-3240,0,0,0.04,1,1,1|Tile12,1,3,0,-4920,0,0,0,1,1,1|Tile13,0,18,0,-5040,0,0,0,1,1,1|Tile14,1,17,0,-5160,0,0,0,1,1,1|Tile15,0,-18,0,-5520,0,0,0,1,1,1|Tile16,1,-2,0,-5640,0,0,0,1,1,1|AmiyaBar,2,15,0,-5760,0,0,0,1,1,1|Tile18,1,80,15,-1320,0,0,0,1,1,1|Tile19,0,71,15,-1440,0,0,0,1,1,1|Tile20,1,52,15,-1560,0,0,0,1,1,1|Tile21,0,40,15,-1680,0,0,0,1,1,1|Tile22,0,66,15,-1920,0,0,0,1,1,1|Tile23,1,79,15,-2040,0,0,0,1,1,1|AmiyaBar,2,75,15,-2160,0,0,0,1,1,1|Tile25,1,57,15,-2280,0,0,0,1,1,1|Tile26,1,68,15,-3720,0,0,0.04,1,1,1|Tile27,0,49,15,-3840,0,0,0.04,1,1,1|Tile28,1,40,15,-3960,0,0,0.04,1,1,1|Tile29,0,49,15,-4080,0,0,0.04,1,1,1|Tile30,0,80,15,-4320,0,0,0.04,1,1,1|Tile31,1,73,15,-4440,0,0,0.04,1,1,1|Tile32,0,54,15,-4560,0,0,0.04,1,1,1|Tile33,1,41,15,-4680,0,0,0.04,1,1,1|Tile34,1,47,15,-6120,0,0,0,1,1,1|Tile35,0,40,15,-6240,0,0,0,1,1,1|Tile36,1,52,15,-6360,0,0,0,1,1,1|Tile37,0,71,15,-6480,0,0,0,1,1,1|Tile38,0,70,15,-6720,0,0,0,1,1,1|Tile39,1,51,15,-6840,0,0,0,1,1,1|Tile40,0,40,15,-6960,0,0,0,1,1,1|Tile41,1,47,15,-7080,0,0,0,1,1,1|Tile42,0,-80,-10,-1200,0,0,0,1,1,1|Tile43,1,-50,-10,-1320,0,0,0,1,1,1|Tile44,1,-37,-10,-1560,0,0,0,1,1,1|Tile45,0,-66,-10,-1680,0,0,0,1,1,1|AmiyaBar,2,-86,-10,-1920,0,0,0,1,1,1|Tile47,1,-59,-10,-2040,0,0,0,1,1,1|Tile48,1,-32,-10,-2280,0,0,0,1,1,1|Tile49,1,-29,-10,-3620,0,0,-0.04,1,1,1|Tile50,0,-40,-10,-3840,0,0,-0.04,1,1,1|Tile51,0,-91,-10,-4080,0,0,-0.04,1,1,1|Tile52,1,-83,-10,-4200,0,0,-0.04,1,1,1|Tile53,1,-31,-10,-4440,0,0,-0.04,1,1,1|Tile54,0,-34,-10,-4560,0,0,-0.04,1,1,1|Tile55,0,-28,-10,-6000,0,0,0,1,1,1|Tile56,0,-75,-10,-6240,0,0,0,1,1,1|Tile57,1,-92,-10,-6360,0,0,0,1,1,1|Tile58,1,-49,-10,-6600,0,0,0,1,1,1|Tile59,0,-29,-10,-6720,0,0,0,1,1,1|Tile60,0,-66,-10,-6960,0,0,0,1,1,1|Tile61,1,-89,-10,-7080,0,0,0,1,1,1|Goal,2,-89,30,-7090,0,0,0,1,1,1|Player,2,0,30,0,0.0006830667509232767,2.6871999920718737e-7,0.0009958181872055548,1,1,1";
mapData["1"]["4"] = "1~Tile0,0,0,13,0,0,0,0,1,1,1|Tile1,1,0,13,-120,-8.339016326422422e-14,3.924122948179535e-34,-9.411476832695085e-21,1,1,1|Tile2,0,0,13,-238,1.3698912067639651e-13,-6.446349677885885e-34,-9.411476832695085e-21,1,1,1|Tile3,1,0,13,-358,-7.364441088203444e-13,5.848053974832778e-33,-1.588186776101813e-20,1,1,1|Tile4,0,-60,13,-358,-2.015051320247707e-12,4.622626288441468e-33,-4.588097823606017e-21,1,1,1|Tile5,1,-60,13,-478,-3.056810880808225e-12,2.128158865039973e-25,-1.3924046648756266e-13,1,1,1|Tile6,0,-60,13,-598,-4.335417875395153e-12,5.394885111814471e-25,-2.488749766167697e-13,1,1,1|Tile7,1,-60,13,-718,-5.377177002274802e-12,1.0434826810069866e-24,-3.881154295518052e-13,1,1,1|Tile8,0,0,13,-718,-5.836069041226244e-12,9.890887757552623e-25,-3.389571880552805e-13,1,1,1|Tile9,1,0,13,-838,-6.103447608429846e-12,1.0344037193980538e-24,-3.389571880552805e-13,1,1,1|Tile10,0,0,13,-958,-6.370826175633448e-12,1.0797186630408452e-24,-3.389571880552805e-13,1,1,1|Tile11,1,60,13,-958,-6.7862343348934484e-12,3.127245796164427e-20,-9.216439167403223e-9,1,1,1|Tile12,0,60,13,-1078,-7.053612902097051e-12,3.2504706746462297e-20,-9.216470253647913e-9,1,1,1|Tile13,1,60,13,-1198,-7.320991902981522e-12,3.3736965841586043e-20,-9.216501339892602e-9,1,1,1|Tile14,0,60,13,-1318,-7.588370903865993e-12,3.4969233248518836e-20,-9.216532426137292e-9,1,1,1|Tile15,1,0,13,-1318,-7.855749904750464e-12,3.6201508967260676e-20,-9.216563512381981e-9,1,1,1|Tile16,0,-1,48,-538,-0.000011268510206957408,-7.857537080878836e-12,0.000001394600872118175,1,1,1|Tile17,1,-1,48,-1164,-0.000011268510206957408,-7.857537080878836e-12,0.000001394600872118175,1,1,1|Tile18,0,0,13,-1438,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile19,1,0,13,-1558,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile20,0,0,13,-1886,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile21,1,0,13,-2126,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile22,0,0,13,-2306,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile23,1,60,13,-2306,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile24,0,60,13,-2548,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile25,1,0,13,-2726,-0.000002774695076372077,1.6653025519322304e-14,-1.2003499527679785e-8,1,1,1|Tile26,0,-74,13,-2880,-0.000002688432005019022,6.65128415575507e-7,-0.5133994294317872,1,1,1|Tile27,1,-73,12,-3000,-0.0000025159154120073407,6.22447184595364e-7,-0.5133994623885403,1,1,1|Tile28,0,-72,12,-3120,-0.0000023628940653019815,5.845891127440586e-7,-0.5133994623885403,1,1,1|Tile29,1,-71,12,-3238,-0.000002207932539024088,5.462510329772333e-7,-0.5133994623885402,1,1,1|Tile30,0,2,-14,-3354,-1.6161345683940525e-7,1.0311584309547235e-10,-0.0012760802608562656,1,1,1|Tile31,1,2,-14,-3474,-1.704746921404903e-8,1.147330578202497e-12,-0.00013460421218670907,1,1,1|Tile32,0,62,24,-3624,-1.639210900350469e-8,-4.7124767203631436e-9,0.6031889723440547,1,1,1|Tile33,1,60,24,-3814,-3.42913395456892e-8,-9.858227473022467e-9,0.6031889723440546,1,1,1|Tile34,0,59,24,-4014,-6.465060664595511e-8,-1.8586045194750847e-8,0.6031889723440538,1,1,1|Tile35,1,-62,27,-4150,-9.035024817194406e-8,2.5985909021824624e-8,-0.6034806522342421,1,1,1|Tile36,0,-61,29,-4386,-7.287087555596379e-8,2.0958613626984794e-8,-0.6034806522342424,1,1,1|Tile37,1,32,31,-4526,-6.671483276932135e-8,-8.864556147139583e-9,0.26880462114666204,1,1,1|Tile38,0,-40,32,-4720,-7.790927014639288e-8,9.71849848916317e-9,-0.2520211226295307,1,1,1|Tile39,1,12,32,-4942,-7.951898339797489e-8,-3.306960314602719e-9,0.08326980875434409,1,1,1|Tile40,0,-4,32,-5202,-8.19647496541621e-8,5.546240928464378e-12,-0.00013533234637562179,1,1,1|Tile41,1,-4,32,-5322,-2.9091095754552182e-8,6.986479125175368e-13,-0.0000480317358054039,1,1,1|Goal,2,-4,52,-5396,0,0,0,1,1,1|AmiyaBar,2,60,13,-1408,-0.0000010296178061254918,7.454042819705844e-16,-1.4479242249620938e-9,1,1,1|AmiyaBar,2,62,23,-3713,0.000001824798573580766,5.101355766663709e-7,0.5852492442861101,1,1,1|Player,2,0,30,0,0,0,1,1,1";
mapData["1"]["5"] = "1~Tile0,0,0,15,0,0,0,0,1,1,1|Tile1,1,0,15,-120,-5.5748086702500643e-11,2.1377276851561215e-28,-7.669241445232348e-18,1,1,1|Boost2,0,0,15,-240,-6.530994495212994e-11,-6.003944716896674e-22,1.8386004524417743e-11,1,1,1|Boost3,0,0,15,-360,-6.544317171508496e-11,-6.016192256228996e-22,1.8386004524417743e-11,1,1,1|Tile4,0,0,15,-840,5.393876900683381e-9,-7.390219338398049e-25,-2.7402254350527503e-16,1,1,1|Tile5,1,0,15,-960,5.393876900683381e-9,-7.390219338398049e-25,-2.7402254350527503e-16,1,1,1|Boost6,0,55,15,-1095,5.21488807692094e-9,1.3322460982046492e-9,0.5312850058660458,1,1,1|Boost7,0,55,15,-1215,1.0990957832746087e-7,2.807857133695804e-8,0.5312850058660454,1,1,1|Boost8,0,55,15,-1335,1.0990795829002331e-7,2.8078157466416044e-8,0.5312850058660454,1,1,1|Boost9,0,-55,15,-1445,1.0949590034670077e-7,-2.6204682331313556e-8,-0.49556933096235833,1,1,1|Boost10,0,-55,15,-1565,1.0949590034670077e-7,-2.6204682331313556e-8,-0.49556933096235833,1,1,1|Boost11,0,-55,15,-1685,1.0949590034670077e-7,-2.6204682331313556e-8,-0.49556933096235833,1,1,1|Tile12,0,0,15,-1885,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17,1,1,1|Tile13,1,0,15,-2005,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17,1,1,1|Tile14,0,60,15,-2005,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17,1,1,1|Tile15,1,60,15,-1885,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17,1,1,1|Tile16,0,60,35,-2200,-5.09281846916587e-7,2.4693160411434493e-23,-9.697247432217997e-17,1,1,1|Tile17,1,-40,35,-2360,-3.691331471600346e-7,6.426902247144897e-8,-0.35498653077671627,1,1,1|Tile18,0,-40,35,-2480,-2.9765243425572847e-7,5.182366073878887e-8,-0.354986530776717,1,1,1|Tile19,1,-40,35,-2600,-2.976661335196739e-7,5.182604588980857e-8,-0.354986530776717,1,1,1|Tile20,0,50,35,-2745,-2.9588815664283603e-7,-6.119847098010145e-8,0.4248166632558039,1,1,1|Tile21,1,50,35,-2865,-2.90315114170885e-7,-6.004580004571775e-8,0.42481666325580414,1,1,1|Tile22,0,50,35,-2985,-2.902121138959087e-7,-6.002449652546009e-8,0.42481666325580414,1,1,1|Boost23,0,0,15,-3140,1.9215831059682506e-7,4.2767998116309796e-24,4.4513295296442526e-17,1,1,1|Boost24,0,0,25,-3265,0.18408911019563584,1.7174409987441354e-17,1.8761971687584865e-16,1,1,1|Tile25,1,0,15,-3745,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597055e-17,1,1,1|Tile26,0,0,15,-3865,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597055e-17,1,1,1|Tile27,1,0,15,-4160,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597055e-17,1,1,1|Tile28,0,0,35,-4400,1.3707004598018182e-7,-1.5766311013804282e-23,-2.3004750455958795e-16,1,1,1|Tile29,1,0,35,-4520,1.3707004598018182e-7,-1.5766311013804282e-23,-2.3004750455958795e-16,1,1,1|Tile30,0,0,35,-4775,1.3707004598018182e-7,-1.5766311013804282e-23,-2.3004750455958795e-16,1,1,1|Tile31,1,70,35,-4990,1.3535562004562965e-7,2.1341856260520773e-8,0.3204101708773784,1,1,1|Tile32,0,-50,35,-5130,1.3600151760329032e-7,-1.6955970726396943e-8,-0.2518843866170029,1,1,1|Tile33,1,40,15,-5335,1.3649447794250668e-7,1.249439858687556e-8,0.18408779243903808,1,1,1|Tile34,0,-35,15,-5570,0.2515632696155032,-0.01235005429819253,-0.09934168995120227,1,1,1|Tile35,1,50,20,-5770,0.06618122500114358,0.0016522115446724165,0.0499870177426996,1,1,1|Goal,2,15,55,-5850,0,0,0,1,1,1|AmiyaBar,2,0,15,-4065,1.1926395870887073e-8,-1.3279075594982517e-24,-2.226837971628531e-16,1,1,1|AmiyaBar,2,0,15,-4255,1.1926395870887073e-8,-1.3279075594982517e-24,-2.226837971628531e-16,1,1,1|Ball39,0,-20,85,-3795,1.1926395870887065e-8,-1.3279075594982517e-24,-2.226837971628531e-16,1,1,1|Ball40,0,0,45,-1950,-0.0000012455917612900104,-9.205114715631618e-15,1.478030764445748e-8,1,1,1|Player,2,0,30,0,0,0,0,1,1,1";
mapData["1"]["6"] = "1~Tile0,0,0,15,0,0,0,0,1,1,1|Tile1,1,0,15,-120,-3.582001709134808e-11,2.3963126669103365e-29,-1.33797404998399e-18,1,1,1|Tile2,0,0,15,-240,-3.617091001717476e-11,-1.0120156706705179e-22,5.5957434866305e-12,1,1,1|Tile3,1,60,15,-240,-3.619178567948467e-11,-1.0125997449275167e-22,5.5957434866305e-12,1,1,1|Tile4,0,60,15,-360,-3.6015877780126715e-11,-1.0094107272455524e-22,5.605365130390005e-12,1,1,1|Tile5,1,60,15,-480,-3.6015877780126715e-11,-1.0094107272455524e-22,5.605365130390005e-12,1,1,1|Tile6,0,0,15,-480,-3.6115044982354405e-11,-1.0184576150661395e-22,5.640073911378218e-12,1,1,1|Tile7,1,0,15,-600,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12,1,1,1|Tile8,0,0,15,-805,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12,1,1,1|Tile9,1,0,15,-925,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12,1,1,1|Tile10,0,0,15,-1165,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12,1,1,1|Tile11,1,0,15,-1285,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12,1,1,1|Tile12,0,60,25,-1465,-3.6212605830643295e-11,-7.489836891583947e-12,0.42481624573450294,1,1,1|Tile13,1,60,25,-1585,6.579791156369197e-10,1.3608952300303499e-10,0.42481624573450294,1,1,1|Tile14,0,-65,25,-1465,6.554087828014588e-10,-1.355579315238259e-10,-0.42481634208556807,1,1,1|Tile15,1,-65,25,-1585,6.554087828014588e-10,-1.355579315238259e-10,-0.42481634208556807,1,1,1|Death16,0,0,55,-310,5.960274052085879e-9,1.1069305443616937e-25,3.714361234696275e-17,1,1,1|Death17,0,0,15,-700,-0.00021508110678340888,-1.4007303790909064e-14,1.3025136524902445e-10,1,1,1|Death18,0,0,25,-1030,-0.00007785182250378718,1.9912408222638788e-15,-5.115463608262844e-11,1,1,1|Death19,0,0,25,-1385,-1.5427113842874995,-0.0008317439143348806,0.0011998613450025283,1,1,1|Death20,0,0,35,-1695,-1.5427130856910416,-0.0008317419297054659,0.0011998570376325203,1,1,1|Tile21,1,0,15,-1835,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Tile22,0,0,15,-1955,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost23,0,0,15,-2075,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost24,0,0,15,-2195,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost25,0,0,15,-2315,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost26,0,0,15,-2435,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost27,0,0,15,-2555,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost28,0,0,15,-2675,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost29,0,0,15,-2795,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Boost30,0,0,15,-2915,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Tile31,1,0,15,-3035,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Tile32,0,0,15,-3155,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Tile33,1,0,15,-3275,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10,1,1,1|Death34,0,0,15,-2145,5.651452852362427e-7,-2.0978871477591917e-16,-7.424240111575346e-10,1,1,1|Death35,0,0,15,-2385,0.00017632708568692475,-6.844526555353387e-14,-7.763443221620037e-10,1,1,1|Death36,0,0,15,-2655,-0.000017630574803665025,-9.533187219482459e-15,1.0814380502210952e-9,1,1,1|Death37,0,0,25,-2985,-0.00016166351340348781,-3.1531322790592304e-13,3.900858303040877e-9,1,1,1|Tile38,0,70,15,-2920,5.708591377384664e-9,1.6415001898973977e-9,0.6033355531348282,1,1,1|Tile39,1,-70,15,-2910,6.527719165205785e-8,-1.3501252036407009e-8,-0.424816245734503,1,1,1|Goal,2,0,75,-3380,0,0,0,1,1,1|Player,2,0,3,0,0,0,0,1,1,1";
mapData["1"]["7"] = "1~Tile0,0,0,15,0,0,0,0,1,1,1|Tile1,1,0,15,-120,-1.259821375909978e-13,-3.2013324200852946e-34,5.082200510803286e-21,1,1,1|Tile2,0,0,15,-240,-1.365908932184426e-13,3.8565377245755767e-35,-5.64684457902771e-22,1,1,1|Tile3,1,0,15,-360,-2.906921394135037e-13,-1.636375915911866e-33,1.1258480667646498e-20,1,1,1|Tile4,0,0,15,-480,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile5,1,60,15,0,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile6,0,60,15,-120,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile7,1,60,15,-240,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile8,0,60,15,-360,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile9,1,60,15,-480,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile10,0,-60,15,-120,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile11,1,-60,15,-240,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile12,0,-60,15,-360,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile13,1,-60,15,-480,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile14,0,-60,15,-600,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile15,1,-60,15,0,-1.572242602776468e-8,1.7381552660025185e-23,-2.211052242107026e-15,1,1,1|Tile16,0,60,15,-600,-1.572246333125831e-8,1.7381593900011797e-23,-2.211052242107026e-15,1,1,1|Tile17,1,0,15,-600,-1.572246333125831e-8,1.7381593900011797e-23,-2.211052242107026e-15,1,1,1|Tile18,0,0,15,-720,-1.572246333125831e-8,1.7381593900011797e-23,-2.211052242107026e-15,1,1,1|Tile19,1,0,15,-920,-1.572246333125831e-8,1.7381593900011797e-23,-2.211052242107026e-15,1,1,1|Tile20,0,0,15,-1040,-1.572246333125831e-8,1.7381593900011797e-23,-2.211052242107026e-15,1,1,1|Tile21,1,30,15,-1165,-1.570282748275558e-8,-7.848141503139035e-10,0.10012428057796542,1,1,1|Tile22,0,30,15,-1285,-1.570282748275558e-8,-7.848141503139035e-10,0.10012428057796542,1,1,1|Tile23,1,30,15,-1405,-1.570282748275558e-8,-7.848141503139035e-10,0.10012428057796542,1,1,1|Tile24,0,-30,15,-1165,0.0000012750741689163806,-5.311248813444071e-8,-0.08340502518737482,1,1,1|Tile25,1,-30,15,-1285,0.0000012750092537320413,-5.31097841294168e-8,-0.08340502518737482,1,1,1|Tile26,0,-30,15,-1405,0.0000012749933375747827,-5.310912115095244e-8,-0.08340502518737482,1,1,1|Tile27,1,0,5,-1525,-1.5676439701906265e-8,1.2105352055596615e-23,-1.544400678442923e-15,1,1,1|Tile28,0,0,5,-1645,1.796857063141033e-8,-1.3735608438766086e-23,-1.5288482006192827e-15,1,1,1|Tile29,1,0,5,-1765,1.7967554555298193e-8,-1.373473565506199e-23,-1.5288375068283237e-15,1,1,1|Tile30,0,65,5,-1965,0.15041569556705203,-9.850149086547871e-17,-1.3145924871606996e-15,1,1,1|Tile31,1,-5,30,-2125,0.15042122500544358,-1.7844196022086656e-8,-2.381384263117131e-7,1,1,1|Tile32,0,-85,55,-2295,0.15041891981669747,-2.304636366808358e-8,-3.0756825708522154e-7,1,1,1|Tile33,1,0,40,-2525,-0.133620333964143,-1.5326420471956063e-9,2.300775214791904e-8,1,1,1|Tile34,0,0,20,-2640,-0.133620333964143,-1.5326420471956063e-9,2.300775214791904e-8,1,1,1|Tile35,1,0,5,-2755,-0.133620333964143,-1.5326420471956063e-9,2.300775214791904e-8,1,1,1|Tile36,0,0,-5,-2875,0.008688933576914918,8.696725480525331e-12,2.001818710795078e-9,1,1,1|AmiyaBar,2,-90,60,-2390,0.00010039612260282976,8.499394363414733e-11,0.0000016931718391796252,1,1,1|Tile38,0,130,5,-3035,0.00009901961327879226,0.000020480295427930695,0.4248187187460194,1,1,1|Tile39,1,130,5,-3155,0.00009837685518002342,0.0000203473533240911,0.4248187187460193,1,1,1|AmiyaBar,2,130,5,-3245,0.00009864556357197774,0.000020402930467365888,0.42481871874601873,1,1,1|Tile41,1,0,15,-3045,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17,1,1,1|Tile42,0,0,15,-3165,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17,1,1,1|Tile43,1,0,15,-3285,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17,1,1,1|Tile44,0,0,15,-3405,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17,1,1,1|Tile45,1,-70,15,-3590,5.897643262642305e-9,-1.1234727794711057e-9,-0.38978651070077663,1,1,1|Tile46,0,-70,15,-3775,-1.2326758280778455e-7,2.3481883815011026e-8,-0.38978651070077663,1,1,1|Tile47,1,-70,15,-3995,-1.2326839282650334e-7,2.34820381196952e-8,-0.38978651070077663,1,1,1|Tile48,0,-5,15,-3990,-5.858216809429331e-7,-9.236818408983986e-8,0.32041098225895254,1,1,1|Tile49,1,55,20,-4095,-5.184961082705042e-7,6.464317301441146e-8,-0.25188335819601443,1,1,1|Tile50,0,120,25,-4190,-4.58966809446803e-7,-1.0984069370729347e-7,0.49557047847091074,1,1,1|Tile51,1,120,25,-4310,-3.282766840584418e-7,-7.856371738159113e-8,0.49557047847091096,1,1,1|Tile52,0,25,-5,-4420,-6.410196107253711e-8,-1.0141133575133724e-10,0.0031640687200165983,1,1,1|Goal,2,25,35,-4485,0,0,0,1,1,1|Tile54,0,60,5,-3285,9.433268388647724e-9,-1.098052573856508e-9,-0.2348723432657187,1,1,1|Ball56,0,0,40,-60,2.8537445259459756e-16,-2.0359644548416553e-32,-1.4268722629729878e-16,1,1,1|Ball57,0,0,45,-85,-6.266947849553621e-8,6.551959483554456e-24,-2.090957078578894e-16,1,1,1|Ball58,0,0,50,-120,7.180751282476201e-8,-2.531134714823676e-23,-7.04977686944992e-16,1,1,1|Ball59,0,0,55,-145,1.4909799617157666e-8,-9.966036819276346e-24,-1.3368438309268476e-15,1,1,1|Ball60,0,0,60,-170,-7.491630782396903e-8,4.9891145449830466e-24,-1.3319168255611266e-16,1,1,1|Ball61,0,0,65,-200,-2.491954376182574e-7,-1.4651954325170869e-22,1.1759408169917105e-15,1,1,1|Ball62,0,0,70,-220,1.886414366936162e-7,-5.434150973529713e-23,-5.761354523985812e-16,1,1,1|Ball63,0,0,75,-245,2.791436486404599e-7,-3.614389425933606e-22,-2.5896268416187576e-15,1,1,1|Ball64,0,0,80,-275,5.554277322517296e-7,3.694655365120087e-22,1.3303820283304814e-15,1,1,1|Ball65,0,0,85,-315,3.6966770267100333e-7,1.767228314894402e-21,9.56117238333498e-15,1,1,1|Ball66,0,0,90,-345,2.4137921172951115e-7,9.165276246292803e-22,7.59408913520148e-15,1,1,1|Ball67,0,0,95,-375,5.064419497103006e-7,9.370416881268447e-22,3.700490011393801e-15,1,1,1|Ball68,0,0,100,-405,7.198500497907558e-7,-3.574684198645092e-21,-9.931746756659898e-15,1,1,1|Ball69,0,0,105,-435,7.352039688158336e-7,-2.9782071829085408e-21,-8.10171682752393e-15,1,1,1|Ball70,0,0,110,-475,0.0000012749663937942207,-1.9386419545572637e-20,-3.041087143934064e-14,1,1,1|Ball71,0,0,115,-505,0.0000019059243641106779,-4.454259185763708e-20,-4.6741195712084876e-14,1,1,1|Ball72,0,0,120,-540,0.000002105189423674992,-6.644395161947729e-20,-6.31239648767913e-14,1,1,1|Ball73,0,0,125,-570,0.000002052322088276545,1.696434081827742e-20,1.6531850351554983e-14,1,1,1|Ball74,0,0,130,-595,0.000001974580300158242,9.471353875559798e-20,9.593283063552214e-14,1,1,1|Ball75,0,0,135,-620,0.0000017770189515440763,1.2410887183576032e-19,1.3968210268999748e-13,1,1,1|Ball76,0,-40,45,-615,0.0000018150722098663168,1.6133166297951822e-19,1.7776886462438773e-13,1,1,1|Ball77,0,-45,50,-585,0.0000017269006775686136,-1.2953738584611038e-15,-1.5002297182320488e-9,1,1,1|Ball78,0,-40,55,-565,0.000001489807345934065,2.6423076544407963e-14,3.547180327245771e-8,1,1,1|Ball79,0,-40,60,-525,0.0000014481648804581311,-1.6544615646103493e-14,-2.2849077296882576e-8,1,1,1|Ball80,0,-45,65,-490,0.0000012127226227679116,1.005450217272934e-14,1.6581701345330667e-8,1,1,1|Ball81,0,-40,70,-455,9.407114589522758e-7,9.572411226819504e-15,2.035142898648701e-8,1,1,1|Ball82,0,-45,75,-420,2.7732596663554776e-7,8.860134562304104e-15,6.389689843899762e-8,1,1,1|Ball83,0,-45,80,-390,8.727377007745614e-7,-1.0876233852717936e-15,-2.49244047623165e-9,1,1,1|Ball84,0,-40,85,-355,0.0000012115607432863962,9.085417180119739e-15,1.4997873165611967e-8,1,1,1|Ball85,0,-40,90,-320,0.000001834311547100816,-4.36384203145886e-14,-4.758016203254558e-8,1,1,1|Ball86,0,-45,95,-290,0.0000016984048443199734,-6.536251621839483e-14,-7.696930026668277e-8,1,1,1|Ball87,0,-45,100,-255,0.0000016510269915678004,-4.2915742477189716e-14,-5.1986724258767956e-8,1,1,1|Ball88,0,-40,105,-215,0.0000013568812846646851,-5.535591025535427e-15,-8.159285691533569e-9,1,1,1|Ball89,0,-45,110,-180,0.0000013603350907946708,2.636537196332725e-14,3.876305498806689e-8,1,1,1|Ball90,0,-40,115,-140,0.0000014417249758485461,3.0006789974899506e-14,4.162623312709004e-8,1,1,1|Ball91,0,-45,120,-110,0.0000015818103520366328,6.990599214596145e-14,8.838732412641561e-8,1,1,1|Ball92,0,-40,125,-65,0.0000014928310747569497,2.4384386624789448e-14,3.2668648231037884e-8,1,1,1|Ball93,0,50,45,-620,0.0000014361612556972818,-3.595175334085795e-14,-5.006645764638053e-8,1,1,1|Ball94,0,50,50,-580,0.000001006722186503054,-5.1242719693420733e-14,-1.0180111331692405e-7,1,1,1|Ball95,0,50,55,-525,0.000001551700279379188,-1.0681470651343657e-13,-1.3767440520950956e-7,1,1,1|Ball96,0,50,60,-470,0.0000014383813322643125,-1.1112149916930198e-13,-1.5450909529590783e-7,1,1,1|Ball97,0,50,65,-430,0.0000011600607194853059,-1.0689071333386246e-13,-1.8428468706588422e-7,1,1,1|Ball98,0,50,70,-390,5.623375614050316e-7,-3.109473547851248e-14,-1.1059099591648215e-7,1,1,1|Ball99,0,45,75,-355,5.716799478250633e-7,-3.574943752606729e-14,-1.250680128350726e-7,1,1,1|Ball100,0,50,80,-315,9.321088896287152e-7,-6.929385648429771e-14,-1.4868189168737503e-7,1,1,1|Ball101,0,45,85,-275,0.000001099539417737327,-9.596656610160991e-14,-1.7455775491726034e-7,1,1,1|Ball102,0,45,90,-235,9.61212663242043e-7,-7.239705146851568e-14,-1.5063690739225475e-7,1,1,1|Ball103,0,50,95,-195,7.805659265614733e-7,-6.837028195345652e-14,-1.7518131301130864e-7,1,1,1|Ball104,0,50,100,-155,6.125200684437389e-7,-7.301775577850559e-14,-2.3841751328746114e-7,1,1,1|Ball105,0,45,105,-115,5.878648039470472e-7,-7.729654551156987e-14,-2.629738844461856e-7,1,1,1|Ball106,0,50,110,-75,6.457974564000772e-7,-8.203986720246668e-14,-2.5407305770386577e-7,1,1,1|Player,2,0,30,0,0,0,0,1,1,1";
mapData["1"]["8"] = "1~Tile0,0,0,1.5,0,0,0,0|Boost1,0,0,1.5,-12,-1.353936340819932e-7,-1.120240630749123e-24,1.6547906972800476e-17|Tile2,0,0,1.5,-24,-2.405500083568791e-7,1.6489774712657466e-19,-1.3710059563326604e-12|Tile3,1,2,1.5,-37,-2.3784875224919458e-7,-3.5543672253602067e-8,0.30320296772928174|Boost4,0,4.5,3.5,-49.5,-0.0002486544279393762,-0.00010440947469567038,0.9140731034325231|Boost5,0,5.5,4,-62,-0.0011510174003372892,-0.0006259621289923881,1.21153075890787|Tile6,0,0,1.5,-103.5,-0.0014700818048369402,1.771370217553741e-20,-2.4098942654137812e-17|AmiyaBar,0,0,1.5,-112.5,-0.004240922769262616,1.2807989297060022e-15,-6.04020793885246e-13|Tile8,0,0,1.5,-121.5,-0.004240922769262616,1.2807989297060022e-15,-6.04020793885246e-13|Boost9,0,-4,2,-134.5,-0.004040911149347675,0.0012262935435505787,-0.6396317651739531|Boost10,0,-4.5,2.5,-146.5,-0.0038490930619965104,0.0016162206805610422,-0.914071741009715|Boost11,0,-5.5,3.5,-158.5,-0.003577783420407143,0.0019206274507709577,-1.1949647357705266|Tile12,0,0,1.5,-191.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|Tile13,1,0,1.5,-203.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|Tile14,0,0,1.5,-215.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|AmiyaBar,0,0,1.5,-224.5,-0.0017560354611395664,-0.0000010636915872270613,0.0012114702893327146|Boost16,0,10,3.5,-244.5,0.1164098944773129,0.05473657139458295,1.0373945004559755|Boost17,0,9.5,3.5,-257,0.12270370721067561,0.0525455980030839,0.936227848150127|Tile18,0,-0.5,2,-275.5,0.07778359743313903,-0.0002680174243307627,-0.006898338202641456|Boost19,0,-7,5.5,-290,0.10341336929414888,-0.04520706485648329,-0.9571447308488146|Boost20,0,-8,6,-303.5,0.03963772102244471,-0.01740267868444698,-0.9604307063499891|Goal,0,1.5,7,-329.5,0,0,0|Player,0,-2.5788118307445984e-8,7.749213218688965,-276.0594482421875,-0.002187702547412279,-1.9879210269982452e-11,-2.120906759261733e-14|Ball23,0,0,4.5,-112,-0.0014797605852212411,-6.000517905879109e-19,8.1101228883716e-16|Ball24,0,0,5,-207.5,-0.0014804843400698245,-1.7971659306504517e-19,2.4278089791610264e-16";

mapData["2"]["1"] = "2~Tile0,0,0,-5,0,0,0,0,1,1,1|Tile1,1,0,-5,-120,0,0,0,1,1,1|Tile2,0,0,-5,-240,0,0,0,1,1,1|Tile3,1,0,-5,-565,0,0,0,1,1,1|Tile4,0,0,-5,-685,0,0,0,1,1,1|Tile5,1,0,-5,-805,0,0,0,1,1,1|Tile6,0,0,-5,-1120,0,0,0,1,1,1|Tile7,1,0,-5,-1240,0,0,0,1,1,1|Tile8,0,0,-5,-1360,0,0,0,1,1,1|Tile9,1,0,-5,-1720,0,0,0,1,1,1|Tile10,0,0,-5,-1840,0,0,0,1,1,1|Tile11,1,0,-5,-1960,0,0,0,1,1,1|Tile12,0,0,-5,-2320,0,0,0,1,1,1|Tile13,1,0,-5,-2440,0,0,0,1,1,1|Tile14,0,0,-5,-2800,0,0,0,1,1,1|Tile15,1,0,-5,-2920,0,0,0,1,1,1|Tile16,0,0,-5,-3280,0,0,0,1,1,1|Tile17,1,0,-5,-3400,0,0,0,1,1,1|Tile18,0,0,-5,-3755,0,0,0,1,1,1|Tile19,1,0,-5,-3875,0,0,0,1,1,1|Tile21,0,0,-7,-4173,0,0,0,1,1,1|Tile22,1,0,-7,-4293,0,0,0,1,1,1|Tile23,0,0,-7,-4593,0,0,0,1,1,1|Tile24,1,0,-7,-4713,0,0,0,1,1,1|Tile25,0,0,-7,-4953,0,0,0,1,1,1|Tile26,1,0,-7,-5073,0,0,0,1,1,1|Goal,2,0,60,-5160,0,0,0,1,1,1|Player,2,0,30,0,0.0014469299718390324,2.3201169441341508e-7,0.0007291311225136898,1,1,1";
mapData["2"]["2"] = "2~Tile0,0,0,-7,0,0,0,0,1,1,1|Tile1,1,0,-7,-120,0,0,0,1,1,1|Tile2,0,0,-7,-240,0,0,0,1,1,1|Tile3,1,67,20,-373,0,0,0.2518843866170029,1,1,1|Tile4,0,67,20,-493,0,0,0.2518843866170029,1,1,1|Tile5,1,67,20,-613,0,0,0.2518843866170029,1,1,1|Tile6,0,67,20,-733,0,0,0.2518843866170029,1,1,1|Tile7,1,-67,20,-560,0,0,-0.8775988383552435,2,1,2|Tile8,0,-33,60,-827,0,0,0.25188383403256265,1,1,1|Tile9,1,-33,60,-947,0,0,0.25188383403256265,1,1,1|Tile10,0,-33,60,-1067,0,0,0.25188383403256265,1,1,1|Tile11,1,33,20,-920,0,0,-0.18408911019563584,1,1,1|Tile12,0,120,20,-1200,0,0,0.477795121409672,1,1,1|Tile13,1,33,20,-1340,0,0,-0.2860473646922834,1,1,1|Tile14,0,107,20,-1553,0,0,0.40727243861724816,1,1,1|Tile15,1,-87,53,-1287,0,0,0.016667187584638896,1.5,1,1.5|Tile16,0,-87,53,-1467,0,0,0.016667187584638896,1.5,1,1.5|Tile17,1,13,20,-1853,7.925549105891602e-9,9.660037074502466e-16,2.437695343360272e-7,1.5,1,1.5|Tile18,0,13,20,-2100,7.925549105891602e-9,9.660037074502466e-16,2.437695343360272e-7,1.25,1,1.25|Tile19,1,13,33,-2300,7.925549105891602e-9,9.660037074502466e-16,2.437695343360272e-7,1,1,1|Tile20,0,13,47,-2500,7.925549105891602e-9,9.660037074502466e-16,2.437695343360272e-7,1,1,1|Tile21,1,-47,20,-2780,0.14208129527031985,-0.04622046165704818,-0.6922140949549566,2,1,2|Tile22,0,87,20,-3027,0.2524697954406028,0.04209942761822361,0.3429491408129501,2,1,2|Tile23,1,-13,27,-3273,0.3888540356348934,-0.04649178047649906,-0.24692290575751577,1.5,1,1.5|Tile25,0,87,33,-3553,0,0,0,1,1,1|Tile26,1,87,33,-3673,0,0,0,1,1,1|Tile27,0,53,33,-3793,0,0,0,1,1,1|AmiyaBar,2,53,33,-3893,0,0,0,1.25,1,1.25|Tile29,0,13,-7,-4067,0,0,0,1,1,1|Tile30,1,13,-7,-4187,0,0,0,1,1,1|Tile31,0,13,-7,-4307,0,0,0,1,1,1|Tile32,1,67,-7,-4427,0,0,0,1,1,1|Tile33,0,107,-7,-4547,0,0,0,1,1,1|Tile34,1,107,-7,-4667,0,0,0,1,1,1|Tile35,0,107,-7,-4787,0,0,0,1,1,1|Tile36,1,-33,0,-5007,0,0,-0.2518843866170029,1,1,1|Tile37,0,-33,0,-5127,0,0,-0.2518843866170029,1,1,1|Tile38,1,-33,0,-5247,0,0,-0.2518843866170029,1,1,1|Tile39,0,40,0,-5380,0,0,-1.397014841586502e-7,1,1,1|Tile40,1,40,0,-5500,0,0,-1.397014841586502e-7,1,1,1|Goal,2,13,53,-5593,0,0,0,1,1,1|Player,2,0,30,0,-0.0007884468651357211,2.1805366565550615e-7,-0.000649861683673781,1,1,1";

mapData["3"]["1"] = "3~Tile0,0,0,-7,-87,0,0,0,2,1,2|Tile1,1,0,-7,-327,0,0,0,2,1,2|Tile2,0,0,-7,-553,0,0,0,1.75,1,1.75|Boost3,1,0,-7,-487,0.2689417246907878,0,0,1,1,1|Tile4,0,87,-7,-600,0,0,0,1,1,1|Tile5,1,-87,-7,-600,0,0,0,1,1,1|Tile6,0,87,-7,-720,0,0,0,1,1,1|Tile7,1,-87,-7,-720,0,0,0,1,1,1|Tile8,0,87,-7,-840,0,0,0,1,1,1|Tile9,1,-87,-7,-840,0,0,0,1,1,1|Tile10,0,0,-7,-1027,0,0,0,2,1,2|Ball11,1,0,6,-607,-0.00046147707668390447,1.0116374377938198e-9,-2.6961235782219157e-11,1.75,1.75,1.75|Tile12,0,-60,-7,-1207,0,0,0,1,1,1|Tile13,1,60,-7,-1407,0,0,0,1,1,1|Tile14,0,60,-7,-1527,0,0,0,1,1,1|Death15,1,60,-7,-1600,0,0,0,1,1,1|Tile16,0,-13,7,-1587,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1,1,1|Tile17,1,-13,7,-1707,-6.7132779335565845e-9,1.2788496765373548e-9,-0.38978727384780376,1,1,1|Tile18,0,-13,7,-1827,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1,1,1|Tile19,1,-13,7,-1947,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1,1,1|Tile20,0,-13,7,-2067,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1,1,1|Tile21,1,-13,7,-2187,-6.7132779335565845e-9,1.2788496765373548e-9,-0.38978727384780376,1,1,1|Tile22,0,-13,7,-2307,-6.7132779335565845e-9,1.2788496765373548e-9,-0.38978727384780376,1,1,1|Tile23,1,-13,7,-2440,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1.25,1,1.25|Tile24,0,-13,7,-2607,-6.7132779335565845e-9,1.2788496765373548e-9,-0.38978727384780376,1.5,1,1.5|Tile25,1,-13,7,-2807,-6.713278377645793e-9,1.2788498611700215e-9,-0.3897873056456001,1.75,1,1.75|Tile26,0,100,-7,-3120,0,0,1.0043652919590027,1.5,1,1.5|Tile27,1,100,-7,-3300,0,0,1.0043652919590027,1.5,1,1.5|Tile28,0,100,-7,-3480,0,0,1.0043653639071428,1.5,1,1.5|Tile29,1,100,-7,-3660,0,0,1.0043652919590027,1.5,1,1.5|Tile30,0,-20,-7,-3820,0,0,-1.0399812173872296,2,1,2|Tile31,1,-20,-7,-4060,0,0,-1.0399812173872296,2,1,2|Tile32,0,53,-7,-4333,0,0,1.0043661553366825,2,1,2|Tile33,1,53,-7,-4573,0,0,1.0043661553366825,2,1,2|AmiyaBar,0,-53,-7,-4793,0,0,-0.5390137504074328,2,1,2|AmiyaBar,0,-53,-7,-4913,0,0,-0.5390137504074328,2,1,2|AmiyaBar,0,-53,-7,-5033,0,0,-0.5390137504074328,2,1,2|Tile37,1,80,-7,-5387,0,0,1.0500457369614373,2,1,2|Tile38,0,-47,-7,-5640,0,0,-1.0298883331291473,2,1,2|Tile39,1,120,-7,-5947,0,0,0.97868339038555,2,1,2|Tile40,0,-40,-7,-6167,0,0,-0.4148308156984788,2,1,2|Tile41,1,-40,-7,-6407,0,0,-0.4148308156984788,2,1,2|Tile42,0,-40,-7,-6647,0,0,-0.4148308156984788,2,1,2|Tile43,1,73,27,-6893,0,0,0.649984326053891,2,1,2|Tile44,0,73,27,-7133,0,0,0.649984326053891,2,1,2|Boost46,1,-7,-60,-5113,0.6214637722604734,0,0,2,1,2|Tile47,0,-7,13,-7407,-0.00000826061932466773,0.000005877637847180848,-1.5796052657617776,1.5,1,1.5|Goal,0,0,100,-7753,0,0,0,1.5,1,1.5|Player,0,0,30,0,0.00043402095847297684,-1.4942541644857266e-10,-0.000003457352174149662,1,1,1";
const COLOUR_BLANK = new THREE.Color(0xffffff);

const COLOUR_MAIN = new THREE.Color(0xc0bdf2);
const COLOUR_SECONDARY = new THREE.Color(0xffbef4);
const COLOUR_MAIN_WORLD2 = new THREE.Color(0xa2daff);
const COLOUR_SECONDARY_WORLD2 = new THREE.Color(0x8dbede);
const COLOUR_MAIN_WORLD3 = new THREE.Color(0xffffff);
const COLOUR_SECONDARY_WORLD3 = new THREE.Color(0xe6f5ff);

const TEXTURE_TILE_MAIN = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile1.png');
TEXTURE_TILE_MAIN.wrapS = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.wrapT = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.repeat.set(2, 2);
const TEXTURE_GHOST_TILE = new THREE.TextureLoader().load('../images/amiyaroad/tiles/GhostTile.png');
TEXTURE_GHOST_TILE.wrapS = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.wrapT = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.repeat.set(2, 2);
const TEXTURE_AMIYABAR = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile2.png');
const TEXTURE_GOAL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile3.png');
const TEXTURE_BOOST = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile4.png');
const TEXTURE_DEATH = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile5.png');
const TEXTURE_BALL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile6.png');

let currentWorld;
let currentLevel;
let inEditor;
let inPlaytest;


const colourMap = {
    "1": [COLOUR_MAIN, COLOUR_SECONDARY, COLOUR_BLANK],
    "2": [COLOUR_MAIN_WORLD2, COLOUR_SECONDARY_WORLD2, COLOUR_BLANK],
    "3": [COLOUR_MAIN_WORLD3, COLOUR_SECONDARY_WORLD3, COLOUR_BLANK]
};
const tileTypes = ["Tile", "AmiyaBar", "Goal", "Boost", "Death", "Ball"];

let pos;
let quad;
let scale;
let scene;
let physicsWorld;
let rigidBodies;
let allObjects;
const margin = 0.05;
const TEXTURE_PLAYER = new THREE.TextureLoader().load('../images/amiyaroad/Amiya.png');

TEXTURE_PLAYER.wrapS = THREE.RepeatWrapping;
TEXTURE_PLAYER.wrapT = THREE.RepeatWrapping;
TEXTURE_PLAYER.repeat.set(1, 1);

const TILE_WIDTH = 60;
const TILE_HEIGHT = 20;
const TILE_DEPTH = 100;
const AMIYABAR_WIDTH = 60;
const AMIYABAR_HEIGHT = 20;
const AMIYABAR_DEPTH = 100;

const DEATH_WIDTH = 100;
const DEATH_HEIGHT = 100;
const DEATH_DEPTH = 20;
const GOAL_WIDTH = 120;
const GOAL_HEIGHT = 120;
const GOAL_DEPTH = 40;
const playerRadius = 8;
const BALL_RADIUS = 2;
const BALL_MASS = 2;

const DEATH_MARGIN = 0.5;
let seed;
let xFriction = 0.25;
let physicsFriction = 0.2;
let rollingFriciton = 0;
let ghostTile;

let lastTileSelection = 0;
const reader = new FileReader();

reader.addEventListener("load", function () {
    // convert image file to base64 string
    var $levelImage = $('.hud--level_export');
    $levelImage.html('<img src="' + reader.result + '" width="130" height="auto">');
}, false);

class MapGenerator {
    constructor(scene, physicsWorld) {
        this.scene = scene;
        this.physicsWorld = physicsWorld;
        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.rigidBodies = [];
        this.allObjects = [];
        this.levelString = "";
    }

    initMap(currentWorld, currentLevel, inEditor, inPlayTest, seed, levelString = "") {
        this.seed = seed;
        this.lastTileSelection = 0;
        console.log(seed);
        console.log("levelString", levelString);
        Math.seedrandom(seed);
        if (inEditor) {
            console.log("In editor");
            if (levelString.indexOf("~") >= 0) {

                let parts = levelString.split("~");
                this.currentWorld = parts[0];
            } else {
                this.currentWorld = $('.hud--worldSelect').val();
            }

        } else {
            this.currentWorld = currentWorld;
        }
        this.currentLevel = currentLevel;
        this.inEditor = inEditor;
        this.inPlayTest = inPlayTest;

        console.log("World", this.currentWorld);
        console.log("Level", this.currentLevel);

        if (inEditor) {
            this.xFriction = 0;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "1") {
            this.xFriction = 0.15;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "2") {
            this.xFriction = 0.4;
            this.physicsFriction = 0.4;
            this.rollingFriciton = 0;
        } else if (this.currentWorld == "3") {
            this.xFriction = 0.05;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
        } else {
            this.xFriction = 0.15;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;

        }

        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.scale = new THREE.Vector3(1, 1, 1);
        this.rigidBodies = [];
        this.allObjects = [];

        if (inEditor) {
            console.log("Editor");
            this.levelString = levelString;
            this.createMapBuilder();
        } else if (inPlayTest) {
            console.log("Playtest");
            this.loadMapFromLevelString(this.levelString);
        } else if (this.currentLevel == "?") {
            console.log("Random Map");
            this.levelString = "";
            this.createMapRandomChaos();
        } else {
            console.log("Level");
            this.levelString = mapData[this.currentWorld][this.currentLevel];

            this.loadMapFromLevelString(this.levelString);
        }


        return this.rigidBodies;

    }

    getColourIndex(colourSelection, hexCode) {
        for (let i = 0; i < colourSelection.length; i++) {
            if (colourSelection[i].getHexString() == hexCode) {
                return i;
            }
        }
        return 0;
    }
    generateLevelString(world) {
        let newLevelString = world + "~";
        let colourSelection = colourMap[world];


        for (let i = 0; i < this.allObjects.length; i++) {
            let object = this.allObjects[i];
            let materialInfo = this.getColourIndex(colourSelection, object.material.color.getHexString());
            let pos = object.position;
            let rotation = object.quaternion;
            console.log(rotation);
            let scale = object.scale;
            if (object.name.indexOf("Player") >= 0) {
                rotation.set(0, 0, 0, 1);
            }
            if (object.name.indexOf("GhostTile") < 0) {
                newLevelString += object.name + "," + materialInfo + "," + Math.round(pos.x) + "," + Math.round(pos.y) + "," + Math.round(pos.z) + "," + rotation.x + "," + rotation.y + "," + rotation.z + "," + scale.x + "," + scale.y + "," + scale.z + "|";
            }


        }

        this.levelString = newLevelString.slice(0, -1);
        console.log(this.levelString);
        $('#levelSelect').val(this.levelString);

        //this.updateMapImage(colourSelection);

        return this.levelString;
    }

    updateMapImage(colourSelection) {
        var currentWorld = this.currentWorld;
        let base_image = new Image();
        base_image.src = './images/amiyaroad/AmiyaRoadsCustomLevelTemplate.png';
        base_image.width = 130;
        base_image.height = 130;

        var worldObjects = this.allObjects;
        var getColourIndex = this.getColourIndex;
        var getTileIndexFromName = this.getTileIndexFromName;

        var canvas = document.createElement("canvas");
        var ctx = canvas.getContext("2d");

        canvas.width = 600;
        canvas.height = 600;

        base_image.onload = function () {
            ctx.drawImage(base_image, 0, 0);

            $('.hud--level_export').html("");
            $('.hud--level_export').append(base_image);

            exportLevelImage();
        }

        var toRBGRange = function (value) {
            return (value / 255) * 255;
        }
        var fromRBGRange = function (rbgValue) {
            return rbgValue / 255;
        }
        var drawTileData = function (data, object, imagePos) {
            var tileTypeIndex = getTileIndexFromName(object.name);
            let materialInfo = getColourIndex(colourSelection, object.material.color.getHexString());
            let pos = object.position;
            let rotation = new THREE.Euler().setFromQuaternion(object.quaternion, "XYZ");
            let scale = object.scale;
            console.log(pos.x, pos.y, pos.z);
            //rbga values, 3 pixels in a row for our position

            let stringValue = pos.x;
            data[imagePos] = 0;
            /*
            data[imagePos + 1] = toRBGRange(128 + pos.y);
            data[imagePos + 2] = toRBGRange(128 + pos.z);
            //first pixels alpha value will be our material index
            data[imagePos + 3] = materialInfo;
            console.log(data[imagePos], data[imagePos + 1], data[imagePos + 2]);
            console.log(fromRBGRange(data[imagePos]), fromRBGRange(data[imagePos + 1]), fromRBGRange(data[imagePos + 2]));

            //rotation
            data[imagePos + 4] = toRBGRange(128 + rotation.x);
            data[imagePos + 5] = toRBGRange(128 + rotation.y);
            data[imagePos + 6] = toRBGRange(128 + rotation.z);
            //second pixel alpha will be our current world
            data[imagePos + 7] = currentWorld;

            //scale
            data[imagePos + 8] = toRBGRange(scale.x);
            data[imagePos + 9] = toRBGRange(scale.y);
            data[imagePos + 10] = toRBGRange(scale.z);
            //tile type index
            data[imagePos + 11] = tileTypeIndex;
            */
            return 12;
        }

        function exportLevelImage() {
            console.log("exportLevelImage");
            // get the imageData and pixel array from the canvas
            let imgData = ctx.getImageData(0, 0, 600, 600);
            let data = imgData.data;
            let imagePos = 0;
            for (let i = 0; i < worldObjects.length; i++) {

                imagePos += drawTileData(data, worldObjects[i], imagePos);

            }
            console.log(data);
            // put the modified pixels back on the canvas
            ctx.putImageData(imgData, 0, 0);

            // create a new img object
            var image = new Image();
            image.width = 130;
            image.height = 130;
            // set the img.src to the canvas data url
            image.src = canvas.toDataURL();
            // append the new img object to the page
            $('.hud--level_export').html("");
            $('.hud--level_export').append(image);
        }
    }

    loadMapFromLevelString(levelString = "") {
        this.rigidBodies = [];
        this.allObjects = [];
        if (levelString.indexOf("~") < 0) {
            return;
        }
        let parts = levelString.split("~");

        let mapTiles = parts[1].split("|");
        if (!this.inEditor) {
            this.currentWorld = parts[0];
        }
        let colourSelection = colourMap[this.currentWorld];

        for (let i = 0; i < mapTiles.length; i++) {
            const tile = mapTiles[i].split(",");
            let tileType = tile[0];
            let colourIndex = parseInt(tile[1]);
            let materialHex = colourSelection[colourIndex];
            this.pos.set(parseFloat(tile[2]), parseFloat(tile[3]), parseFloat(tile[4]));
            this.quat.set(parseFloat(tile[5]), parseFloat(tile[6]), parseFloat(tile[7]), 1);
            
            if (tile.length > 10) {
                this.scale = new THREE.Vector3(parseFloat(tile[8]), parseFloat(tile[9]), parseFloat(tile[10]));
            } else {
                this.scale = new THREE.Vector3(1, 1, 1);
            }
            if (tileType.indexOf("GhostTile") >= 0) {
                continue;
            }
            let newTile;
            if (tileType.indexOf("Tile") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Tile" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("AmiyaBar") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_AMIYABAR });
                newTile = this.createAmiyaBarWithPhysics("AmiyaBar", AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Goal") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_GOAL });
                newTile = this.createGoalWithPhysics("Goal", GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Boost") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Boost" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Death") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Death" + i, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Ball") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
                newTile = this.createBallWithPhysics("Ball" + i, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
            }
            if (newTile) {
                newTile.scale.x = this.scale.x;
                newTile.scale.y = this.scale.y;
                newTile.scale.z = this.scale.z;
            }

        }
        this.updateMapImage(colourSelection);
    }


    v3(x, y, z) {
        return new THREE.Vector3(x, y, z);
    }

    createPlayer() {
        this.pos.set(0, 3, 0);
        this.scale.set(1, 1, 1);
        this.quat.setFromEuler(new THREE.Euler(0, 0, 0, 'XYZ'));
        const playerMaterial = new THREE.MeshPhongMaterial({ map: TEXTURE_PLAYER, name: "Player", shininess: 30, specular: 0xd4aae7 });

        let body = this.createPlayerWithPhysics(playerRadius, 4, this.pos, this.quat, this.scale, playerMaterial);

        return body;

    }
    createPlayerWithPhysics(radius, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.SphereGeometry(radius, 32, 32), material);
        //use x scaling for all directions for ball, never be squished
        object.scale.set(scale.x, scale.x, scale.x);
        const shape = new Ammo.btSphereShape(radius);
        shape.setMargin(margin);
        object.name = "Player";
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createBallWithPhysics(name, radius, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.SphereGeometry(radius, 32, 32), material);
        //use x scaling for all directions for ball, never be squished
        object.scale.set(scale.x, scale.x, scale.x);
        const shape = new Ammo.btSphereShape(radius * scale.x);
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass * scale.x, pos, quat, scale);

        return object;

    }
    createTileWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createDeathWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createAmiyaBarWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createGoalWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz), material);
        object.scale.set(scale.x, scale.y, scale.z);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = false;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;
    }

    createRigidBody(object, physicsShape, mass, pos, quat, scale) {

        if (pos) {

            object.position.copy(pos);

        } else {

            pos = object.position;

        }

        if (quat) {

            object.quaternion.copy(quat);

        } else {

            quat = object.quaternion;

        }

        const transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        const motionState = new Ammo.btDefaultMotionState(transform);

        const localInertia = new Ammo.btVector3(0, 0, 0);
        physicsShape.calculateLocalInertia(mass, localInertia);

        const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);
        const body = new Ammo.btRigidBody(rbInfo);

        body.setFriction(this.physicsFriction);
        body.setRollingFriction(this.rollingFriction);

        //body.setDamping(50);
        // if (vel) {

        //     body.setLinearVelocity(new Ammo.btVector3(vel.x, vel.y, vel.z));

        // }

        // if (angVel) {

        //     body.setAngularVelocity(new Ammo.btVector3(angVel.x, angVel.y, angVel.z));

        // }

        object.userData.physicsBody = body;
        object.userData.collided = false;

        this.scene.add(object);


        if (mass > 0) {
            if (object.name.indexOf("GhostTile") < 0) {
                this.rigidBodies.push(object);
            }

            // Disable deactivation
            body.setActivationState(4);

        }
        body.name = object.name;
        body.scale = new Vector3(scale.x, scale.y, scale.z);
        if (object.name.indexOf("GhostTile") < 0) {
            this.allObjects.push(object);
            this.physicsWorld.addRigidBody(body);
        }

        return body;

    }


    createColour(i) {
        if (i % 2 == 0) {

            return colourMap[this.currentWorld][0];
        }
        return colourMap[this.currentWorld][1];

    }
    clear() {
        console.log("clear");
        for (let i = 0; i < this.rigidBodies.length; i++) {
            this.physicsWorld.removeRigidBody(this.rigidBodies[i]);
        }
        for (let i = 0; i < this.allObjects.length; i++) {
            this.physicsWorld.removeRigidBody(this.allObjects[i].body);
        }
        this.allObjects = [];
        this.rigidBodies = [];

    }

    createMapRandomChaos() {

        const length = 80 + Math.round(Math.random() * 100);
        let x = 0;
        let y = 0;
        let z = TILE_DEPTH;
        let zTilt = 0;
        let xTilt = 0;
        let tileType = 1;
        let xAlgo;
        let yAlgo;
        let zTiltAlgo;
        let xTiltAlgo;
        let randomSwitchupRate = 5 + Math.round(Math.random() * 10);
        let verticalRangeRate;
        let randomSkipRate;
        let randomBoostRate;
        let randomAmiyaBarRate;

        let randomTiltRate;
        let tiltRangeRate;

        let buckoRate;

        let tileScale = 1;
        for (let i = 0; i < length; i++) {
            tileType = 1;
            x = 0;
            y = 0;
            zTilt = 0;
            xTilt = 0;
            if (i == 0 || (i % randomSwitchupRate == 0)) {
                xAlgo = Math.round(Math.random() * 10);
                yAlgo = Math.round(Math.random() * 10);
                verticalRangeRate = Math.random() * 0.5;
                randomSkipRate = 2 + Math.round(Math.random() * 6);
                randomBoostRate = 1 + Math.round(Math.random() * 20);
                randomAmiyaBarRate = 20 + Math.round(Math.random() * 15);
                randomTiltRate = 1 + Math.round(Math.random() * 10);
                xTiltAlgo = Math.round(Math.random() * 6);
                zTiltAlgo = Math.round(Math.random() * 6);
                tiltRangeRate = Math.random() * 0.1;
                buckoRate = Math.round(Math.random() * 20);
            }
            if (i > 2) {

                switch (xAlgo) {
                    case 0:
                        x = Math.sin(i);
                        break;
                    case 1:
                        x = Math.cos(i);
                        break;
                    case 2:
                        x = Math.sin(i) + Math.cos(i);
                        break;
                    case 3:
                        x = Math.sin(i) * 2.0;
                        break;
                    case 4:
                        x = Math.cos(i) * 2.0;
                        break;
                    case 5:
                        x = (Math.sin(i) + Math.cos(i)) * 2.0;
                        break;
                    case 6:
                        x = 3.5;
                        break;
                    case 7:
                        x = -3.5;
                        break;
                    case 8:
                        x = 1.5;
                        break;
                    case 9:
                        x = -1.5;
                        break;
                    case 10:
                        x = 0;
                        break;
                }
                switch (yAlgo) {
                    case 0:
                        y = Math.sin(i) * verticalRangeRate;
                        break;
                    case 1:
                        y = Math.cos(i) * verticalRangeRate;
                        break;
                    case 2:
                        y = (Math.sin(i) + Math.cos(i)) * verticalRangeRate;
                        break;
                    case 3:
                        y = Math.sin(i) * 2.0 * verticalRangeRate;
                        break;
                    case 4:
                        y = Math.cos(i) * 2.0 * verticalRangeRate;
                        break;
                    case 5:
                        y = (Math.sin(i) + Math.cos(i)) * 2.0 * verticalRangeRate;
                        break;
                    case 6:
                        y = 2.5;
                        break;
                    case 7:
                        y = 0;
                        break;
                    case 8:
                        y = 1.5;
                        break;
                    case 9:
                        y = -1.5;
                        break;
                }
                if (i % randomTiltRate == 0) {
                    switch (zTiltAlgo) {
                        case 0:
                            zTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            zTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            zTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            zTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            zTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            zTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                    switch (xTiltAlgo) {
                        case 0:
                            xTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            xTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            xTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            xTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            xTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            xTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                }
            }


            if (i == length - 1) {
                //goal
                tileType = 3;
            } else if (i > 0 && i % randomAmiyaBarRate == 0) {
                tileType = 2;
                z += (AMIYABAR_DEPTH * 0.5);
            } else if (i > 0 && i % randomBoostRate == 0) {
                tileType = 4;
            }

            let tilePos = new THREE.Vector3(x, y, z);
            let tileQuat = new THREE.Quaternion(xTilt, 0, zTilt, 1);
            if ((i % randomSkipRate != 0) || tileType == 2) {
                this.addTile(tileScale, tileType, tilePos, tileQuat);
            }
            if (i % buckoRate == 0) {
                tilePos = new THREE.Vector3(x, y + BALL_RADIUS, z);
                this.addTile(tileScale, 6, tilePos, tileQuat);
            }

            if (tileType == 1) {
                z -= (TILE_DEPTH);
            } else if (tileType == 2) {
                z -= (AMIYABAR_DEPTH * 1.5);
            } else if (tileType == 3) {
                z -= (GOAL_DEPTH);
            } else if (tileType == 4) {
                z -= (TILE_DEPTH);
            } else if (tileType == 5) {
                z -= (DEATH_DEPTH);
            }

        }


    }

    createMapBuilder() {
        console.log("Map builder");
        this.pos.set(0, 0, 0);
        this.quat.set(0, 0, 0, 1);
        if (this.levelString != "") {
            this.loadMapFromLevelString(this.levelString);
        }

        // grid
        const gridTileCount = 200;
        const gridSize = TILE_WIDTH * gridTileCount;
        const gridHelper = new THREE.GridHelper(gridSize, gridTileCount);
        gridHelper.position.x = -TILE_WIDTH / 2;
        gridHelper.position.z = -TILE_WIDTH / 2;
        gridHelper.receiveShadow = true;
        gridHelper.castShadow = false;
        this.scene.add(gridHelper);

    }
    moveGhostTile(player, direction, tileScale, tileSelection, tileSnapDistanceX, tileSnapDistanceY, tileSnapDistanceZ) {
        let playerPos = player.position;
        let rotation = player.quaternion;
        let rotationSnap = 0.1;

        this.pos.set(Math.round(playerPos.x / tileSnapDistanceX) * tileSnapDistanceX, Math.round((playerPos.y - TILE_HEIGHT) / tileSnapDistanceY) * tileSnapDistanceY, Math.round(playerPos.z / tileSnapDistanceZ) * tileSnapDistanceZ);

        this.quat.set(Math.round(rotation.x / rotationSnap) * rotationSnap, 0, Math.round(rotation.z / rotationSnap) * rotationSnap, 1);

        if (this.lastTileSelection != tileSelection) {
            this.scene.remove(this.ghostTile);
            this.ghostTile = null;
        }

        if (tileSelection > 0) {
            if (this.ghostTile != null) {
                this.ghostTile.position.x = this.pos.x;
                this.ghostTile.position.y = this.pos.y;
                this.ghostTile.position.z = this.pos.z;
                this.ghostTile.quaternion.x = this.quat.x;
                this.ghostTile.quaternion.y = this.quat.y;
                this.ghostTile.quaternion.z = this.quat.z;
                this.ghostTile.scale.x = tileScale;
                if (tileSelection == 6) {
                    this.ghostTile.scale.y = tileScale;
                } else {
                    this.ghostTile.scale.y = 1;
                }
                this.ghostTile.scale.z = tileScale;
                this.scale.set(this.ghostTile.scale.x, this.ghostTile.scale.y, this.ghostTile.scale.z);

            } else {

                let materialHex = this.createColour(this.allObjects.length);
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GHOST_TILE, transparent: true, opacity: 0.75 });

                this.ghostTile = this.getTileFromSelection(tileSelection, "GhostTile", material);
                this.ghostTile.scale.x = tileScale;
                if (tileSelection == 6) {
                    this.ghostTile.scale.y = tileScale;
                } else {
                    this.ghostTile.scale.y = 1;
                }
                this.ghostTile.scale.z = tileScale;
                this.scale.set(this.ghostTile.scale.x, this.ghostTile.scale.y, this.ghostTile.scale.z);
                $('.hud--tile_selection img').attr("src", "./images/amiyaroad/tiles/Tile" + tileSelection + ".png");
            }

        }

        this.lastTileSelection = tileSelection;


    }
    getOrDefault(value, defaultValue) {
        if (value && value != "") {
            return value;
        }
        return defaultValue;
    }

    getTileNameFromIndex(tileIndex, i) {
        return tileTypes[tileIndex] + i;
    }
    getTileIndexFromName(tileName) {
        for (var i = 0; i < tileTypes.length; i++) {
            if (tileTypes[i].indexOf(tileName) >= 0) {
                return i;
            }
        }
        //default to regular tile
        return 0;
    }
    getTileFromSelection(tileSelection, tileName, tileMaterial = null) {
        //+1 for ghost tile
        let materialHex = this.createColour(this.allObjects.length + 1);

        if (tileSelection == 1) {
            //console.log("Add tile");
            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });

            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Tile" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 2) {
            //console.log("Add amiyabar");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_AMIYABAR });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "AmiyaBar" + this.allObjects.length);
            return this.createAmiyaBarWithPhysics(actualTileName, AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 3) {
            //console.log("Add goal");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GOAL });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Goal");
            return this.createGoalWithPhysics(actualTileName, GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quart, this.scale, material);
        } else if (tileSelection == 4) {
            //console.log("Add boost");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Boost" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 5) {
            //console.log("Add death");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Death" + this.allObjects.length);
            return this.createDeathWithPhysics(actualTileName, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 6) {
            //console.log("Add ball");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Ball" + this.allObjects.length);
            if (this.inEditor) {
                return this.createBallWithPhysics(actualTileName, BALL_RADIUS, 0, this.pos, this.quat, this.scale, material);
            }
            return this.createBallWithPhysics(actualTileName, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
        }
        return null;
    }
    addTile(scale, tileSelection, tilePos = null, tileQuat = null) {
        this.scale = new Vector3(scale, 1, scale);
        if (tilePos != null) {
            this.pos.x = tilePos.x;
            this.pos.y = tilePos.y;
            this.pos.z = tilePos.z;
        }
        if (tileQuat != null) {
            this.quat.x = tileQuat.x;
            this.quat.y = tileQuat.y;
            this.quat.z = tileQuat.z;
        }


        let newTile = this.getTileFromSelection(tileSelection);

        this.generateLevelString(this.currentWorld);
        return newTile;
    }
    undoLastTile() {
        console.log("Undo");
        let index = this.allObjects.length - 1;
        let lastObject = this.allObjects[index];

        if (lastObject) {
            let lastTile = lastObject.body;
            while (lastTile.name.indexOf("GhostTile") >= 0 || lastTile.name.indexOf("Player") >= 0) {
                console.log("Last Tile", lastTile.name);
                index--;
                if (index < 0) {
                    return;
                }
                lastObject = this.allObjects[index];
                lastTile = lastObject.body;

            }
            if (index < 0) {
                return;
            }

            this.physicsWorld.removeRigidBody(lastTile);
            this.scene.remove(lastObject);

            this.allObjects.splice(index, 1);

        }
        this.generateLevelString(this.currentWorld);
    }


}

export { MapGenerator };
