import * as THREE from 'three';
import { Vector3 } from 'three';
import { ConvexGeometry } from '../jsm/geometries/ConvexGeometry.js';
let mapData = {};
mapData["1-1"] = "1~Tile0,0,0,0.25,0,0,0,0|Tile1,1,-7.549517245077422e-14,0.2500004768371582,-11.999993324279785,-9.301209840306343e-14,1.1817645273406578e-33,-2.5410985186454742e-20|Tile2,0,-3.3861802251067274e-14,0.2500009536743164,-24.000019073486328,-2.427072215080428e-13,-6.281645554053844e-34,5.176315327597851e-21|Tile3,1,6.522550105277428e-14,0.2500014305114746,-36.000064849853516,-1.875660217420805e-12,-1.9070465944374998e-31,2.033467017880087e-19|Tile4,0,4.000000476837158,0.2500019073486328,-48.0001106262207,-3.761189276696442e-12,-6.690286628020419e-31,3.5575378614801786e-19|Tile5,1,4.000000476837158,0.250002384185791,-60.00015640258789,-5.6467179022912095e-12,9.663637573362777e-27,-3.422744943373801e-15|Tile6,0,4.000000476837158,0.2500028610229492,-72.00004577636719,-7.532246527885977e-12,7.135962433915067e-25,-1.8947766532856347e-13|Tile7,1,4.000000476837158,0.2500033378601074,-83.99986267089844,-8.88764496026484e-12,1.754179236930123e-24,-3.947455697820429e-13|Tile8,0,-0.6000004410743713,0.2500038146972656,-95.99967956542969,-1.0243043392643703e-11,3.072982304020927e-24,-6.000135284456309e-13|Tile9,1,-0.6000004410743713,0.25000429153442383,-107.99949645996094,-1.1598441825022565e-11,3.513949706890555e-24,-6.059347901904433e-13|Tile10,0,-0.6000004410743713,0.25000476837158203,-119.99931335449219,-1.2953840257401428e-11,3.9629427786468064e-24,-6.118560519352556e-13|Tile11,1,-0.6000004410743713,-0.549994945526123,-131.59913635253906,-0.15041569556705242,4.6159394472277037e-14,-6.160393375975735e-13|Tile12,0,-0.6000003218650818,-1.473527193069458,-143.5514678955078,-0.000020194444006400938,9.19529896793969e-13,-9.106761211796777e-8|Tile13,1,-0.6000003218650818,-1.473527193069458,-155.55128479003906,-0.000020194444006400938,9.19529896793969e-13,-9.106761211796777e-8|Tile14,0,-0.6000003218650818,0.3264729976654053,-168.35108947753906,0.33764912185633267,-1.5095548775123893e-8,-9.099975528670269e-8|Tile15,1,-0.6000000834465027,2.1657118797302246,-179.32687377929688,-0.00003836862743842256,2.1520424084757622e-12,-1.1217719020351098e-7|Player,0,3.000007390975952,6.915328502655029,-364.739990234375,0.0015631532491201209,0.006090078249492892,-0.0000045733961576767535|Tile17,0,-0.5999994874000549,2.165323257446289,-191.3845672607422,-0.000043245228894029886,-8.958204388582269e-13,4.1429792929648115e-8|Tile18,1,-0.5999994874000549,2.165323257446289,-203.38438415527344,-0.000043245228894029886,-8.958204388582269e-13,4.1429792929648115e-8|AmiyaBar19,0,-0.5999994874000549,2.165323257446289,-212.38424682617188,-0.000043245228894029886,-8.958204388582269e-13,4.1429792929648115e-8|Tile20,1,-0.5999994874000549,2.1653294563293457,-221.3841094970703,-0.000043246731379278625,-8.601896574433868e-13,3.978056284381638e-8|Tile21,0,-0.5999994874000549,-1.2346704006195068,-238.58384704589844,-0.000043246731379278625,-8.601904256596572e-13,3.978059837095317e-8|Tile22,1,1.6000008583068848,-1.2346704006195068,-250.5836639404297,-0.000043246731379278625,-8.601904256596572e-13,3.978059837095317e-8|Tile23,0,4.200001239776611,-1.2346704006195068,-262.583984375,-0.000043246731379278625,-8.601895806217597e-13,3.9780559291102704e-8|Tile24,1,7.199998378753662,-1.2346704006195068,-274.584716796875,-0.000043246731379278625,-8.601891196919975e-13,3.978053797482063e-8|Tile25,0,3.800001382827759,-1.2346704006195068,-286.58544921875,-0.000043246731379278625,-8.601885051189811e-13,3.97805095531112e-8|Tile26,1,5.662441253662109e-7,-1.2346704006195068,-298.586181640625,-0.000043246731379278625,-8.601878905459648e-13,3.978048113140177e-8|Tile27,0,-4.399999618530273,-1.2346704006195068,-310.5869140625,-0.000043246731379278625,-8.601878905459648e-13,3.978048113140177e-8|Tile28,1,-0.7999989986419678,-1.2346704006195068,-322.587646484375,-0.000043246731379278625,-8.601874296162025e-13,3.97804598151197e-8|Tile29,0,3.600001811981201,-1.2346704006195068,-334.58837890625,-0.000043246731379278625,-8.601874296162025e-13,3.97804598151197e-8|Tile30,1,0.40000107884407043,-1.2346704006195068,-346.589111328125,-0.000043246731379278625,-8.601859700052887e-13,3.97803923135598e-8|Tile31,0,-3.5999996662139893,-1.2346704006195068,-358.58984375,-0.000043246731379278625,-8.601859700052887e-13,3.97803923135598e-8|Tile32,1,0.000001043081283569336,-1.2346704006195068,-370.590576171875,-0.000043246731379278625,-8.601855090755264e-13,3.978037099727773e-8|Tile33,0,0.000001043081283569336,-1.2346704006195068,-382.59130859375,-0.000043246731379278625,-8.601855090755264e-13,3.978037099727773e-8|Goal,00ff00,0.000001043081283569336,4.165327548980713,-391.59185791015625,0,0,0";
mapData["1-2"] = "1~Tile0,0,0,1.5,0,0,0,0|Tile1,1,0,1.5,-12,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile2,0,0,1.5,-24,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile3,1,0,1.5,-44.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile4,0,0,1.5,-56.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile5,1,0,1.5,-80.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile6,0,0,1.5,-92.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile7,1,0,1.5,-122.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile8,0,0,1.5,-134.5,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile9,1,6,1.5,-152,-0.0000011446302323750192,-2.699436141208129e-13,4.7166955141621584e-7|Tile10,0,-6,1.5,-152,-0.0000011446059033917467,-2.699384295386583e-13,4.716705177543365e-7|Tile11,1,6,1.5,-164,-0.0000011446059033917467,-2.699384295386583e-13,4.716705177543365e-7|Tile12,0,-6,1.5,-164,-0.0000011446059033917467,-2.699384295386583e-13,4.716705177543365e-7|Tile13,1,6,3,-176,-0.0000011446059033917467,-2.699384295386583e-13,4.716705177543365e-7|Tile14,0,-7.5,1.5,-182,0.000009038056305267004,-0.000001499382492788512,-0.3376721937412079|Tile15,1,3,4.5,-188,9.787673604932931e-8,-6.160301771980097e-16,-1.2587877407099791e-8|Tile16,0,-1,4.5,-200,1.2777569224908874e-7,-6.779980345697631e-16,-1.0612316359015518e-8|AmiyaBar,0,-1,4.5,-209,0.000004870919383412171,1.6480958484060844e-13,6.76708324931497e-8|Tile18,0,-1,4.5,-220,0.000004870649718233092,1.6480215640136746e-13,6.767152882503086e-8|Tile19,1,4.5,4.5,-238,0.000004781184998155393,9.107934002178789e-7,0.38978676508310084|Tile20,0,4.5,4.5,-250,0.000004426766736301849,8.432783774912281e-7,0.38978676508310073|Tile21,1,4.5,4.5,-262,0.000004426344276012871,8.43197900780286e-7,0.38978676508310084|Tile22,0,4.5,4.5,-274,0.000004426344276012871,8.43197900780286e-7,0.38978676508310084|Tile23,1,-1.5,3,-286.5,1.7351625558603775e-7,7.20985175861636e-15,8.310289700830264e-8|Tile24,0,-1.5,3,-298.5,-0.000003276359166199152,-1.5662139990867795e-13,9.560697833421742e-8|Tile25,1,-8,3.5,-316,1.202870159033865e-8,-3.745742290774901e-9,-0.6578393005921698|Tile26,0,-1.5,3.5,-315.5,0.01324274255735157,0.0033494834622648786,0.5256580907152423|Tile27,1,-5.5,1,-329.5,0.09587603581718875,-0.0023363095155257553,-0.04882960352811204|Tile28,0,3,1.5,-347.5,0.018133605652986533,0.0000011664334845097632,0.0001286558694030145|Goal,0,3,6.5,-355.5,0,0,0|Player,0,-1.3454872771490045e-8,3.249999523162842,-2.690974554298009e-8,2.859379942023177e-16,-2.0440134132111166e-32,-1.4296899710115885e-16";
mapData["1-3"] = "1~Tile,0,0,0,0,0,0,0|Tile,1,-1.682941969615793,0,-12,0,0,0|Tile,0,-1.8185948536513634,0,-24,0,0,0|Tile,1,-0.2822400161197344,0,-36,0,0,0|Tile,0,0.5588309963978517,0,-72,0,0,0|Tile,1,-1.3139731974375781,0,-84,0,0,0|Tile,0,-1.9787164932467636,0,-96,0,0,0|Tile,1,-1.6733112770721121,0,-252,0,0,0.04|Tile,0,0.017702618580807752,0,-264,0,0,0.04|Tile,1,1.6924408083503413,0,-276,0,0,0.04|Tile,0,-1.5251169009592056,0,-298,0,0,0.04|Tile,1,-1.912751856809006,0,-324,0,0,0.04|Tile,1,0.317245337609418,0,-492,0,0,0|Tile,0,1.8330430958312676,0,-504,0,0,0|Tile,1,1.6635494852571966,0,-516,0,0,0|Tile,0,-1.8035766952976184,0,-552,0,0,0|Tile,1,-0.247146245490448,0,-564,0,0,0|AmiyaBar,0,1.5365093226473336,0,-576,0,0,0|Tile,1,7.999980413101407,1.5,-132,0,0,0|Tile,0,7.07314583600087,1.5,-144,0,0,0|Tile,1,5.159665926346718,1.5,-156,0,0,0|Tile,0,4.0187852886102595,1.5,-168,0,0,0|Tile,0,6.575806633330131,1.5,-192,0,0,0|Tile,1,7.922794983759114,1.5,-204,0,0,0|AmiyaBar,0,7.5019744935433526,1.5,-216,0,0,0|Tile,1,5.700245580674095,1.5,-228,0,0,0|Tile,1,6.80807529064613,1.5,-372,0,0,0.04|Tile,0,4.897146637516618,1.5,-384,0,0,0.04|Tile,1,4.000176279785466,1.5,-396,0,0,0.04|Tile,0,4.9418346277599525,1.5,-408,0,0,0.04|Tile,0,7.983557706886232,1.5,-432,0,0,0.04|Tile,1,7.287076266713999,1.5,-444,0,0,0.04|Tile,0,5.407262842581229,1.5,-456,0,0,0.04|Tile,1,4.072409227431825,1.5,-468,0,0,0.04|Tile,1,4.659541648313251,1.5,-612,0,0,0|Tile,0,4.026744815919029,1.5,-624,0,0,0|Tile,1,5.208149699636332,1.5,-636,0,0,0|Tile,0,7.117578097703232,1.5,-648,0,0,0|Tile,0,7.043102004173823,1.5,-672,0,0,0|Tile,1,5.12767048950435,1.5,-684,0,0,0|Tile,0,4.014254703830925,1.5,-696,0,0,0|Tile,1,4.726523985721724,1.5,-708,0,0,0|Tile,0,-7.973193476339988,-1,-120,0,0,0|Tile,1,-4.986732699485144,-1,-132,0,0,0|Tile,1,-3.697826692476052,-1,-156,0,0,0|Tile,0,-6.58039570107137,-1,-168,0,0,0|AmiyaBar,0,-8.585075124305089,-1,-192,0,0,0|Tile,1,-5.864092522275234,-1,-204,0,0,0|Tile,1,-3.1837633551029443,-1,-228,0,0,0|Tile,1,-2.851735281263341,-1,-362,0,0,-0.04|Tile,0,-4.04875659972216,-1,-384,0,0,-0.04|Tile,0,-9.074793510473839,-1,-408,0,0,-0.04|Tile,1,-8.282893945778369,-1,-420,0,0,-0.04|Tile,1,-3.06021971080697,-1,-444,0,0,-0.04|Tile,0,-3.431147646567501,-1,-456,0,0,-0.04|Tile,0,-2.8427270608197315,-1,-600,0,0,0|Tile,0,-7.475599934427602,-1,-624,0,0,0|Tile,1,-9.15077350881819,-1,-636,0,0,0|Tile,1,-4.933864557855513,-1,-660,0,0,0|Tile,0,-2.918788674745336,-1,-672,0,0,0|Tile,0,-6.635332241738079,-1,-696,0,0,0|Tile,1,-8.949978676066673,-1,-708,0,0,0|Goal,00ff00,-8.949978676066673,3,-709,0,0,0|Player,0,0,3,0,0,-0.6051864057360395,0";
mapData["1-4"] = "1~Tile0,0,0,1.25,0,0,0,0|Tile1,1,-6.217248937900877e-14,1.2500004768371582,-11.999993324279785,-8.339016326422422e-14,3.924122948179535e-34,-9.411476832695085e-21|Tile2,0,-4.2743586448068527e-14,1.2500007152557373,-23.800018310546875,1.3698912067639651e-13,-6.446349677885885e-34,-9.411476832695085e-21|Tile3,1,5.745405507687901e-14,1.2500009536743164,-35.80006408691406,-7.364441088203444e-13,5.848053974832778e-33,-1.588186776101813e-20|Tile4,0,-5.999998569488525,1.2500011920928955,-35.80006408691406,-2.015051320247707e-12,4.622626288441468e-33,-4.588097823606017e-21|Tile5,1,-5.999998569488525,1.2500014305114746,-47.80010986328125,-3.056810880808225e-12,2.128158865039973e-25,-1.3924046648756266e-13|Tile6,0,-5.999998569488525,1.2500016689300537,-59.80015563964844,-4.335417875395153e-12,5.394885111814471e-25,-2.488749766167697e-13|Tile7,1,-5.999998569488525,1.2500019073486328,-71.800048828125,-5.377177002274802e-12,1.0434826810069866e-24,-3.881154295518052e-13|Tile8,0,3.8743019104003906e-7,1.2500019073486328,-71.800048828125,-5.836069041226244e-12,9.890887757552623e-25,-3.389571880552805e-13|Tile9,1,3.8743019104003906e-7,1.250002145767212,-83.79986572265625,-6.103447608429846e-12,1.0344037193980538e-24,-3.389571880552805e-13|Tile10,0,3.8743019104003906e-7,1.250002384185791,-95.7996826171875,-6.370826175633448e-12,1.0797186630408452e-24,-3.389571880552805e-13|Tile11,1,6.000679969787598,1.2608957290649414,-95.7996826171875,-6.7862343348934484e-12,3.127245796164427e-20,-9.216439167403223e-9|Tile12,0,6.000679969787598,1.2608959674835205,-107.79949951171875,-7.053612902097051e-12,3.2504706746462297e-20,-9.216470253647913e-9|Tile13,1,6.000679969787598,1.2608962059020996,-119.79931640625,-7.320991902981522e-12,3.3736965841586043e-20,-9.216501339892602e-9|Tile14,0,6.000679969787598,1.2608964443206787,-131.79913330078125,-7.588370903865993e-12,3.4969233248518836e-20,-9.216532426137292e-9|Tile15,1,0.000681072473526001,1.2608966827392578,-131.79913330078125,-7.855749904750464e-12,3.6201508967260676e-20,-9.216563512381981e-9|Tile16,0,-0.07347646355628967,4.84999942779541,-53.799076080322266,-0.000011268510206957408,-7.857537080878837e-12,0.0000013946008721181752|Tile17,1,-0.07347646355628967,4.84999942779541,-116.3983154296875,-0.000011268510206957408,-7.857537080878837e-12,0.0000013946008721181752|Tile18,0,-6.258487701416016e-7,1.260896921157837,-143.79827880859375,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile19,1,-6.258487701416016e-7,1.260896921157837,-155.798095703125,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile20,0,-6.258487701416016e-7,1.260896921157837,-188.59759521484375,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile21,1,-6.258487701416016e-7,1.260896921157837,-212.59722900390625,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile22,0,-6.258487701416016e-7,1.260896921157837,-230.59695434570312,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile23,1,5.999998092651367,1.260896921157837,-230.59695434570312,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile24,0,5.999998092651367,1.260896921157837,-254.7965850830078,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile25,1,-0.0000011026859283447266,1.260896921157837,-272.5975646972656,-0.000002774695076372077,1.66530255193223e-14,-1.2003499527679781e-8|Tile26,0,-7.399998664855957,1.260896921157837,-287.9985046386719,-0.000002688432005019022,6.65128415575507e-7,-0.5133994294317872|Tile27,1,-7.305878162384033,1.239469289779663,-299.9992370605469,-0.0000025159154120073407,6.22447184595364e-7,-0.5133994623885403|Tile28,0,-7.211751461029053,1.2180531024932861,-311.9999694824219,-0.0000023628940653019815,5.845891127440586e-7,-0.5133994623885403|Tile29,1,-7.1176323890686035,1.196626901626587,-323.8006896972656,-0.000002207932539024088,5.462510329772333e-7,-0.5133994623885402|Tile30,0,0.1764894723892212,-1.4247944056987762,-335.4013977050781,-1.6161345683940525e-7,1.0311584309547236e-10,-0.0012760802608562654|Tile31,1,0.1764894723892212,-1.4247929751873016,-347.4021301269531,-1.7047469214049022e-8,1.147330578202497e-12,-0.00013460421218670907|Tile32,0,6.176488876342773,2.3752079010009766,-362.4030456542969,-1.639210900350469e-8,-4.712476720363144e-9,0.6031889723440547|Tile33,1,6.034595012664795,2.4015960693359375,-381.4042053222656,-3.42913395456892e-8,-9.858227473022467e-9,0.6031889723440546|Tile34,0,5.892698764801025,2.427985668182373,-401.4054260253906,-6.465060664595511e-8,-1.8586045194750847e-8,0.6031889723440538|Tile35,1,-6.2491865158081055,2.654362201690674,-415.0062561035156,-9.035024817194406e-8,2.598590902182462e-8,-0.6034806522342421|Tile36,0,-6.107123374938965,2.880901336669922,-438.6076965332031,-7.287087555596379e-8,2.0958613626984794e-8,-0.6034806522342424|Tile37,1,3.233452320098877,3.1050705909729004,-452.6085510253906,-6.671483276932135e-8,-8.864556147139583e-9,0.26880462114666204|Tile38,0,-3.982316255569458,3.1633543968200684,-472.0097351074219,-7.790927014639286e-8,9.718498489163171e-9,-0.2520211226295307|Tile39,1,1.2303059101104736,3.2131576538085938,-494.2110900878906,-7.951898339797489e-8,-3.3069603146027194e-9,0.08326980875434409|Tile40,0,-0.37019237875938416,3.21913480758667,-520.212646484375,-8.19647496541621e-8,5.546240928464378e-12,-0.0001353323463756218|Tile41,1,-0.37019237875938416,3.21913480758667,-532.21337890625,-2.909109575455218e-8,6.986479125175369e-13,-0.0000480317358054039|Goal,00ff00,-0.37019237875938416,5.219133377075195,-539.6138305664062,0,0,0|AmiyaBar,0,5.999307632446289,1.2719132900238037,-140.79762268066406,-0.000001029617806125492,7.454042819705844e-16,-1.4479242249620938e-9|AmiyaBar,0,6.235138416290283,2.252838134765625,-371.329345703125,0.000001824798573580766,5.101355766663709e-7,0.5852492442861101|Player,0,0,3,0,0,0,0";
mapData["1-5"] = "1~Tile0,0,0,1.5,0,0,0,0|Tile1,1,0,1.5,-12,-5.5748086702500643e-11,2.1377276851561215e-28,-7.669241445232348e-18|Boost2,0,0,1.5,-24,-6.530994495212994e-11,-6.003944716896674e-22,1.8386004524417743e-11|Boost3,0,0,1.5,-36,-6.544317171508496e-11,-6.016192256228996e-22,1.8386004524417743e-11|Tile4,0,0,1.5,-84,5.393876900683381e-9,-7.390219338398049e-25,-2.7402254350527503e-16|Tile5,1,0,1.5,-96,5.393876900683381e-9,-7.390219338398049e-25,-2.7402254350527503e-16|Boost6,0,5.5,1.5,-109.5,5.21488807692094e-9,1.3322460982046492e-9,0.5312850058660458|Boost7,0,5.5,1.5,-121.5,1.0990957832746087e-7,2.8078571336958046e-8,0.5312850058660454|Boost8,0,5.5,1.5,-133.5,1.0990795829002331e-7,2.8078157466416048e-8,0.5312850058660454|Boost9,0,-5.5,1.5,-144.5,1.0949590034670079e-7,-2.6204682331313556e-8,-0.49556933096235833|Boost10,0,-5.5,1.5,-156.5,1.0949590034670079e-7,-2.6204682331313556e-8,-0.49556933096235833|Boost11,0,-5.5,1.5,-168.5,1.0949590034670079e-7,-2.6204682331313556e-8,-0.49556933096235833|Tile12,0,0,1.5,-188.5,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17|Tile13,1,0,1.5,-200.5,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17|Tile14,0,6,1.5,-200.5,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17|Tile15,1,6,1.5,-188.5,5.46466694117953e-9,-2.649611011542665e-25,-9.697246108729017e-17|Tile16,0,6,3.5,-220,-5.09281846916587e-7,2.4693160411434493e-23,-9.697247432217997e-17|Tile17,1,-4,3.5,-236,-3.691331471600346e-7,6.426902247144899e-8,-0.35498653077671627|Tile18,0,-4,3.5,-248,-2.9765243425572847e-7,5.182366073878887e-8,-0.354986530776717|Tile19,1,-4,3.5,-260,-2.976661335196739e-7,5.182604588980857e-8,-0.354986530776717|Tile20,0,5,3.5,-274.5,-2.9588815664283603e-7,-6.119847098010145e-8,0.4248166632558039|Tile21,1,5,3.5,-286.5,-2.90315114170885e-7,-6.004580004571775e-8,0.42481666325580414|Tile22,0,5,3.5,-298.5,-2.902121138959087e-7,-6.002449652546009e-8,0.42481666325580414|Boost23,0,0,1.5,-314,1.9215831059682506e-7,4.2767998116309796e-24,4.451329529644253e-17|Boost24,0,0,2.5,-326.5,0.18408911019563584,1.717440998744135e-17,1.8761971687584865e-16|Tile25,1,0,1.5,-374.5,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597054e-17|Tile26,0,0,1.5,-386.5,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597054e-17|Tile27,1,0,1.5,-416,-1.1146932621386463e-7,5.518696845766369e-24,-9.901731773597054e-17|Tile28,0,0,3.5,-440,1.370700459801818e-7,-1.5766311013804282e-23,-2.3004750455958795e-16|Tile29,1,0,3.5,-452,1.370700459801818e-7,-1.5766311013804282e-23,-2.3004750455958795e-16|Tile30,0,0,3.5,-477.5,1.370700459801818e-7,-1.5766311013804282e-23,-2.3004750455958795e-16|Tile31,1,7,3.5,-499,1.3535562004562967e-7,2.1341856260520773e-8,0.3204101708773784|Tile32,0,-5,3.5,-513,1.3600151760329035e-7,-1.6955970726396947e-8,-0.2518843866170029|Tile33,1,4,1.5,-533.5,1.3649447794250665e-7,1.249439858687556e-8,0.18408779243903803|Tile34,0,-3.5,1.5,-557,0.2515632696155031,-0.012350054298192529,-0.09934168995120225|Tile35,1,5,2,-577,0.06618122500114354,0.0016522115446724161,0.049987017742699584|Goal,0,1.5,5.5,-585,0,0,0|AmiyaBar,0,0,1.5,-406.5,1.1926395870887071e-8,-1.3279075594982517e-24,-2.226837971628531e-16|AmiyaBar,0,0,1.5,-425.5,1.1926395870887071e-8,-1.3279075594982517e-24,-2.226837971628531e-16|Ball39,0,-2,8.5,-379.5,1.1926395870887065e-8,-1.3279075594982517e-24,-2.226837971628531e-16|Ball40,0,0,4.5,-195,-0.0000012455917612900104,-9.205114715631618e-15,1.478030764445748e-8|Player,0,-1.3711811241989835e-8,3.249999523162842,-2.742362248397967e-8,5.346068563628014e-16,-7.145112271752924e-32,-2.673034281814007e-16";
mapData["1-6"] = "1~Tile0,0,0,1.5,0,0,0,0|Tile1,1,0,1.5,-12,-3.582001709134808e-11,2.3963126669103365e-29,-1.33797404998399e-18|Tile2,0,0,1.5,-24,-3.617091001717476e-11,-1.0120156706705179e-22,5.5957434866305e-12|Tile3,1,6,1.5,-24,-3.619178567948467e-11,-1.0125997449275167e-22,5.5957434866305e-12|Tile4,0,6,1.5,-36,-3.6015877780126715e-11,-1.0094107272455524e-22,5.605365130390005e-12|Tile5,1,6,1.5,-48,-3.6015877780126715e-11,-1.0094107272455524e-22,5.605365130390005e-12|Tile6,0,0,1.5,-48,-3.6115044982354405e-11,-1.0184576150661395e-22,5.640073911378218e-12|Tile7,1,0,1.5,-60,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12|Tile8,0,0,1.5,-80.5,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12|Tile9,1,0,1.5,-92.5,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12|Tile10,0,0,1.5,-116.5,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12|Tile11,1,0,1.5,-128.5,-3.7012979486883424e-11,-1.0437796999317418e-22,5.640073911378218e-12|Tile12,0,6,2.5,-146.5,-3.6212605830643295e-11,-7.489836891583947e-12,0.42481624573450294|Tile13,1,6,2.5,-158.5,6.579791156369197e-10,1.3608952300303499e-10,0.42481624573450294|Tile14,0,-6.5,2.5,-146.5,6.554087828014588e-10,-1.355579315238259e-10,-0.42481634208556807|Tile15,1,-6.5,2.5,-158.5,6.554087828014588e-10,-1.355579315238259e-10,-0.42481634208556807|Death16,0,0,5.5,-31,5.960274052085879e-9,1.1069305443616937e-25,3.714361234696275e-17|Death17,0,0,1.5,-70,-0.00021508110678340885,-1.400730379090906e-14,1.3025136524902443e-10|Death18,0,0,2.5,-103,-0.00007785182250378719,1.9912408222638788e-15,-5.115463608262845e-11|Death19,0,0,2.5,-138.5,-1.5427113842874995,-0.0008317439143348806,0.0011998613450025283|Death20,0,0,3.5,-169.5,-1.5427130856910416,-0.0008317419297054659,0.0011998570376325203|Tile21,1,0,1.5,-183.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Tile22,0,0,1.5,-195.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost23,0,0,1.5,-207.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost24,0,0,1.5,-219.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost25,0,0,1.5,-231.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost26,0,0,1.5,-243.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost27,0,0,1.5,-255.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost28,0,0,1.5,-267.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost29,0,0,1.5,-279.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Boost30,0,0,1.5,-291.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Tile31,1,0,1.5,-303.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Tile32,0,0,1.5,-315.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Tile33,1,0,1.5,-327.5,5.960504534385791e-9,-2.2126153092760245e-18,-7.424255099586219e-10|Death34,0,0,1.5,-214.5,5.651452852362427e-7,-2.097887147759192e-16,-7.424240111575347e-10|Death35,0,0,1.5,-238.5,0.00017632708568692475,-6.844526555353387e-14,-7.763443221620037e-10|Death36,0,0,1.5,-265.5,-0.000017630574803665025,-9.533187219482459e-15,1.0814380502210952e-9|Death37,0,0,2.5,-298.5,-0.00016166351340348781,-3.15313227905923e-13,3.900858303040877e-9|Tile38,0,7,1.5,-292,5.708591377384664e-9,1.6415001898973975e-9,0.6033355531348282|Tile39,1,-7,1.5,-291,6.527719165205785e-8,-1.3501252036407009e-8,-0.424816245734503|Player,0,0.0000050287230806134176,9.483899116516113,-323.24951171875,-0.0005129716649994772,0.002248387735437358,5.87863519114305e-7|Goal,0,0,7.5,-338,0,0,0";
mapData["1-7"] = "1~Tile0,0,0,1.5,0,0,0,0|Tile1,1,0,1.5,-12,-1.259821375909978e-13,-3.2013324200852946e-34,5.082200510803286e-21|Tile2,0,0,1.5,-24,-1.365908932184426e-13,3.8565377245755767e-35,-5.64684457902771e-22|Tile3,1,0,1.5,-36,-2.906921394135037e-13,-1.636375915911866e-33,1.1258480667646498e-20|Tile4,0,0,1.5,-48,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile5,1,6,1.5,0,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile6,0,6,1.5,-12,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile7,1,6,1.5,-24,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile8,0,6,1.5,-36,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile9,1,6,1.5,-48,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile10,0,-6,1.5,-12,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile11,1,-6,1.5,-24,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile12,0,-6,1.5,-36,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile13,1,-6,1.5,-48,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile14,0,-6,1.5,-60,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile15,1,-6,1.5,0,-1.5722426027764678e-8,1.7381552660025185e-23,-2.211052242107026e-15|Tile16,0,6,1.5,-60,-1.5722463331258306e-8,1.7381593900011797e-23,-2.211052242107026e-15|Tile17,1,0,1.5,-60,-1.5722463331258306e-8,1.7381593900011797e-23,-2.211052242107026e-15|Tile18,0,0,1.5,-72,-1.5722463331258306e-8,1.7381593900011797e-23,-2.211052242107026e-15|Tile19,1,0,1.5,-92,-1.5722463331258306e-8,1.7381593900011797e-23,-2.211052242107026e-15|Tile20,0,0,1.5,-104,-1.5722463331258306e-8,1.7381593900011797e-23,-2.211052242107026e-15|Tile21,1,3,1.5,-116.5,-1.5702827482755575e-8,-7.848141503139035e-10,0.10012428057796542|Tile22,0,3,1.5,-128.5,-1.5702827482755575e-8,-7.848141503139035e-10,0.10012428057796542|Tile23,1,3,1.5,-140.5,-1.5702827482755575e-8,-7.848141503139035e-10,0.10012428057796542|Tile24,0,-3,1.5,-116.5,0.0000012750741689163806,-5.31124881344407e-8,-0.08340502518737482|Tile25,1,-3,1.5,-128.5,0.0000012750092537320413,-5.31097841294168e-8,-0.08340502518737482|Tile26,0,-3,1.5,-140.5,0.0000012749933375747825,-5.310912115095244e-8,-0.08340502518737482|Tile27,1,0,0.5,-152.5,-1.567643970190626e-8,1.2105352055596615e-23,-1.544400678442923e-15|Tile28,0,0,0.5,-164.5,1.796857063141033e-8,-1.3735608438766083e-23,-1.5288482006192825e-15|Tile29,1,0,0.5,-176.5,1.7967554555298193e-8,-1.3734735655061987e-23,-1.5288375068283235e-15|Tile30,0,6.5,0.5,-196.5,0.15041569556705203,-9.850149086547871e-17,-1.3145924871606998e-15|Tile31,1,-0.5,3,-212.5,0.15042122500544358,-1.7844196022086653e-8,-2.3813842631171304e-7|Tile32,0,-8.5,5.5,-229.5,0.15041891981669747,-2.3046363668083582e-8,-3.0756825708522165e-7|Tile33,1,0,4,-252.5,-0.133620333964143,-1.5326420471956067e-9,2.300775214791904e-8|Tile34,0,0,2,-264,-0.133620333964143,-1.5326420471956067e-9,2.300775214791904e-8|Tile35,1,0,0.5,-275.5,-0.133620333964143,-1.5326420471956067e-9,2.300775214791904e-8|Tile36,0,0,-0.5,-287.5,0.008688933576914916,8.696725480525331e-12,2.001818710795078e-9|AmiyaBar,0,-9,6,-239,0.00010039612260282979,8.499394363414736e-11,0.0000016931718391796254|Tile38,0,13,0.5,-303.5,0.00009901961327879226,0.000020480295427930695,0.4248187187460194|Tile39,1,13,0.5,-315.5,0.00009837685518002343,0.0000203473533240911,0.4248187187460193|AmiyaBar,0,13,0.5,-324.5,0.00009864556357197774,0.000020402930467365888,0.42481871874601873|Tile41,1,0,1.5,-304.5,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17|Tile42,0,0,1.5,-316.5,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17|Tile43,1,0,1.5,-328.5,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17|Tile44,0,0,1.5,-340.5,6.007651709438733e-9,8.366320887788036e-26,2.785221678095471e-17|Tile45,1,-7,1.5,-359,5.897643262642305e-9,-1.1234727794711057e-9,-0.38978651070077663|Tile46,0,-7,1.5,-377.5,-1.2326758280778455e-7,2.3481883815011023e-8,-0.38978651070077663|Tile47,1,-7,1.5,-399.5,-1.2326839282650334e-7,2.3482038119695196e-8,-0.38978651070077663|Tile48,0,-0.5,1.5,-399,-5.858216809429331e-7,-9.236818408983986e-8,0.32041098225895254|Tile49,1,5.5,2,-409.5,-5.184961082705042e-7,6.464317301441146e-8,-0.25188335819601443|Tile50,0,12,2.5,-419,-4.589668094468031e-7,-1.0984069370729348e-7,0.49557047847091074|Tile51,1,12,2.5,-431,-3.282766840584418e-7,-7.856371738159113e-8,0.49557047847091096|Tile52,0,2.5,-0.5,-442,-6.410196107253713e-8,-1.0141133575133727e-10,0.003164068720016599|Goal,0,2.5,3.5,-448.5,0,0,0|Tile54,0,6,0.5,-328.5,9.433268388647724e-9,-1.098052573856508e-9,-0.2348723432657187|Player,0,4.689778804779053,13.198982238769531,-2.0997023582458496,5.667187952142621e-7,-1.760998982581266e-7,-3.3552439743734047e-7|Ball56,0,0,4,-6,2.8537445259459756e-16,-2.0359644548416553e-32,-1.4268722629729878e-16|Ball57,0,0,4.5,-8.5,-6.266947849553621e-8,6.551959483554456e-24,-2.090957078578894e-16|Ball58,0,0,5,-12,7.180751282476201e-8,-2.5311347148236764e-23,-7.049776869449921e-16|Ball59,0,0,5.5,-14.5,1.4909799617157663e-8,-9.966036819276346e-24,-1.3368438309268476e-15|Ball60,0,0,6,-17,-7.491630782396903e-8,4.9891145449830466e-24,-1.3319168255611266e-16|Ball61,0,0,6.5,-20,-2.491954376182574e-7,-1.4651954325170866e-22,1.1759408169917103e-15|Ball62,0,0,7,-22,1.8864143669361622e-7,-5.434150973529713e-23,-5.761354523985812e-16|Ball63,0,0,7.5,-24.5,2.7914364864046e-7,-3.614389425933606e-22,-2.5896268416187576e-15|Ball64,0,0,8,-27.5,5.554277322517295e-7,3.694655365120087e-22,1.3303820283304814e-15|Ball65,0,0,8.5,-31.5,3.6966770267100333e-7,1.767228314894402e-21,9.561172383334982e-15|Ball66,0,0,9,-34.5,2.4137921172951115e-7,9.165276246292803e-22,7.59408913520148e-15|Ball67,0,0,9.5,-37.5,5.064419497103006e-7,9.370416881268447e-22,3.7004900113938016e-15|Ball68,0,0,10,-40.5,7.198500497907557e-7,-3.574684198645092e-21,-9.931746756659896e-15|Ball69,0,0,10.5,-43.5,7.352039688158336e-7,-2.9782071829085408e-21,-8.10171682752393e-15|Ball70,0,0,11,-47.5,0.0000012749663937942205,-1.938641954557264e-20,-3.041087143934064e-14|Ball71,0,0,11.5,-50.5,0.0000019059243641106777,-4.454259185763708e-20,-4.6741195712084876e-14|Ball72,0,0,12,-54,0.000002105189423674992,-6.644395161947729e-20,-6.312396487679131e-14|Ball73,0,0,12.5,-57,0.000002052322088276545,1.696434081827742e-20,1.653185035155498e-14|Ball74,0,0,13,-59.5,0.0000019745803001582417,9.471353875559797e-20,9.593283063552213e-14|Ball75,0,0,13.5,-62,0.0000017770189515440763,1.2410887183576035e-19,1.3968210268999748e-13|Ball76,0,-4,4.5,-61.5,0.000001815072209866317,1.6133166297951822e-19,1.7776886462438773e-13|Ball77,0,-4.5,5,-58.5,0.0000017269006775686136,-1.295373858461104e-15,-1.500229718232049e-9|Ball78,0,-4,5.5,-56.5,0.000001489807345934065,2.642307654440796e-14,3.5471803272457705e-8|Ball79,0,-4,6,-52.5,0.0000014481648804581314,-1.6544615646103493e-14,-2.2849077296882573e-8|Ball80,0,-4.5,6.5,-49,0.0000012127226227679118,1.005450217272934e-14,1.658170134533066e-8|Ball81,0,-4,7,-45.5,9.407114589522757e-7,9.572411226819502e-15,2.0351428986487008e-8|Ball82,0,-4.5,7.5,-42,2.7732596663554787e-7,8.860134562304106e-15,6.389689843899764e-8|Ball83,0,-4.5,8,-39,8.727377007745615e-7,-1.0876233852717936e-15,-2.49244047623165e-9|Ball84,0,-4,8.5,-35.5,0.0000012115607432863962,9.08541718011974e-15,1.4997873165611967e-8|Ball85,0,-4,9,-32,0.000001834311547100816,-4.36384203145886e-14,-4.758016203254558e-8|Ball86,0,-4.5,9.5,-29,0.0000016984048443199734,-6.536251621839483e-14,-7.696930026668277e-8|Ball87,0,-4.5,10,-25.5,0.0000016510269915678006,-4.2915742477189716e-14,-5.1986724258767956e-8|Ball88,0,-4,10.5,-21.5,0.0000013568812846646851,-5.535591025535427e-15,-8.159285691533569e-9|Ball89,0,-4.5,11,-18,0.0000013603350907946708,2.636537196332725e-14,3.876305498806688e-8|Ball90,0,-4,11.5,-14,0.0000014417249758485461,3.0006789974899506e-14,4.162623312709003e-8|Ball91,0,-4.5,12,-11,0.0000015818103520366326,6.990599214596145e-14,8.83873241264156e-8|Ball92,0,-4,12.5,-6.5,0.00000149283107475695,2.4384386624789448e-14,3.2668648231037884e-8|Ball93,0,5,4.5,-62,0.000001436161255697282,-3.5951753340857956e-14,-5.006645764638053e-8|Ball94,0,5,5,-58,0.0000010067221865030542,-5.124271969342074e-14,-1.0180111331692405e-7|Ball95,0,5,5.5,-52.5,0.0000015517002793791878,-1.0681470651343654e-13,-1.3767440520950956e-7|Ball96,0,5,6,-47,0.0000014383813322643123,-1.1112149916930194e-13,-1.545090952959078e-7|Ball97,0,5,6.5,-43,0.0000011600607194853057,-1.0689071333386245e-13,-1.8428468706588422e-7|Ball98,0,5,7,-39,5.623375614050316e-7,-3.109473547851248e-14,-1.1059099591648214e-7|Ball99,0,4.5,7.5,-35.5,5.716799478250634e-7,-3.57494375260673e-14,-1.250680128350726e-7|Ball100,0,5,8,-31.5,9.321088896287151e-7,-6.92938564842977e-14,-1.48681891687375e-7|Ball101,0,4.5,8.5,-27.5,0.000001099539417737327,-9.59665661016099e-14,-1.7455775491726032e-7|Ball102,0,4.5,9,-23.5,9.61212663242043e-7,-7.239705146851568e-14,-1.5063690739225477e-7|Ball103,0,5,9.5,-19.5,7.805659265614733e-7,-6.837028195345653e-14,-1.7518131301130867e-7|Ball104,0,5,10,-15.5,6.125200684437388e-7,-7.301775577850558e-14,-2.384175132874611e-7|Ball105,0,4.5,10.5,-11.5,5.878648039470473e-7,-7.729654551156988e-14,-2.6297388444618566e-7|Ball106,0,5,11,-7.5,6.457974564000773e-7,-8.20398672024667e-14,-2.5407305770386577e-7";
mapData["1-8"] = "1~Tile0,0,0,1.5,0,0,0,0|Boost1,0,0,1.5,-12,-1.353936340819932e-7,-1.120240630749123e-24,1.6547906972800476e-17|Tile2,0,0,1.5,-24,-2.405500083568791e-7,1.6489774712657466e-19,-1.3710059563326604e-12|Tile3,1,2,1.5,-37,-2.3784875224919458e-7,-3.5543672253602067e-8,0.30320296772928174|Boost4,0,4.5,3.5,-49.5,-0.0002486544279393762,-0.00010440947469567038,0.9140731034325231|Boost5,0,5.5,4,-62,-0.0011510174003372892,-0.0006259621289923881,1.21153075890787|Tile6,0,0,1.5,-103.5,-0.0014700818048369402,1.771370217553741e-20,-2.4098942654137812e-17|AmiyaBar,0,0,1.5,-112.5,-0.004240922769262616,1.2807989297060022e-15,-6.04020793885246e-13|Tile8,0,0,1.5,-121.5,-0.004240922769262616,1.2807989297060022e-15,-6.04020793885246e-13|Boost9,0,-4,2,-134.5,-0.004040911149347675,0.0012262935435505787,-0.6396317651739531|Boost10,0,-4.5,2.5,-146.5,-0.0038490930619965104,0.0016162206805610422,-0.914071741009715|Boost11,0,-5.5,3.5,-158.5,-0.003577783420407143,0.0019206274507709577,-1.1949647357705266|Tile12,0,0,1.5,-191.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|Tile13,1,0,1.5,-203.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|Tile14,0,0,1.5,-215.5,-0.004805183834427359,-0.000007964649612534277,0.003315042722475239|AmiyaBar,0,0,1.5,-224.5,-0.0017560354611395664,-0.0000010636915872270613,0.0012114702893327146|Boost16,0,10,3.5,-244.5,0.1164098944773129,0.05473657139458295,1.0373945004559755|Boost17,0,9.5,3.5,-257,0.12270370721067561,0.0525455980030839,0.936227848150127|Tile18,0,-0.5,2,-275.5,0.07778359743313903,-0.0002680174243307627,-0.006898338202641456|Boost19,0,-7,5.5,-290,0.10341336929414888,-0.04520706485648329,-0.9571447308488146|Boost20,0,-8,6,-303.5,0.03963772102244471,-0.01740267868444698,-0.9604307063499891|Goal,0,1.5,7,-329.5,0,0,0|Player,0,-2.5788118307445984e-8,7.749213218688965,-276.0594482421875,-0.002187702547412279,-1.9879210269982452e-11,-2.120906759261733e-14|Ball23,0,0,4.5,-112,-0.0014797605852212411,-6.000517905879109e-19,8.1101228883716e-16|Ball24,0,0,5,-207.5,-0.0014804843400698245,-1.7971659306504517e-19,2.4278089791610264e-16";

mapData["2-1"] = "2~Tile0,0,0,1.5,0,9.922292836647134e-17,-2.4612973784044756e-33,-4.961146418323567e-17,1,1,1|Tile1,1,0,-0.5,-12,3.655670533539261e-14,-2.61211237501553e-30,-1.429074283938053e-16,1,1,1|Tile2,0,0,-0.5,-24,-6.395948766273196e-13,4.573056593518729e-29,-1.4299853737519434e-16,1,1,1|Tile3,1,0,-0.5,-36,-1.0805034167740701e-12,7.725342372101155e-29,-1.4299524188763393e-16,1,1,1|Tile4,0,0,1.5,-48,-1.0805034167740701e-12,7.725342372101155e-29,-1.4299524188763393e-16,1,1,1|Tile5,1,0,1.5,-60,-1.0805034167740701e-12,7.725342372101155e-29,-1.4299524188763393e-16,1,1,1|Goal,2,0,1.5,-71,0,0,0,1,1,1|Player,2,-1.3455070835277638e-8,3.249999523162842,-2.6910141670555277e-8,2.859380471418769e-16,-2.0440141700827553e-32,-1.4296902357093845e-16,1,1,1";

mapData["3-1"] = "3~Tile0,0,0,1.5,0,0,0,0,1,1,1|Tile1,1,0,1.5,-12,-6.381005446254306e-11,-9.163394452401729e-29,2.872084824118338e-18,1,1,1|Tile2,0,0,1.5,-24,-6.371610877797806e-11,-7.46020628365916e-29,2.3417017852281652e-18,1,1,1|Goal,0,0,1.5,-36,0,0,0|Player,0,-1.288760920203913e-8,3.249999523162842,-2.577521840407826e-8,1.3079694174321244e-17,-4.276959992344327e-35,-6.539847087160622e-18,1,1,1";
const COLOUR_BLANK = new THREE.Color(0xffffff);

const COLOUR_MAIN = new THREE.Color(0xc0bdf2);
const COLOUR_SECONDARY = new THREE.Color(0xffbef4);
const COLOUR_MAIN_WORLD2 = new THREE.Color(0xa2daff);
const COLOUR_SECONDARY_WORLD2 = new THREE.Color(0x8dbede);
const COLOUR_MAIN_WORLD3 = new THREE.Color(0xffffff);
const COLOUR_SECONDARY_WORLD3 = new THREE.Color(0xe6f5ff);

const TEXTURE_TILE_MAIN = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile1.png');
TEXTURE_TILE_MAIN.wrapS = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.wrapT = THREE.RepeatWrapping;
TEXTURE_TILE_MAIN.repeat.set(2, 2);
const TEXTURE_GHOST_TILE = new THREE.TextureLoader().load('../images/amiyaroad/tiles/GhostTile.png');
TEXTURE_GHOST_TILE.wrapS = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.wrapT = THREE.RepeatWrapping;
TEXTURE_GHOST_TILE.repeat.set(2, 2);
const TEXTURE_AMIYABAR = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile2.png');
const TEXTURE_GOAL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile3.png');
const TEXTURE_BOOST = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile4.png');
const TEXTURE_DEATH = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile5.png');
const TEXTURE_BALL = new THREE.TextureLoader().load('../images/amiyaroad/tiles/Tile6.png');

let mainColour = COLOUR_MAIN;
let secondaryColour = COLOUR_SECONDARY;

const colourMap = {
    "*": [COLOUR_MAIN, COLOUR_SECONDARY, COLOUR_BLANK],
    "?": [COLOUR_MAIN, COLOUR_SECONDARY, COLOUR_BLANK],
    "1": [COLOUR_MAIN, COLOUR_SECONDARY, COLOUR_BLANK],
    "2": [COLOUR_MAIN_WORLD2, COLOUR_SECONDARY_WORLD2, COLOUR_BLANK],
    "3": [COLOUR_MAIN_WORLD3, COLOUR_SECONDARY_WORLD3, COLOUR_BLANK],
};

let pos;
let quad;
let scale;
let scene;
let physicsWorld;
let rigidBodies;
let allObjects;
const margin = 0.05;
const TEXTURE_PLAYER = new THREE.TextureLoader().load('../images/amiyaroad/Amiya.png');

TEXTURE_PLAYER.wrapS = THREE.RepeatWrapping;
TEXTURE_PLAYER.wrapT = THREE.RepeatWrapping;
TEXTURE_PLAYER.repeat.set(1, 1);

const TILE_WIDTH = 6;
const TILE_HEIGHT = 2;
const TILE_DEPTH = 12;
const AMIYABAR_WIDTH = 6;
const AMIYABAR_HEIGHT = 2;
const AMIYABAR_DEPTH = 6;

const DEATH_WIDTH = 6;
const DEATH_HEIGHT = 6;
const DEATH_DEPTH = 2;
const GOAL_WIDTH = 12;
const GOAL_HEIGHT = 12;
const GOAL_DEPTH = 4;
const playerRadius = 0.75;
const BALL_RADIUS = 1.5;
const BALL_MASS = 2;

const DEATH_MARGIN = 0.5;
let seed;
let levelString;
let worldSelect = '1';
let xFriction = 0.25;
let physicsFriction = 0.2;
let rollingFriciton = 0;
let ghostTile;

let lastTileSelection = 0;

class MapGenerator {
    constructor(scene, physicsWorld) {
        this.scene = scene;
        this.physicsWorld = physicsWorld;
        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.rigidBodies = [];
        this.allObjects = [];
        this.levelString = "";
    }
    getColourIndex(colourSelection, hexCode) {
        for (let i = 0; i < colourSelection.length; i++) {
            if (colourSelection[i].getHexString() == hexCode) {
                return i;
            }
        }
        return 0;
    }
    generateLevelString() {
        let newLevelString = this.worldSelect + "~";
        let colourSelection = colourMap[this.worldSelect];
        for (let i = 0; i < this.allObjects.length; i++) {
            let object = this.allObjects[i];
            let materialInfo = this.getColourIndex(colourSelection, object.material.color.getHexString());
            let pos = object.position;
            let rotation = new THREE.Euler().setFromQuaternion(object.quaternion, "XYZ");
            let scale = object.scale;
            if (object.name.indexOf("GhostTile") < 0) {
                newLevelString += object.name + "," + materialInfo + "," + pos.x + "," + pos.y + "," + pos.z + "," + rotation.x + "," + rotation.y + "," + rotation.z + "," + scale.x + "," + scale.y + "," + scale.z + "|";
            }
        }
        this.levelString = newLevelString.slice(0, -1);
        $('#levelSelect').attr("value", this.levelString);
        return this.levelString;
    }
    loadMap(levelSelected) {
        this.levelString = mapData[levelSelected];
        this.loadMapFromLevelString(this.levelString);
    }
    loadMapFromLevelString(levelString = "") {
        this.rigidBodies = [];
        this.allObjects = [];
        if (levelString.indexOf("~") < 0) {
            return;
        }
        let parts = levelString.split("~");
        this.worldSelect = parts[0];
        let mapTiles = parts[1].split("|");
        let colourSelection = colourMap[this.worldSelect];

        for (let i = 0; i < mapTiles.length; i++) {
            const tile = mapTiles[i].split(",");
            let tileType = tile[0];
            let colourIndex = parseInt(tile[1]);
            let materialHex = colourSelection[colourIndex];
            this.pos.set(Math.round(parseFloat(tile[2]) * 2.0) / 2.0, Math.round(parseFloat(tile[3]) * 2.0) / 2.0, Math.round(parseFloat(tile[4]) * 2.0) / 2.0);
            this.quat.setFromEuler(new THREE.Euler(tile[5], tile[6], tile[7], 'XYZ'));
            if (tile.length > 10) {
                this.scale = new THREE.Vector3(parseFloat(tile[8]), parseFloat(tile[9]), parseFloat(tile[10]));
            } else {
                this.scale = new THREE.Vector3(1, 1, 1);
            }
            if (tileType.indexOf("GhostTile") >= 0) {
                continue;
            }
            let newTile;
            if (tileType.indexOf("Tile") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Tile" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("AmiyaBar") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_AMIYABAR });
                newTile = this.createAmiyaBarWithPhysics("AmiyaBar", AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Goal") >= 0) {
                let material = new THREE.MeshPhongMaterial({ map: TEXTURE_GOAL });
                newTile = this.createGoalWithPhysics("Goal", GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Boost") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Boost" + i, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Death") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH, shininess: 30, specular: 0xd4aae7 });
                newTile = this.createTileWithPhysics("Death" + i, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
            } else if (tileType.indexOf("Ball") >= 0) {
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
                newTile = this.createBallWithPhysics("Ball" + i, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
            }
            if (newTile) {
                newTile.scale.x = this.scale.x;
                newTile.scale.y = this.scale.y;
                newTile.scale.z = this.scale.z;
            }

        }
    }
    initMap(levelSelected, seed, levelString = "") {
        this.seed = seed;
        this.levelSelected = levelSelected;
        this.lastTileSelection = 0;
        console.log(seed);
        console.log(levelString);
        Math.seedrandom(seed);

        this.worldSelect = levelSelected.split("-")[0];
        console.log(this.worldSelect);
        if (this.worldSelect == "*") {
            this.xFriction = 0;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
        } else if (this.worldSelect == "1") {
            this.xFriction = 0.15;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;
            mainColour = COLOUR_MAIN;
            secondaryColour = COLOUR_SECONDARY;
        } else if (this.worldSelect == "2") {
            this.xFriction = 0.4;
            this.physicsFriction = 0.4;
            this.rollingFriciton = 0;
            mainColour = COLOUR_MAIN_WORLD2;
            secondaryColour = COLOUR_SECONDARY_WORLD2;
        } else if (this.worldSelect == "3") {
            this.xFriction = 0.05;
            this.physicsFriction = 0;
            this.rollingFriciton = 0;
            mainColour = COLOUR_MAIN_WORLD3;
            secondaryColour = COLOUR_SECONDARY_WORLD3;
        } else {
            this.xFriction = 0.25;
            this.physicsFriction = 0.2;
            this.rollingFriciton = 0;
        }

        this.pos = new THREE.Vector3();
        this.quat = new THREE.Quaternion();
        this.scale = new THREE.Vector3(1, 1, 1);
        this.rigidBodies = [];
        this.allObjects = [];
        if (levelSelected == "T-T") {
            console.log("Test");
            this.loadMapFromLevelString(this.levelString);
        } else if (levelSelected == "?-?") {
            console.log("A");
            this.levelString = "";
            this.createMapRandomChaos();
        } else if (levelSelected == "*-*") {
            console.log("B");
            this.levelString = levelString;
            this.createMapBuilder();
        } else {
            console.log("C");
            this.levelString = "";
            this.loadMap(levelSelected);
        }

        this.generateLevelString();
        return this.rigidBodies;

    }

    v3(x, y, z) {
        return new THREE.Vector3(x, y, z);
    }

    createPlayer() {
        this.pos.set(0, 3, 0);
        this.quat.setFromEuler(new THREE.Euler(0, 0, 0, 'XYZ'));
        const playerMaterial = new THREE.MeshPhongMaterial({ map: TEXTURE_PLAYER, name: "Player", shininess: 30, specular: 0xd4aae7 });

        let body = this.createPlayerWithPhysics(playerRadius, 4, this.pos, this.quat, this.scale, playerMaterial);

        return body;

    }
    createPlayerWithPhysics(radius, mass, pos, quat, scale, material) {

        const object = new THREE.Mesh(new THREE.SphereGeometry(radius * scale.x, 32, 32), material);
        const shape = new Ammo.btSphereShape(radius * scale.x);
        shape.setMargin(margin);
        object.name = "Player";
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createBallWithPhysics(name, radius, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.SphereGeometry(radius * scale.x, 32, 32), material);
        const shape = new Ammo.btSphereShape(radius * scale.x);
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createTileWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, scale.x, scale.y, scale.z), material);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createDeathWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, scale.x, scale.y, scale.z), material);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createAmiyaBarWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, scale.x, scale.y, scale.z), material);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = true;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;

    }
    createGoalWithPhysics(name, sx, sy, sz, mass, pos, quat, scale, material) {
        const object = new THREE.Mesh(new THREE.BoxGeometry(sx, sy, sz, scale.x, scale.y, scale.z), material);
        const shape = new Ammo.btBoxShape(new Ammo.btVector3(sx * 0.5 * scale.x, sy * 0.5 * scale.y, sz * 0.5 * scale.z));
        shape.setMargin(margin);
        object.name = name;
        object.receiveShadow = false;
        object.castShadow = true;
        object.body = this.createRigidBody(object, shape, mass, pos, quat, scale);

        return object;
    }

    createRigidBody(object, physicsShape, mass, pos, quat, scale) {

        if (pos) {

            object.position.copy(pos);

        } else {

            pos = object.position;

        }

        if (quat) {

            object.quaternion.copy(quat);

        } else {

            quat = object.quaternion;

        }

        const transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        const motionState = new Ammo.btDefaultMotionState(transform);

        const localInertia = new Ammo.btVector3(0, 0, 0);
        physicsShape.calculateLocalInertia(mass, localInertia);

        const rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, motionState, physicsShape, localInertia);
        const body = new Ammo.btRigidBody(rbInfo);

        body.setFriction(this.physicsFriction);
        body.setRollingFriction(this.rollingFriction);

        //body.setDamping(50);
        // if (vel) {

        //     body.setLinearVelocity(new Ammo.btVector3(vel.x, vel.y, vel.z));

        // }

        // if (angVel) {

        //     body.setAngularVelocity(new Ammo.btVector3(angVel.x, angVel.y, angVel.z));

        // }

        object.userData.physicsBody = body;
        object.userData.collided = false;

        this.scene.add(object);


        if (mass > 0) {
            if (object.name.indexOf("GhostTile") < 0) {
                this.rigidBodies.push(object);
            }

            // Disable deactivation
            body.setActivationState(4);

        }
        body.name = object.name;
        body.scale = new Vector3(scale.x, scale.y, scale.z);
        if (object.name.indexOf("GhostTile") < 0) {
            this.allObjects.push(object);
            this.physicsWorld.addRigidBody(body);
        }

        return body;

    }


    createColour(i) {
        if (i % 2 == 0) {
            return mainColour;
        }
        return secondaryColour;

    }
    clear() {
        console.log("clear");
        for (let i = 0; i < this.rigidBodies.length; i++) {
            this.physicsWorld.removeRigidBody(this.rigidBodies[i]);
        }
        for (let i = 0; i < this.allObjects.length; i++) {
            this.physicsWorld.removeRigidBody(this.allObjects[i].body);
        }
        this.allObjects = [];
        this.rigidBodies = [];

    }

    createMapRandomChaos() {

        const length = 80 + Math.round(Math.random() * 100);
        let x = 0;
        let y = 0;
        let z = TILE_DEPTH;
        let zTilt = 0;
        let xTilt = 0;
        let tileType = 1;
        let xAlgo;
        let yAlgo;
        let zTiltAlgo;
        let xTiltAlgo;
        let randomSwitchupRate = 5 + Math.round(Math.random() * 10);
        let verticalRangeRate;
        let randomSkipRate;
        let randomBoostRate;
        let randomAmiyaBarRate;

        let randomTiltRate;
        let tiltRangeRate;

        let buckoRate;

        let tileScale = 1;
        for (let i = 0; i < length; i++) {
            tileType = 1;
            x = 0;
            y = 0;
            zTilt = 0;
            xTilt = 0;
            if (i == 0 || (i % randomSwitchupRate == 0)) {
                xAlgo = Math.round(Math.random() * 10);
                yAlgo = Math.round(Math.random() * 10);
                verticalRangeRate = Math.random() * 0.5;
                randomSkipRate = 2 + Math.round(Math.random() * 6);
                randomBoostRate = 1 + Math.round(Math.random() * 20);
                randomAmiyaBarRate = 20 + Math.round(Math.random() * 15);
                randomTiltRate = 1 + Math.round(Math.random() * 10);
                xTiltAlgo = Math.round(Math.random() * 6);
                zTiltAlgo = Math.round(Math.random() * 6);
                tiltRangeRate = Math.random() * 0.1;
                buckoRate = Math.round(Math.random() * 20);
            }
            if (i > 2) {

                switch (xAlgo) {
                    case 0:
                        x = Math.sin(i);
                        break;
                    case 1:
                        x = Math.cos(i);
                        break;
                    case 2:
                        x = Math.sin(i) + Math.cos(i);
                        break;
                    case 3:
                        x = Math.sin(i) * 2.0;
                        break;
                    case 4:
                        x = Math.cos(i) * 2.0;
                        break;
                    case 5:
                        x = (Math.sin(i) + Math.cos(i)) * 2.0;
                        break;
                    case 6:
                        x = 3.5;
                        break;
                    case 7:
                        x = -3.5;
                        break;
                    case 8:
                        x = 1.5;
                        break;
                    case 9:
                        x = -1.5;
                        break;
                    case 10:
                        x = 0;
                        break;
                }
                switch (yAlgo) {
                    case 0:
                        y = Math.sin(i) * verticalRangeRate;
                        break;
                    case 1:
                        y = Math.cos(i) * verticalRangeRate;
                        break;
                    case 2:
                        y = (Math.sin(i) + Math.cos(i)) * verticalRangeRate;
                        break;
                    case 3:
                        y = Math.sin(i) * 2.0 * verticalRangeRate;
                        break;
                    case 4:
                        y = Math.cos(i) * 2.0 * verticalRangeRate;
                        break;
                    case 5:
                        y = (Math.sin(i) + Math.cos(i)) * 2.0 * verticalRangeRate;
                        break;
                    case 6:
                        y = 2.5;
                        break;
                    case 7:
                        y = 0;
                        break;
                    case 8:
                        y = 1.5;
                        break;
                    case 9:
                        y = -1.5;
                        break;
                }
                if (i % randomTiltRate == 0) {
                    switch (zTiltAlgo) {
                        case 0:
                            zTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            zTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            zTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            zTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            zTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            zTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                    switch (xTiltAlgo) {
                        case 0:
                            xTilt = Math.sin(i) * tiltRangeRate;
                            break;
                        case 1:
                            xTilt = Math.cos(i) * tiltRangeRate;
                            break;
                        case 2:
                            xTilt = (Math.sin(i) + Math.cos(i)) * tiltRangeRate;
                            break;
                        case 3:
                            xTilt = Math.sin(i) * 2.0 * tiltRangeRate;
                            break;
                        case 4:
                            xTilt = Math.cos(i) * 2.0 * tiltRangeRate;
                            break;
                        case 5:
                            xTilt = (Math.sin(i) + Math.cos(i)) * 2.0 * tiltRangeRate;
                            break;
                    }
                }
            }


            if (i == length - 1) {
                //goal
                tileType = 3;
            } else if (i > 0 && i % randomAmiyaBarRate == 0) {
                tileType = 2;
                z += (AMIYABAR_DEPTH * 0.5);
            } else if (i > 0 && i % randomBoostRate == 0) {
                tileType = 4;
            }

            let tilePos = new THREE.Vector3(x, y, z);
            let tileQuat = new THREE.Quaternion(xTilt, 0, zTilt, 1);
            if ((i % randomSkipRate != 0) || tileType == 2) {
                this.addTile(tileScale, tileType, tilePos, tileQuat);
            }
            if (i % buckoRate == 0) {
                tilePos = new THREE.Vector3(x, y + BALL_RADIUS, z);
                this.addTile(tileScale, 6, tilePos, tileQuat);
            }

            if (tileType == 1) {
                z -= (TILE_DEPTH);
            } else if (tileType == 2) {
                z -= (AMIYABAR_DEPTH * 1.5);
            } else if (tileType == 3) {
                z -= (GOAL_DEPTH);
            } else if (tileType == 4) {
                z -= (TILE_DEPTH);
            } else if (tileType == 5) {
                z -= (DEATH_DEPTH);
            }

        }


    }

    createMapBuilder() {
        console.log("Map builder");
        this.pos.set(0, 0, 0);
        this.quat.set(0, 0, 0, 1);
        if (this.levelString != "") {
            this.loadMapFromLevelString(this.levelString);
        }

        // grid
        const gridTileCount = 200;
        const gridSize = TILE_WIDTH * gridTileCount;
        const gridHelper = new THREE.GridHelper(gridSize, gridTileCount);
        gridHelper.position.x = -TILE_WIDTH / 2;
        gridHelper.position.z = -TILE_WIDTH / 2;
        gridHelper.receiveShadow = true;
        gridHelper.castShadow = false;
        this.scene.add(gridHelper);

    }
    moveGhostTile(player, direction, tileScale, tileSelection) {
        let playerPos = player.position;
        let rotation = player.quaternion;
        this.pos.set(Math.round(playerPos.x * 2.0) / 2.0, Math.round(((playerPos.y - playerRadius - TILE_HEIGHT / 2.0)) * 2.0) / 2.0, Math.round(playerPos.z * 2.0) / 2.0);
        this.quat.set(rotation.x, 0, rotation.z, 1);

        if (this.lastTileSelection != tileSelection) {
            this.scene.remove(this.ghostTile);
            this.ghostTile = null;
        }

        if (tileSelection > 0) {
            if (this.ghostTile != null) {
                this.ghostTile.position.x = this.pos.x;
                this.ghostTile.position.y = this.pos.y;
                this.ghostTile.position.z = this.pos.z;
                this.ghostTile.quaternion.x = this.quat.x;
                this.ghostTile.quaternion.y = this.quat.y;
                this.ghostTile.quaternion.z = this.quat.z;
                this.ghostTile.scale.x = tileScale;
                if (tileSelection == 6) {
                    this.ghostTile.scale.y = tileScale;
                } else {
                    this.ghostTile.scale.y = 1;
                }
                this.ghostTile.scale.z = tileScale;

            } else {

                let materialHex = this.createColour(this.allObjects.length);
                let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GHOST_TILE, transparent: true, opacity: 0.75 });

                this.ghostTile = this.getTileFromSelection(tileSelection, "GhostTile", material);
                this.ghostTile.scale.x = tileScale;
                this.ghostTile.scale.z = tileScale;
                $('.hud--tile_selection img').attr("src", "./images/amiyaroad/tiles/Tile" + tileSelection + ".png");
            }

        }
        this.lastTileSelection = tileSelection;


    }
    getOrDefault(value, defaultValue) {
        if (value && value != "") {
            return value;
        }
        return defaultValue;
    }
    getTileFromSelection(tileSelection, tileName, tileMaterial = null) {
        //+1 for ghost tile
        let materialHex = this.createColour(this.allObjects.length + 1);

        if (tileSelection == 1) {
            //console.log("Add tile");
            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_TILE_MAIN, shininess: 30, specular: 0xd4aae7 });

            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Tile" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 2) {
            //console.log("Add amiyabar");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_AMIYABAR });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "AmiyaBar" + this.allObjects.length);
            return this.createAmiyaBarWithPhysics(actualTileName, AMIYABAR_WIDTH, AMIYABAR_HEIGHT, AMIYABAR_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 3) {
            //console.log("Add goal");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_GOAL });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Goal");
            return this.createGoalWithPhysics(actualTileName, GOAL_WIDTH, GOAL_HEIGHT, GOAL_DEPTH, 0, this.pos, this.quart, this.scale, material);
        } else if (tileSelection == 4) {
            //console.log("Add boost");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BOOST });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Boost" + this.allObjects.length);
            return this.createTileWithPhysics(actualTileName, TILE_WIDTH, TILE_HEIGHT, TILE_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 5) {
            //console.log("Add death");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_DEATH });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Death" + this.allObjects.length);
            return this.createDeathWithPhysics(actualTileName, DEATH_WIDTH, DEATH_HEIGHT, DEATH_DEPTH, 0, this.pos, this.quat, this.scale, material);
        } else if (tileSelection == 6) {
            //console.log("Add ball");

            let material = new THREE.MeshPhongMaterial({ color: materialHex, map: TEXTURE_BALL, shininess: 30, specular: 0xd4aae7, transparent: true, opacity: 1 });
            if (tileMaterial != null) {
                material = tileMaterial;
            }
            let actualTileName = this.getOrDefault(tileName, "Ball" + this.allObjects.length);
            if (this.levelSelected == "*-*") {
                return this.createBallWithPhysics(actualTileName, BALL_RADIUS, 0, this.pos, this.quat, this.scale, material);
            }
            return this.createBallWithPhysics(actualTileName, BALL_RADIUS, BALL_MASS, this.pos, this.quat, this.scale, material);
        }
        return null;
    }
    addTile(scale, tileSelection, tilePos = null, tileQuat = null) {
        this.scale = new Vector3(scale, scale, scale);
        if (tilePos != null) {
            this.pos.x = tilePos.x;
            this.pos.y = tilePos.y;
            this.pos.z = tilePos.z;
        }
        if (tileQuat != null) {
            this.quat.x = tileQuat.x;
            this.quat.y = tileQuat.y;
            this.quat.z = tileQuat.z;
        }


        let newTile = this.getTileFromSelection(tileSelection);

        newTile.scale.x = this.scale.x;
        if (tileSelection == 6) {
            newTile.scale.y = this.scale.y;
        } else {
            newTile.scale.y = 1;
        }
        newTile.scale.z = this.scale.z;
        
        this.generateLevelString();
        return newTile;
    }
    undoLastTile() {
        console.log("Undo");
        let index = this.allObjects.length - 1;
        let lastObject = this.allObjects[index];

        if (lastObject) {
            let lastTile = lastObject.body;
            while (lastTile.name.indexOf("GhostTile") >= 0 || lastTile.name.indexOf("Player") >= 0) {
                console.log("Last Tile", lastTile.name);
                index--;
                if (index < 0) {
                    return;
                }
                lastObject = this.allObjects[index];
                lastTile = lastObject.body;

            }
            if (index < 0) {
                return;
            }

            this.physicsWorld.removeRigidBody(lastTile);
            this.scene.remove(lastObject);

            this.allObjects.splice(index, 1);

        }
        this.generateLevelString();
    }


}

export { MapGenerator };
